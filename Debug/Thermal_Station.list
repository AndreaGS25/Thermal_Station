
Thermal_Station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006438  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  080064f8  080064f8  000074f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006640  08006640  00008064  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08006640  08006640  00008064  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08006640  08006640  00008064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006640  08006640  00007640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006644  08006644  00007644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08006648  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007a0  20000064  080066ac  00008064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000804  080066ac  00008804  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019d60  00000000  00000000  0000808c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000416f  00000000  00000000  00021dec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001680  00000000  00000000  00025f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001184  00000000  00000000  000275e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cc00  00000000  00000000  00028764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002015e  00000000  00000000  00045364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b7d7  00000000  00000000  000654c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00100c99  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054c8  00000000  00000000  00100cdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  001061a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000064 	.word	0x20000064
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080064e0 	.word	0x080064e0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000068 	.word	0x20000068
 8000104:	080064e0 	.word	0x080064e0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b084      	sub	sp, #16
 8000248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800024a:	1d3b      	adds	r3, r7, #4
 800024c:	0018      	movs	r0, r3
 800024e:	230c      	movs	r3, #12
 8000250:	001a      	movs	r2, r3
 8000252:	2100      	movs	r1, #0
 8000254:	f005 fca4 	bl	8005ba0 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000258:	4b33      	ldr	r3, [pc, #204]	@ (8000328 <MX_ADC_Init+0xe4>)
 800025a:	4a34      	ldr	r2, [pc, #208]	@ (800032c <MX_ADC_Init+0xe8>)
 800025c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800025e:	4b32      	ldr	r3, [pc, #200]	@ (8000328 <MX_ADC_Init+0xe4>)
 8000260:	2200      	movs	r2, #0
 8000262:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000264:	4b30      	ldr	r3, [pc, #192]	@ (8000328 <MX_ADC_Init+0xe4>)
 8000266:	2200      	movs	r2, #0
 8000268:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800026a:	4b2f      	ldr	r3, [pc, #188]	@ (8000328 <MX_ADC_Init+0xe4>)
 800026c:	2200      	movs	r2, #0
 800026e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000270:	4b2d      	ldr	r3, [pc, #180]	@ (8000328 <MX_ADC_Init+0xe4>)
 8000272:	2201      	movs	r2, #1
 8000274:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000276:	4b2c      	ldr	r3, [pc, #176]	@ (8000328 <MX_ADC_Init+0xe4>)
 8000278:	2204      	movs	r2, #4
 800027a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800027c:	4b2a      	ldr	r3, [pc, #168]	@ (8000328 <MX_ADC_Init+0xe4>)
 800027e:	2200      	movs	r2, #0
 8000280:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000282:	4b29      	ldr	r3, [pc, #164]	@ (8000328 <MX_ADC_Init+0xe4>)
 8000284:	2200      	movs	r2, #0
 8000286:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000288:	4b27      	ldr	r3, [pc, #156]	@ (8000328 <MX_ADC_Init+0xe4>)
 800028a:	2200      	movs	r2, #0
 800028c:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800028e:	4b26      	ldr	r3, [pc, #152]	@ (8000328 <MX_ADC_Init+0xe4>)
 8000290:	2200      	movs	r2, #0
 8000292:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000294:	4b24      	ldr	r3, [pc, #144]	@ (8000328 <MX_ADC_Init+0xe4>)
 8000296:	22c2      	movs	r2, #194	@ 0xc2
 8000298:	32ff      	adds	r2, #255	@ 0xff
 800029a:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800029c:	4b22      	ldr	r3, [pc, #136]	@ (8000328 <MX_ADC_Init+0xe4>)
 800029e:	2200      	movs	r2, #0
 80002a0:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80002a2:	4b21      	ldr	r3, [pc, #132]	@ (8000328 <MX_ADC_Init+0xe4>)
 80002a4:	2224      	movs	r2, #36	@ 0x24
 80002a6:	2100      	movs	r1, #0
 80002a8:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80002aa:	4b1f      	ldr	r3, [pc, #124]	@ (8000328 <MX_ADC_Init+0xe4>)
 80002ac:	2201      	movs	r2, #1
 80002ae:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80002b0:	4b1d      	ldr	r3, [pc, #116]	@ (8000328 <MX_ADC_Init+0xe4>)
 80002b2:	0018      	movs	r0, r3
 80002b4:	f001 f8fc 	bl	80014b0 <HAL_ADC_Init>
 80002b8:	1e03      	subs	r3, r0, #0
 80002ba:	d001      	beq.n	80002c0 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80002bc:	f000 fbda 	bl	8000a74 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80002c0:	1d3b      	adds	r3, r7, #4
 80002c2:	2200      	movs	r2, #0
 80002c4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80002c6:	1d3b      	adds	r3, r7, #4
 80002c8:	2280      	movs	r2, #128	@ 0x80
 80002ca:	0152      	lsls	r2, r2, #5
 80002cc:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80002ce:	1d3b      	adds	r3, r7, #4
 80002d0:	2280      	movs	r2, #128	@ 0x80
 80002d2:	0552      	lsls	r2, r2, #21
 80002d4:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80002d6:	1d3a      	adds	r2, r7, #4
 80002d8:	4b13      	ldr	r3, [pc, #76]	@ (8000328 <MX_ADC_Init+0xe4>)
 80002da:	0011      	movs	r1, r2
 80002dc:	0018      	movs	r0, r3
 80002de:	f001 fac1 	bl	8001864 <HAL_ADC_ConfigChannel>
 80002e2:	1e03      	subs	r3, r0, #0
 80002e4:	d001      	beq.n	80002ea <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80002e6:	f000 fbc5 	bl	8000a74 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80002ea:	1d3b      	adds	r3, r7, #4
 80002ec:	2201      	movs	r2, #1
 80002ee:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80002f0:	1d3a      	adds	r2, r7, #4
 80002f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000328 <MX_ADC_Init+0xe4>)
 80002f4:	0011      	movs	r1, r2
 80002f6:	0018      	movs	r0, r3
 80002f8:	f001 fab4 	bl	8001864 <HAL_ADC_ConfigChannel>
 80002fc:	1e03      	subs	r3, r0, #0
 80002fe:	d001      	beq.n	8000304 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 8000300:	f000 fbb8 	bl	8000a74 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000304:	1d3b      	adds	r3, r7, #4
 8000306:	2202      	movs	r2, #2
 8000308:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800030a:	1d3a      	adds	r2, r7, #4
 800030c:	4b06      	ldr	r3, [pc, #24]	@ (8000328 <MX_ADC_Init+0xe4>)
 800030e:	0011      	movs	r1, r2
 8000310:	0018      	movs	r0, r3
 8000312:	f001 faa7 	bl	8001864 <HAL_ADC_ConfigChannel>
 8000316:	1e03      	subs	r3, r0, #0
 8000318:	d001      	beq.n	800031e <MX_ADC_Init+0xda>
  {
    Error_Handler();
 800031a:	f000 fbab 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800031e:	46c0      	nop			@ (mov r8, r8)
 8000320:	46bd      	mov	sp, r7
 8000322:	b004      	add	sp, #16
 8000324:	bd80      	pop	{r7, pc}
 8000326:	46c0      	nop			@ (mov r8, r8)
 8000328:	20000080 	.word	0x20000080
 800032c:	40012400 	.word	0x40012400

08000330 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000330:	b590      	push	{r4, r7, lr}
 8000332:	b08b      	sub	sp, #44	@ 0x2c
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000338:	2414      	movs	r4, #20
 800033a:	193b      	adds	r3, r7, r4
 800033c:	0018      	movs	r0, r3
 800033e:	2314      	movs	r3, #20
 8000340:	001a      	movs	r2, r3
 8000342:	2100      	movs	r1, #0
 8000344:	f005 fc2c 	bl	8005ba0 <memset>
  if(adcHandle->Instance==ADC1)
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	4a2d      	ldr	r2, [pc, #180]	@ (8000404 <HAL_ADC_MspInit+0xd4>)
 800034e:	4293      	cmp	r3, r2
 8000350:	d153      	bne.n	80003fa <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000352:	4b2d      	ldr	r3, [pc, #180]	@ (8000408 <HAL_ADC_MspInit+0xd8>)
 8000354:	699a      	ldr	r2, [r3, #24]
 8000356:	4b2c      	ldr	r3, [pc, #176]	@ (8000408 <HAL_ADC_MspInit+0xd8>)
 8000358:	2180      	movs	r1, #128	@ 0x80
 800035a:	0089      	lsls	r1, r1, #2
 800035c:	430a      	orrs	r2, r1
 800035e:	619a      	str	r2, [r3, #24]
 8000360:	4b29      	ldr	r3, [pc, #164]	@ (8000408 <HAL_ADC_MspInit+0xd8>)
 8000362:	699a      	ldr	r2, [r3, #24]
 8000364:	2380      	movs	r3, #128	@ 0x80
 8000366:	009b      	lsls	r3, r3, #2
 8000368:	4013      	ands	r3, r2
 800036a:	613b      	str	r3, [r7, #16]
 800036c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800036e:	4b26      	ldr	r3, [pc, #152]	@ (8000408 <HAL_ADC_MspInit+0xd8>)
 8000370:	695a      	ldr	r2, [r3, #20]
 8000372:	4b25      	ldr	r3, [pc, #148]	@ (8000408 <HAL_ADC_MspInit+0xd8>)
 8000374:	2180      	movs	r1, #128	@ 0x80
 8000376:	0289      	lsls	r1, r1, #10
 8000378:	430a      	orrs	r2, r1
 800037a:	615a      	str	r2, [r3, #20]
 800037c:	4b22      	ldr	r3, [pc, #136]	@ (8000408 <HAL_ADC_MspInit+0xd8>)
 800037e:	695a      	ldr	r2, [r3, #20]
 8000380:	2380      	movs	r3, #128	@ 0x80
 8000382:	029b      	lsls	r3, r3, #10
 8000384:	4013      	ands	r3, r2
 8000386:	60fb      	str	r3, [r7, #12]
 8000388:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800038a:	193b      	adds	r3, r7, r4
 800038c:	2207      	movs	r2, #7
 800038e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000390:	193b      	adds	r3, r7, r4
 8000392:	2203      	movs	r2, #3
 8000394:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000396:	193b      	adds	r3, r7, r4
 8000398:	2200      	movs	r2, #0
 800039a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800039c:	193a      	adds	r2, r7, r4
 800039e:	2390      	movs	r3, #144	@ 0x90
 80003a0:	05db      	lsls	r3, r3, #23
 80003a2:	0011      	movs	r1, r2
 80003a4:	0018      	movs	r0, r3
 80003a6:	f001 ff67 	bl	8002278 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 80003aa:	4b18      	ldr	r3, [pc, #96]	@ (800040c <HAL_ADC_MspInit+0xdc>)
 80003ac:	4a18      	ldr	r2, [pc, #96]	@ (8000410 <HAL_ADC_MspInit+0xe0>)
 80003ae:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80003b0:	4b16      	ldr	r3, [pc, #88]	@ (800040c <HAL_ADC_MspInit+0xdc>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80003b6:	4b15      	ldr	r3, [pc, #84]	@ (800040c <HAL_ADC_MspInit+0xdc>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80003bc:	4b13      	ldr	r3, [pc, #76]	@ (800040c <HAL_ADC_MspInit+0xdc>)
 80003be:	2280      	movs	r2, #128	@ 0x80
 80003c0:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80003c2:	4b12      	ldr	r3, [pc, #72]	@ (800040c <HAL_ADC_MspInit+0xdc>)
 80003c4:	2280      	movs	r2, #128	@ 0x80
 80003c6:	0052      	lsls	r2, r2, #1
 80003c8:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80003ca:	4b10      	ldr	r3, [pc, #64]	@ (800040c <HAL_ADC_MspInit+0xdc>)
 80003cc:	2280      	movs	r2, #128	@ 0x80
 80003ce:	00d2      	lsls	r2, r2, #3
 80003d0:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 80003d2:	4b0e      	ldr	r3, [pc, #56]	@ (800040c <HAL_ADC_MspInit+0xdc>)
 80003d4:	2220      	movs	r2, #32
 80003d6:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 80003d8:	4b0c      	ldr	r3, [pc, #48]	@ (800040c <HAL_ADC_MspInit+0xdc>)
 80003da:	2200      	movs	r2, #0
 80003dc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80003de:	4b0b      	ldr	r3, [pc, #44]	@ (800040c <HAL_ADC_MspInit+0xdc>)
 80003e0:	0018      	movs	r0, r3
 80003e2:	f001 fd33 	bl	8001e4c <HAL_DMA_Init>
 80003e6:	1e03      	subs	r3, r0, #0
 80003e8:	d001      	beq.n	80003ee <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 80003ea:	f000 fb43 	bl	8000a74 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	4a06      	ldr	r2, [pc, #24]	@ (800040c <HAL_ADC_MspInit+0xdc>)
 80003f2:	631a      	str	r2, [r3, #48]	@ 0x30
 80003f4:	4b05      	ldr	r3, [pc, #20]	@ (800040c <HAL_ADC_MspInit+0xdc>)
 80003f6:	687a      	ldr	r2, [r7, #4]
 80003f8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80003fa:	46c0      	nop			@ (mov r8, r8)
 80003fc:	46bd      	mov	sp, r7
 80003fe:	b00b      	add	sp, #44	@ 0x2c
 8000400:	bd90      	pop	{r4, r7, pc}
 8000402:	46c0      	nop			@ (mov r8, r8)
 8000404:	40012400 	.word	0x40012400
 8000408:	40021000 	.word	0x40021000
 800040c:	200000c0 	.word	0x200000c0
 8000410:	40020008 	.word	0x40020008

08000414 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800041a:	4b0c      	ldr	r3, [pc, #48]	@ (800044c <MX_DMA_Init+0x38>)
 800041c:	695a      	ldr	r2, [r3, #20]
 800041e:	4b0b      	ldr	r3, [pc, #44]	@ (800044c <MX_DMA_Init+0x38>)
 8000420:	2101      	movs	r1, #1
 8000422:	430a      	orrs	r2, r1
 8000424:	615a      	str	r2, [r3, #20]
 8000426:	4b09      	ldr	r3, [pc, #36]	@ (800044c <MX_DMA_Init+0x38>)
 8000428:	695b      	ldr	r3, [r3, #20]
 800042a:	2201      	movs	r2, #1
 800042c:	4013      	ands	r3, r2
 800042e:	607b      	str	r3, [r7, #4]
 8000430:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000432:	2200      	movs	r2, #0
 8000434:	2100      	movs	r1, #0
 8000436:	2009      	movs	r0, #9
 8000438:	f001 fcd6 	bl	8001de8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800043c:	2009      	movs	r0, #9
 800043e:	f001 fce8 	bl	8001e12 <HAL_NVIC_EnableIRQ>

}
 8000442:	46c0      	nop			@ (mov r8, r8)
 8000444:	46bd      	mov	sp, r7
 8000446:	b002      	add	sp, #8
 8000448:	bd80      	pop	{r7, pc}
 800044a:	46c0      	nop			@ (mov r8, r8)
 800044c:	40021000 	.word	0x40021000

08000450 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000450:	b590      	push	{r4, r7, lr}
 8000452:	b089      	sub	sp, #36	@ 0x24
 8000454:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000456:	240c      	movs	r4, #12
 8000458:	193b      	adds	r3, r7, r4
 800045a:	0018      	movs	r0, r3
 800045c:	2314      	movs	r3, #20
 800045e:	001a      	movs	r2, r3
 8000460:	2100      	movs	r1, #0
 8000462:	f005 fb9d 	bl	8005ba0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000466:	4b38      	ldr	r3, [pc, #224]	@ (8000548 <MX_GPIO_Init+0xf8>)
 8000468:	695a      	ldr	r2, [r3, #20]
 800046a:	4b37      	ldr	r3, [pc, #220]	@ (8000548 <MX_GPIO_Init+0xf8>)
 800046c:	2180      	movs	r1, #128	@ 0x80
 800046e:	03c9      	lsls	r1, r1, #15
 8000470:	430a      	orrs	r2, r1
 8000472:	615a      	str	r2, [r3, #20]
 8000474:	4b34      	ldr	r3, [pc, #208]	@ (8000548 <MX_GPIO_Init+0xf8>)
 8000476:	695a      	ldr	r2, [r3, #20]
 8000478:	2380      	movs	r3, #128	@ 0x80
 800047a:	03db      	lsls	r3, r3, #15
 800047c:	4013      	ands	r3, r2
 800047e:	60bb      	str	r3, [r7, #8]
 8000480:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000482:	4b31      	ldr	r3, [pc, #196]	@ (8000548 <MX_GPIO_Init+0xf8>)
 8000484:	695a      	ldr	r2, [r3, #20]
 8000486:	4b30      	ldr	r3, [pc, #192]	@ (8000548 <MX_GPIO_Init+0xf8>)
 8000488:	2180      	movs	r1, #128	@ 0x80
 800048a:	0289      	lsls	r1, r1, #10
 800048c:	430a      	orrs	r2, r1
 800048e:	615a      	str	r2, [r3, #20]
 8000490:	4b2d      	ldr	r3, [pc, #180]	@ (8000548 <MX_GPIO_Init+0xf8>)
 8000492:	695a      	ldr	r2, [r3, #20]
 8000494:	2380      	movs	r3, #128	@ 0x80
 8000496:	029b      	lsls	r3, r3, #10
 8000498:	4013      	ands	r3, r2
 800049a:	607b      	str	r3, [r7, #4]
 800049c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800049e:	4b2a      	ldr	r3, [pc, #168]	@ (8000548 <MX_GPIO_Init+0xf8>)
 80004a0:	695a      	ldr	r2, [r3, #20]
 80004a2:	4b29      	ldr	r3, [pc, #164]	@ (8000548 <MX_GPIO_Init+0xf8>)
 80004a4:	2180      	movs	r1, #128	@ 0x80
 80004a6:	02c9      	lsls	r1, r1, #11
 80004a8:	430a      	orrs	r2, r1
 80004aa:	615a      	str	r2, [r3, #20]
 80004ac:	4b26      	ldr	r3, [pc, #152]	@ (8000548 <MX_GPIO_Init+0xf8>)
 80004ae:	695a      	ldr	r2, [r3, #20]
 80004b0:	2380      	movs	r3, #128	@ 0x80
 80004b2:	02db      	lsls	r3, r3, #11
 80004b4:	4013      	ands	r3, r2
 80004b6:	603b      	str	r3, [r7, #0]
 80004b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_NSS_Pin|GPIO2_Pin|GPIO3_Pin, GPIO_PIN_RESET);
 80004ba:	4924      	ldr	r1, [pc, #144]	@ (800054c <MX_GPIO_Init+0xfc>)
 80004bc:	2390      	movs	r3, #144	@ 0x90
 80004be:	05db      	lsls	r3, r3, #23
 80004c0:	2200      	movs	r2, #0
 80004c2:	0018      	movs	r0, r3
 80004c4:	f002 f840 	bl	8002548 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO0_Pin|GPIO1_Pin|LED_G_Pin|LED_Y_Pin
 80004c8:	4b21      	ldr	r3, [pc, #132]	@ (8000550 <MX_GPIO_Init+0x100>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	21e3      	movs	r1, #227	@ 0xe3
 80004ce:	0018      	movs	r0, r3
 80004d0:	f002 f83a 	bl	8002548 <HAL_GPIO_WritePin>
                          |LED_R_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SPI1_NSS_Pin GPIO2_Pin GPIO3_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_Pin|GPIO2_Pin|GPIO3_Pin;
 80004d4:	193b      	adds	r3, r7, r4
 80004d6:	4a1d      	ldr	r2, [pc, #116]	@ (800054c <MX_GPIO_Init+0xfc>)
 80004d8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004da:	193b      	adds	r3, r7, r4
 80004dc:	2201      	movs	r2, #1
 80004de:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e0:	193b      	adds	r3, r7, r4
 80004e2:	2200      	movs	r2, #0
 80004e4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004e6:	193b      	adds	r3, r7, r4
 80004e8:	2200      	movs	r2, #0
 80004ea:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ec:	193a      	adds	r2, r7, r4
 80004ee:	2390      	movs	r3, #144	@ 0x90
 80004f0:	05db      	lsls	r3, r3, #23
 80004f2:	0011      	movs	r1, r2
 80004f4:	0018      	movs	r0, r3
 80004f6:	f001 febf 	bl	8002278 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO0_Pin GPIO1_Pin LED_G_Pin LED_Y_Pin
                           LED_R_Pin */
  GPIO_InitStruct.Pin = GPIO0_Pin|GPIO1_Pin|LED_G_Pin|LED_Y_Pin
 80004fa:	193b      	adds	r3, r7, r4
 80004fc:	22e3      	movs	r2, #227	@ 0xe3
 80004fe:	601a      	str	r2, [r3, #0]
                          |LED_R_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000500:	193b      	adds	r3, r7, r4
 8000502:	2201      	movs	r2, #1
 8000504:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000506:	193b      	adds	r3, r7, r4
 8000508:	2200      	movs	r2, #0
 800050a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800050c:	193b      	adds	r3, r7, r4
 800050e:	2200      	movs	r2, #0
 8000510:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000512:	193b      	adds	r3, r7, r4
 8000514:	4a0e      	ldr	r2, [pc, #56]	@ (8000550 <MX_GPIO_Init+0x100>)
 8000516:	0019      	movs	r1, r3
 8000518:	0010      	movs	r0, r2
 800051a:	f001 fead 	bl	8002278 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800051e:	0021      	movs	r1, r4
 8000520:	187b      	adds	r3, r7, r1
 8000522:	2210      	movs	r2, #16
 8000524:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000526:	187b      	adds	r3, r7, r1
 8000528:	2200      	movs	r2, #0
 800052a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052c:	187b      	adds	r3, r7, r1
 800052e:	2200      	movs	r2, #0
 8000530:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000532:	187b      	adds	r3, r7, r1
 8000534:	4a06      	ldr	r2, [pc, #24]	@ (8000550 <MX_GPIO_Init+0x100>)
 8000536:	0019      	movs	r1, r3
 8000538:	0010      	movs	r0, r2
 800053a:	f001 fe9d 	bl	8002278 <HAL_GPIO_Init>

}
 800053e:	46c0      	nop			@ (mov r8, r8)
 8000540:	46bd      	mov	sp, r7
 8000542:	b009      	add	sp, #36	@ 0x24
 8000544:	bd90      	pop	{r4, r7, pc}
 8000546:	46c0      	nop			@ (mov r8, r8)
 8000548:	40021000 	.word	0x40021000
 800054c:	00008110 	.word	0x00008110
 8000550:	48000400 	.word	0x48000400

08000554 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000558:	4b1b      	ldr	r3, [pc, #108]	@ (80005c8 <MX_I2C1_Init+0x74>)
 800055a:	4a1c      	ldr	r2, [pc, #112]	@ (80005cc <MX_I2C1_Init+0x78>)
 800055c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 800055e:	4b1a      	ldr	r3, [pc, #104]	@ (80005c8 <MX_I2C1_Init+0x74>)
 8000560:	4a1b      	ldr	r2, [pc, #108]	@ (80005d0 <MX_I2C1_Init+0x7c>)
 8000562:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000564:	4b18      	ldr	r3, [pc, #96]	@ (80005c8 <MX_I2C1_Init+0x74>)
 8000566:	2200      	movs	r2, #0
 8000568:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800056a:	4b17      	ldr	r3, [pc, #92]	@ (80005c8 <MX_I2C1_Init+0x74>)
 800056c:	2201      	movs	r2, #1
 800056e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000570:	4b15      	ldr	r3, [pc, #84]	@ (80005c8 <MX_I2C1_Init+0x74>)
 8000572:	2200      	movs	r2, #0
 8000574:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000576:	4b14      	ldr	r3, [pc, #80]	@ (80005c8 <MX_I2C1_Init+0x74>)
 8000578:	2200      	movs	r2, #0
 800057a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800057c:	4b12      	ldr	r3, [pc, #72]	@ (80005c8 <MX_I2C1_Init+0x74>)
 800057e:	2200      	movs	r2, #0
 8000580:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000582:	4b11      	ldr	r3, [pc, #68]	@ (80005c8 <MX_I2C1_Init+0x74>)
 8000584:	2200      	movs	r2, #0
 8000586:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000588:	4b0f      	ldr	r3, [pc, #60]	@ (80005c8 <MX_I2C1_Init+0x74>)
 800058a:	2200      	movs	r2, #0
 800058c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800058e:	4b0e      	ldr	r3, [pc, #56]	@ (80005c8 <MX_I2C1_Init+0x74>)
 8000590:	0018      	movs	r0, r3
 8000592:	f002 f811 	bl	80025b8 <HAL_I2C_Init>
 8000596:	1e03      	subs	r3, r0, #0
 8000598:	d001      	beq.n	800059e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800059a:	f000 fa6b 	bl	8000a74 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800059e:	4b0a      	ldr	r3, [pc, #40]	@ (80005c8 <MX_I2C1_Init+0x74>)
 80005a0:	2100      	movs	r1, #0
 80005a2:	0018      	movs	r0, r3
 80005a4:	f002 f8ae 	bl	8002704 <HAL_I2CEx_ConfigAnalogFilter>
 80005a8:	1e03      	subs	r3, r0, #0
 80005aa:	d001      	beq.n	80005b0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80005ac:	f000 fa62 	bl	8000a74 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80005b0:	4b05      	ldr	r3, [pc, #20]	@ (80005c8 <MX_I2C1_Init+0x74>)
 80005b2:	2100      	movs	r1, #0
 80005b4:	0018      	movs	r0, r3
 80005b6:	f002 f8f1 	bl	800279c <HAL_I2CEx_ConfigDigitalFilter>
 80005ba:	1e03      	subs	r3, r0, #0
 80005bc:	d001      	beq.n	80005c2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80005be:	f000 fa59 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005c2:	46c0      	nop			@ (mov r8, r8)
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	20000104 	.word	0x20000104
 80005cc:	40005400 	.word	0x40005400
 80005d0:	00201d2b 	.word	0x00201d2b

080005d4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80005d4:	b590      	push	{r4, r7, lr}
 80005d6:	b08b      	sub	sp, #44	@ 0x2c
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005dc:	2414      	movs	r4, #20
 80005de:	193b      	adds	r3, r7, r4
 80005e0:	0018      	movs	r0, r3
 80005e2:	2314      	movs	r3, #20
 80005e4:	001a      	movs	r2, r3
 80005e6:	2100      	movs	r1, #0
 80005e8:	f005 fada 	bl	8005ba0 <memset>
  if(i2cHandle->Instance==I2C1)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a1c      	ldr	r2, [pc, #112]	@ (8000664 <HAL_I2C_MspInit+0x90>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d131      	bne.n	800065a <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80005f6:	4b1c      	ldr	r3, [pc, #112]	@ (8000668 <HAL_I2C_MspInit+0x94>)
 80005f8:	695a      	ldr	r2, [r3, #20]
 80005fa:	4b1b      	ldr	r3, [pc, #108]	@ (8000668 <HAL_I2C_MspInit+0x94>)
 80005fc:	2180      	movs	r1, #128	@ 0x80
 80005fe:	03c9      	lsls	r1, r1, #15
 8000600:	430a      	orrs	r2, r1
 8000602:	615a      	str	r2, [r3, #20]
 8000604:	4b18      	ldr	r3, [pc, #96]	@ (8000668 <HAL_I2C_MspInit+0x94>)
 8000606:	695a      	ldr	r2, [r3, #20]
 8000608:	2380      	movs	r3, #128	@ 0x80
 800060a:	03db      	lsls	r3, r3, #15
 800060c:	4013      	ands	r3, r2
 800060e:	613b      	str	r3, [r7, #16]
 8000610:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PF0-OSC_IN     ------> I2C1_SDA
    PF1-OSC_OUT     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000612:	0021      	movs	r1, r4
 8000614:	187b      	adds	r3, r7, r1
 8000616:	2203      	movs	r2, #3
 8000618:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800061a:	187b      	adds	r3, r7, r1
 800061c:	2212      	movs	r2, #18
 800061e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000620:	187b      	adds	r3, r7, r1
 8000622:	2200      	movs	r2, #0
 8000624:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000626:	187b      	adds	r3, r7, r1
 8000628:	2203      	movs	r2, #3
 800062a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800062c:	187b      	adds	r3, r7, r1
 800062e:	2201      	movs	r2, #1
 8000630:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000632:	187b      	adds	r3, r7, r1
 8000634:	4a0d      	ldr	r2, [pc, #52]	@ (800066c <HAL_I2C_MspInit+0x98>)
 8000636:	0019      	movs	r1, r3
 8000638:	0010      	movs	r0, r2
 800063a:	f001 fe1d 	bl	8002278 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800063e:	4b0a      	ldr	r3, [pc, #40]	@ (8000668 <HAL_I2C_MspInit+0x94>)
 8000640:	69da      	ldr	r2, [r3, #28]
 8000642:	4b09      	ldr	r3, [pc, #36]	@ (8000668 <HAL_I2C_MspInit+0x94>)
 8000644:	2180      	movs	r1, #128	@ 0x80
 8000646:	0389      	lsls	r1, r1, #14
 8000648:	430a      	orrs	r2, r1
 800064a:	61da      	str	r2, [r3, #28]
 800064c:	4b06      	ldr	r3, [pc, #24]	@ (8000668 <HAL_I2C_MspInit+0x94>)
 800064e:	69da      	ldr	r2, [r3, #28]
 8000650:	2380      	movs	r3, #128	@ 0x80
 8000652:	039b      	lsls	r3, r3, #14
 8000654:	4013      	ands	r3, r2
 8000656:	60fb      	str	r3, [r7, #12]
 8000658:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800065a:	46c0      	nop			@ (mov r8, r8)
 800065c:	46bd      	mov	sp, r7
 800065e:	b00b      	add	sp, #44	@ 0x2c
 8000660:	bd90      	pop	{r4, r7, pc}
 8000662:	46c0      	nop			@ (mov r8, r8)
 8000664:	40005400 	.word	0x40005400
 8000668:	40021000 	.word	0x40021000
 800066c:	48001400 	.word	0x48001400

08000670 <pwm_for_sin>:
extern ADC_HandleTypeDef hadc;
extern UART_HandleTypeDef huart1;
extern SPI_HandleTypeDef hspi1;
extern TIM_HandleTypeDef htim2;

void pwm_for_sin(){
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
	if (pwm_flag == true){
 8000674:	4b1a      	ldr	r3, [pc, #104]	@ (80006e0 <pwm_for_sin+0x70>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d017      	beq.n	80006ac <pwm_for_sin+0x3c>
		if (period_t2 < maxperiod){
 800067c:	4b19      	ldr	r3, [pc, #100]	@ (80006e4 <pwm_for_sin+0x74>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	2b63      	cmp	r3, #99	@ 0x63
 8000682:	d805      	bhi.n	8000690 <pwm_for_sin+0x20>
			period_t2 ++;
 8000684:	4b17      	ldr	r3, [pc, #92]	@ (80006e4 <pwm_for_sin+0x74>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	1c5a      	adds	r2, r3, #1
 800068a:	4b16      	ldr	r3, [pc, #88]	@ (80006e4 <pwm_for_sin+0x74>)
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	e007      	b.n	80006a0 <pwm_for_sin+0x30>
		}else{
			period_t2 --;
 8000690:	4b14      	ldr	r3, [pc, #80]	@ (80006e4 <pwm_for_sin+0x74>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	1e5a      	subs	r2, r3, #1
 8000696:	4b13      	ldr	r3, [pc, #76]	@ (80006e4 <pwm_for_sin+0x74>)
 8000698:	601a      	str	r2, [r3, #0]
			pwm_flag = false;
 800069a:	4b11      	ldr	r3, [pc, #68]	@ (80006e0 <pwm_for_sin+0x70>)
 800069c:	2200      	movs	r2, #0
 800069e:	701a      	strb	r2, [r3, #0]
		}
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, period_t2);
 80006a0:	4b11      	ldr	r3, [pc, #68]	@ (80006e8 <pwm_for_sin+0x78>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a0f      	ldr	r2, [pc, #60]	@ (80006e4 <pwm_for_sin+0x74>)
 80006a6:	6812      	ldr	r2, [r2, #0]
 80006a8:	639a      	str	r2, [r3, #56]	@ 0x38
		HAL_TIM_Base_Start_IT(&htim2);
		HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, value-1);
		led1_brightness = value;
	}*/
}
 80006aa:	e016      	b.n	80006da <pwm_for_sin+0x6a>
		if (period_t2 > minperiod){
 80006ac:	4b0d      	ldr	r3, [pc, #52]	@ (80006e4 <pwm_for_sin+0x74>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	2b01      	cmp	r3, #1
 80006b2:	d905      	bls.n	80006c0 <pwm_for_sin+0x50>
			period_t2 --;
 80006b4:	4b0b      	ldr	r3, [pc, #44]	@ (80006e4 <pwm_for_sin+0x74>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	1e5a      	subs	r2, r3, #1
 80006ba:	4b0a      	ldr	r3, [pc, #40]	@ (80006e4 <pwm_for_sin+0x74>)
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	e007      	b.n	80006d0 <pwm_for_sin+0x60>
			period_t2 ++;
 80006c0:	4b08      	ldr	r3, [pc, #32]	@ (80006e4 <pwm_for_sin+0x74>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	1c5a      	adds	r2, r3, #1
 80006c6:	4b07      	ldr	r3, [pc, #28]	@ (80006e4 <pwm_for_sin+0x74>)
 80006c8:	601a      	str	r2, [r3, #0]
			pwm_flag = true;
 80006ca:	4b05      	ldr	r3, [pc, #20]	@ (80006e0 <pwm_for_sin+0x70>)
 80006cc:	2201      	movs	r2, #1
 80006ce:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, period_t2);
 80006d0:	4b05      	ldr	r3, [pc, #20]	@ (80006e8 <pwm_for_sin+0x78>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a03      	ldr	r2, [pc, #12]	@ (80006e4 <pwm_for_sin+0x74>)
 80006d6:	6812      	ldr	r2, [r2, #0]
 80006d8:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80006da:	46c0      	nop			@ (mov r8, r8)
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	20000004 	.word	0x20000004
 80006e4:	20000000 	.word	0x20000000
 80006e8:	200001dc 	.word	0x200001dc

080006ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b09a      	sub	sp, #104	@ 0x68
 80006f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f2:	f000 fe79 	bl	80013e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f6:	f000 f841 	bl	800077c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006fa:	f7ff fea9 	bl	8000450 <MX_GPIO_Init>
  MX_DMA_Init();
 80006fe:	f7ff fe89 	bl	8000414 <MX_DMA_Init>
  MX_ADC_Init();
 8000702:	f7ff fd9f 	bl	8000244 <MX_ADC_Init>
  MX_I2C1_Init();
 8000706:	f7ff ff25 	bl	8000554 <MX_I2C1_Init>
  MX_SPI1_Init();
 800070a:	f000 f9b9 	bl	8000a80 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800070e:	f000 fd5d 	bl	80011cc <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8000712:	f000 fde1 	bl	80012d8 <MX_USB_PCD_Init>
  MX_TIM16_Init();
 8000716:	f000 fb7b 	bl	8000e10 <MX_TIM16_Init>
  MX_TIM2_Init();
 800071a:	f000 fb1b 	bl	8000d54 <MX_TIM2_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t command[100];
  uart_ble_init(&huart1);
 800071e:	4b12      	ldr	r3, [pc, #72]	@ (8000768 <main+0x7c>)
 8000720:	0018      	movs	r0, r3
 8000722:	f000 fc89 	bl	8001038 <uart_ble_init>
  uart_ble_transmit((uint8_t*)"status ok");
 8000726:	4b11      	ldr	r3, [pc, #68]	@ (800076c <main+0x80>)
 8000728:	0018      	movs	r0, r3
 800072a:	f000 fc9b 	bl	8001064 <uart_ble_transmit>
  analog_tsens_init(&hadc, ADC_CHANNEL_0);
 800072e:	4b10      	ldr	r3, [pc, #64]	@ (8000770 <main+0x84>)
 8000730:	2100      	movs	r1, #0
 8000732:	0018      	movs	r0, r3
 8000734:	f000 fc20 	bl	8000f78 <analog_tsens_init>
  HAL_TIM_Base_Start_IT(&htim16);
 8000738:	4b0e      	ldr	r3, [pc, #56]	@ (8000774 <main+0x88>)
 800073a:	0018      	movs	r0, r3
 800073c:	f003 f880 	bl	8003840 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8000740:	4b0d      	ldr	r3, [pc, #52]	@ (8000778 <main+0x8c>)
 8000742:	0018      	movs	r0, r3
 8000744:	f003 f87c 	bl	8003840 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_2);
 8000748:	4b0b      	ldr	r3, [pc, #44]	@ (8000778 <main+0x8c>)
 800074a:	2104      	movs	r1, #4
 800074c:	0018      	movs	r0, r3
 800074e:	f003 f913 	bl	8003978 <HAL_TIM_PWM_Start_IT>
  while (1)
  {
	  if (tsens_flag_analizer == 1){

	  }
	  if (uart_ble_pop_cmd(command) == true){
 8000752:	1d3b      	adds	r3, r7, #4
 8000754:	0018      	movs	r0, r3
 8000756:	f000 fcab 	bl	80010b0 <uart_ble_pop_cmd>
 800075a:	1e03      	subs	r3, r0, #0
 800075c:	d0f9      	beq.n	8000752 <main+0x66>
		  cmd_command_analizing(command);
 800075e:	1d3b      	adds	r3, r7, #4
 8000760:	0018      	movs	r0, r3
 8000762:	f000 f87f 	bl	8000864 <cmd_command_analizing>
	  if (tsens_flag_analizer == 1){
 8000766:	e7f4      	b.n	8000752 <main+0x66>
 8000768:	20000354 	.word	0x20000354
 800076c:	080064f8 	.word	0x080064f8
 8000770:	20000080 	.word	0x20000080
 8000774:	20000224 	.word	0x20000224
 8000778:	200001dc 	.word	0x200001dc

0800077c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800077c:	b590      	push	{r4, r7, lr}
 800077e:	b099      	sub	sp, #100	@ 0x64
 8000780:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000782:	242c      	movs	r4, #44	@ 0x2c
 8000784:	193b      	adds	r3, r7, r4
 8000786:	0018      	movs	r0, r3
 8000788:	2334      	movs	r3, #52	@ 0x34
 800078a:	001a      	movs	r2, r3
 800078c:	2100      	movs	r1, #0
 800078e:	f005 fa07 	bl	8005ba0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000792:	231c      	movs	r3, #28
 8000794:	18fb      	adds	r3, r7, r3
 8000796:	0018      	movs	r0, r3
 8000798:	2310      	movs	r3, #16
 800079a:	001a      	movs	r2, r3
 800079c:	2100      	movs	r1, #0
 800079e:	f005 f9ff 	bl	8005ba0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007a2:	1d3b      	adds	r3, r7, #4
 80007a4:	0018      	movs	r0, r3
 80007a6:	2318      	movs	r3, #24
 80007a8:	001a      	movs	r2, r3
 80007aa:	2100      	movs	r1, #0
 80007ac:	f005 f9f8 	bl	8005ba0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 80007b0:	0021      	movs	r1, r4
 80007b2:	187b      	adds	r3, r7, r1
 80007b4:	2232      	movs	r2, #50	@ 0x32
 80007b6:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007b8:	187b      	adds	r3, r7, r1
 80007ba:	2201      	movs	r2, #1
 80007bc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80007be:	187b      	adds	r3, r7, r1
 80007c0:	2201      	movs	r2, #1
 80007c2:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80007c4:	187b      	adds	r3, r7, r1
 80007c6:	2201      	movs	r2, #1
 80007c8:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007ca:	187b      	adds	r3, r7, r1
 80007cc:	2210      	movs	r2, #16
 80007ce:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80007d0:	187b      	adds	r3, r7, r1
 80007d2:	2210      	movs	r2, #16
 80007d4:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d6:	187b      	adds	r3, r7, r1
 80007d8:	2202      	movs	r2, #2
 80007da:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007dc:	187b      	adds	r3, r7, r1
 80007de:	2280      	movs	r2, #128	@ 0x80
 80007e0:	0212      	lsls	r2, r2, #8
 80007e2:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80007e4:	187b      	adds	r3, r7, r1
 80007e6:	2280      	movs	r2, #128	@ 0x80
 80007e8:	0352      	lsls	r2, r2, #13
 80007ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80007ec:	187b      	adds	r3, r7, r1
 80007ee:	2200      	movs	r2, #0
 80007f0:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f2:	187b      	adds	r3, r7, r1
 80007f4:	0018      	movs	r0, r3
 80007f6:	f002 f93b 	bl	8002a70 <HAL_RCC_OscConfig>
 80007fa:	1e03      	subs	r3, r0, #0
 80007fc:	d001      	beq.n	8000802 <SystemClock_Config+0x86>
  {
    Error_Handler();
 80007fe:	f000 f939 	bl	8000a74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000802:	211c      	movs	r1, #28
 8000804:	187b      	adds	r3, r7, r1
 8000806:	2207      	movs	r2, #7
 8000808:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800080a:	187b      	adds	r3, r7, r1
 800080c:	2202      	movs	r2, #2
 800080e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000810:	187b      	adds	r3, r7, r1
 8000812:	2200      	movs	r2, #0
 8000814:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000816:	187b      	adds	r3, r7, r1
 8000818:	22a0      	movs	r2, #160	@ 0xa0
 800081a:	00d2      	lsls	r2, r2, #3
 800081c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800081e:	187b      	adds	r3, r7, r1
 8000820:	2101      	movs	r1, #1
 8000822:	0018      	movs	r0, r3
 8000824:	f002 fcaa 	bl	800317c <HAL_RCC_ClockConfig>
 8000828:	1e03      	subs	r3, r0, #0
 800082a:	d001      	beq.n	8000830 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800082c:	f000 f922 	bl	8000a74 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 8000830:	1d3b      	adds	r3, r7, #4
 8000832:	4a0b      	ldr	r2, [pc, #44]	@ (8000860 <SystemClock_Config+0xe4>)
 8000834:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000836:	1d3b      	adds	r3, r7, #4
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800083c:	1d3b      	adds	r3, r7, #4
 800083e:	2200      	movs	r2, #0
 8000840:	60da      	str	r2, [r3, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000842:	1d3b      	adds	r3, r7, #4
 8000844:	2200      	movs	r2, #0
 8000846:	615a      	str	r2, [r3, #20]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000848:	1d3b      	adds	r3, r7, #4
 800084a:	0018      	movs	r0, r3
 800084c:	f002 fe02 	bl	8003454 <HAL_RCCEx_PeriphCLKConfig>
 8000850:	1e03      	subs	r3, r0, #0
 8000852:	d001      	beq.n	8000858 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000854:	f000 f90e 	bl	8000a74 <Error_Handler>
  }
}
 8000858:	46c0      	nop			@ (mov r8, r8)
 800085a:	46bd      	mov	sp, r7
 800085c:	b019      	add	sp, #100	@ 0x64
 800085e:	bd90      	pop	{r4, r7, pc}
 8000860:	00020021 	.word	0x00020021

08000864 <cmd_command_analizing>:

/* USER CODE BEGIN 4 */

bool cmd_command_analizing(uint8_t *cmd){
 8000864:	b590      	push	{r4, r7, lr}
 8000866:	b085      	sub	sp, #20
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
	if (strncmp((char*)cmd, (char*)"redLED : on", strlen((char*)cmd)) == 0){
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	0018      	movs	r0, r3
 8000870:	f7ff fc4a 	bl	8000108 <strlen>
 8000874:	0002      	movs	r2, r0
 8000876:	4970      	ldr	r1, [pc, #448]	@ (8000a38 <cmd_command_analizing+0x1d4>)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	0018      	movs	r0, r3
 800087c:	f005 f998 	bl	8005bb0 <strncmp>
 8000880:	1e03      	subs	r3, r0, #0
 8000882:	d107      	bne.n	8000894 <cmd_command_analizing+0x30>
		HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_SET);
 8000884:	4b6d      	ldr	r3, [pc, #436]	@ (8000a3c <cmd_command_analizing+0x1d8>)
 8000886:	2201      	movs	r2, #1
 8000888:	2180      	movs	r1, #128	@ 0x80
 800088a:	0018      	movs	r0, r3
 800088c:	f001 fe5c 	bl	8002548 <HAL_GPIO_WritePin>
		return true;
 8000890:	2301      	movs	r3, #1
 8000892:	e0cd      	b.n	8000a30 <cmd_command_analizing+0x1cc>
	}else if (strncmp((char*)cmd, (char*)"greenLED : on", strlen((char*)cmd)) == 0){
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	0018      	movs	r0, r3
 8000898:	f7ff fc36 	bl	8000108 <strlen>
 800089c:	0002      	movs	r2, r0
 800089e:	4968      	ldr	r1, [pc, #416]	@ (8000a40 <cmd_command_analizing+0x1dc>)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	0018      	movs	r0, r3
 80008a4:	f005 f984 	bl	8005bb0 <strncmp>
 80008a8:	1e03      	subs	r3, r0, #0
 80008aa:	d107      	bne.n	80008bc <cmd_command_analizing+0x58>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
 80008ac:	4b63      	ldr	r3, [pc, #396]	@ (8000a3c <cmd_command_analizing+0x1d8>)
 80008ae:	2201      	movs	r2, #1
 80008b0:	2120      	movs	r1, #32
 80008b2:	0018      	movs	r0, r3
 80008b4:	f001 fe48 	bl	8002548 <HAL_GPIO_WritePin>
		return true;
 80008b8:	2301      	movs	r3, #1
 80008ba:	e0b9      	b.n	8000a30 <cmd_command_analizing+0x1cc>
	}else if (strncmp((char*)cmd, (char*)"yellowLED : on", strlen((char*)cmd)) == 0){
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	0018      	movs	r0, r3
 80008c0:	f7ff fc22 	bl	8000108 <strlen>
 80008c4:	0002      	movs	r2, r0
 80008c6:	495f      	ldr	r1, [pc, #380]	@ (8000a44 <cmd_command_analizing+0x1e0>)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	0018      	movs	r0, r3
 80008cc:	f005 f970 	bl	8005bb0 <strncmp>
 80008d0:	1e03      	subs	r3, r0, #0
 80008d2:	d107      	bne.n	80008e4 <cmd_command_analizing+0x80>
		HAL_GPIO_WritePin(LED_Y_GPIO_Port, LED_Y_Pin, GPIO_PIN_SET);
 80008d4:	4b59      	ldr	r3, [pc, #356]	@ (8000a3c <cmd_command_analizing+0x1d8>)
 80008d6:	2201      	movs	r2, #1
 80008d8:	2140      	movs	r1, #64	@ 0x40
 80008da:	0018      	movs	r0, r3
 80008dc:	f001 fe34 	bl	8002548 <HAL_GPIO_WritePin>
		return true;
 80008e0:	2301      	movs	r3, #1
 80008e2:	e0a5      	b.n	8000a30 <cmd_command_analizing+0x1cc>
	}else if (strncmp((char*)cmd, (char*)"redLED : off", strlen((char*)cmd)) == 0){
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	0018      	movs	r0, r3
 80008e8:	f7ff fc0e 	bl	8000108 <strlen>
 80008ec:	0002      	movs	r2, r0
 80008ee:	4956      	ldr	r1, [pc, #344]	@ (8000a48 <cmd_command_analizing+0x1e4>)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	0018      	movs	r0, r3
 80008f4:	f005 f95c 	bl	8005bb0 <strncmp>
 80008f8:	1e03      	subs	r3, r0, #0
 80008fa:	d107      	bne.n	800090c <cmd_command_analizing+0xa8>
		HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 80008fc:	4b4f      	ldr	r3, [pc, #316]	@ (8000a3c <cmd_command_analizing+0x1d8>)
 80008fe:	2200      	movs	r2, #0
 8000900:	2180      	movs	r1, #128	@ 0x80
 8000902:	0018      	movs	r0, r3
 8000904:	f001 fe20 	bl	8002548 <HAL_GPIO_WritePin>
		return true;
 8000908:	2301      	movs	r3, #1
 800090a:	e091      	b.n	8000a30 <cmd_command_analizing+0x1cc>
	}else if (strncmp((char*)cmd, (char*)"greenLED : off", strlen((char*)cmd)) == 0){
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	0018      	movs	r0, r3
 8000910:	f7ff fbfa 	bl	8000108 <strlen>
 8000914:	0002      	movs	r2, r0
 8000916:	494d      	ldr	r1, [pc, #308]	@ (8000a4c <cmd_command_analizing+0x1e8>)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	0018      	movs	r0, r3
 800091c:	f005 f948 	bl	8005bb0 <strncmp>
 8000920:	1e03      	subs	r3, r0, #0
 8000922:	d107      	bne.n	8000934 <cmd_command_analizing+0xd0>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 8000924:	4b45      	ldr	r3, [pc, #276]	@ (8000a3c <cmd_command_analizing+0x1d8>)
 8000926:	2200      	movs	r2, #0
 8000928:	2120      	movs	r1, #32
 800092a:	0018      	movs	r0, r3
 800092c:	f001 fe0c 	bl	8002548 <HAL_GPIO_WritePin>
		return true;
 8000930:	2301      	movs	r3, #1
 8000932:	e07d      	b.n	8000a30 <cmd_command_analizing+0x1cc>
	}else if (strncmp((char*)cmd, (char*)"yellowLED : off", strlen((char*)cmd)) == 0){
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	0018      	movs	r0, r3
 8000938:	f7ff fbe6 	bl	8000108 <strlen>
 800093c:	0002      	movs	r2, r0
 800093e:	4944      	ldr	r1, [pc, #272]	@ (8000a50 <cmd_command_analizing+0x1ec>)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	0018      	movs	r0, r3
 8000944:	f005 f934 	bl	8005bb0 <strncmp>
 8000948:	1e03      	subs	r3, r0, #0
 800094a:	d107      	bne.n	800095c <cmd_command_analizing+0xf8>
		HAL_GPIO_WritePin(LED_Y_GPIO_Port, LED_Y_Pin, GPIO_PIN_RESET);
 800094c:	4b3b      	ldr	r3, [pc, #236]	@ (8000a3c <cmd_command_analizing+0x1d8>)
 800094e:	2200      	movs	r2, #0
 8000950:	2140      	movs	r1, #64	@ 0x40
 8000952:	0018      	movs	r0, r3
 8000954:	f001 fdf8 	bl	8002548 <HAL_GPIO_WritePin>
		return true;
 8000958:	2301      	movs	r3, #1
 800095a:	e069      	b.n	8000a30 <cmd_command_analizing+0x1cc>
	}else if (strncmp((char*)cmd, (char*)"LEDs toggled", strlen((char*)cmd)) == 0){
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	0018      	movs	r0, r3
 8000960:	f7ff fbd2 	bl	8000108 <strlen>
 8000964:	0002      	movs	r2, r0
 8000966:	493b      	ldr	r1, [pc, #236]	@ (8000a54 <cmd_command_analizing+0x1f0>)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	0018      	movs	r0, r3
 800096c:	f005 f920 	bl	8005bb0 <strncmp>
 8000970:	1e03      	subs	r3, r0, #0
 8000972:	d110      	bne.n	8000996 <cmd_command_analizing+0x132>
		HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 8000974:	4b31      	ldr	r3, [pc, #196]	@ (8000a3c <cmd_command_analizing+0x1d8>)
 8000976:	2180      	movs	r1, #128	@ 0x80
 8000978:	0018      	movs	r0, r3
 800097a:	f001 fe02 	bl	8002582 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
 800097e:	4b2f      	ldr	r3, [pc, #188]	@ (8000a3c <cmd_command_analizing+0x1d8>)
 8000980:	2120      	movs	r1, #32
 8000982:	0018      	movs	r0, r3
 8000984:	f001 fdfd 	bl	8002582 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED_Y_GPIO_Port, LED_Y_Pin);
 8000988:	4b2c      	ldr	r3, [pc, #176]	@ (8000a3c <cmd_command_analizing+0x1d8>)
 800098a:	2140      	movs	r1, #64	@ 0x40
 800098c:	0018      	movs	r0, r3
 800098e:	f001 fdf8 	bl	8002582 <HAL_GPIO_TogglePin>
		return true;
 8000992:	2301      	movs	r3, #1
 8000994:	e04c      	b.n	8000a30 <cmd_command_analizing+0x1cc>
	}else if (strncmp((char*)cmd, (char*)"AnalogSensor Temp value =", strlen((char*)cmd)) == 0){
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	0018      	movs	r0, r3
 800099a:	f7ff fbb5 	bl	8000108 <strlen>
 800099e:	0002      	movs	r2, r0
 80009a0:	492d      	ldr	r1, [pc, #180]	@ (8000a58 <cmd_command_analizing+0x1f4>)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	0018      	movs	r0, r3
 80009a6:	f005 f903 	bl	8005bb0 <strncmp>
 80009aa:	1e03      	subs	r3, r0, #0
 80009ac:	d11b      	bne.n	80009e6 <cmd_command_analizing+0x182>
		uint32_t temp = get_analog_tsens();
 80009ae:	f000 fb0f 	bl	8000fd0 <get_analog_tsens>
 80009b2:	0003      	movs	r3, r0
 80009b4:	60fb      	str	r3, [r7, #12]
		sprintf((char*)&msgbuffer, "T: %u,%u °C\n", (unsigned int)(temp/100), (unsigned int)(temp%100));
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	2164      	movs	r1, #100	@ 0x64
 80009ba:	0018      	movs	r0, r3
 80009bc:	f7ff fbb6 	bl	800012c <__udivsi3>
 80009c0:	0003      	movs	r3, r0
 80009c2:	001c      	movs	r4, r3
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	2164      	movs	r1, #100	@ 0x64
 80009c8:	0018      	movs	r0, r3
 80009ca:	f7ff fc35 	bl	8000238 <__aeabi_uidivmod>
 80009ce:	000b      	movs	r3, r1
 80009d0:	4922      	ldr	r1, [pc, #136]	@ (8000a5c <cmd_command_analizing+0x1f8>)
 80009d2:	4823      	ldr	r0, [pc, #140]	@ (8000a60 <cmd_command_analizing+0x1fc>)
 80009d4:	0022      	movs	r2, r4
 80009d6:	f005 f8c1 	bl	8005b5c <siprintf>

		//sprintf((char*)&msgbuffer, "T: %u,%u °C\n", (unsigned int)(temp/100), (unsigned int)(temp%100));
		uart_ble_transmit((uint8_t*)msgbuffer);
 80009da:	4b21      	ldr	r3, [pc, #132]	@ (8000a60 <cmd_command_analizing+0x1fc>)
 80009dc:	0018      	movs	r0, r3
 80009de:	f000 fb41 	bl	8001064 <uart_ble_transmit>
		uart_ble_transmit((uint8_t*)"tbd ok");
		return true;
	}else {
		return false;
	}
	return false;
 80009e2:	2300      	movs	r3, #0
 80009e4:	e024      	b.n	8000a30 <cmd_command_analizing+0x1cc>
	}else if (strncmp((char*)cmd, (char*)"DigitalSensor Temp value =", strlen((char*)cmd)) == 0){
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	0018      	movs	r0, r3
 80009ea:	f7ff fb8d 	bl	8000108 <strlen>
 80009ee:	0002      	movs	r2, r0
 80009f0:	491c      	ldr	r1, [pc, #112]	@ (8000a64 <cmd_command_analizing+0x200>)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	0018      	movs	r0, r3
 80009f6:	f005 f8db 	bl	8005bb0 <strncmp>
 80009fa:	1e03      	subs	r3, r0, #0
 80009fc:	d105      	bne.n	8000a0a <cmd_command_analizing+0x1a6>
		uart_ble_transmit((uint8_t*)"digital ok");
 80009fe:	4b1a      	ldr	r3, [pc, #104]	@ (8000a68 <cmd_command_analizing+0x204>)
 8000a00:	0018      	movs	r0, r3
 8000a02:	f000 fb2f 	bl	8001064 <uart_ble_transmit>
		return true;
 8000a06:	2301      	movs	r3, #1
 8000a08:	e012      	b.n	8000a30 <cmd_command_analizing+0x1cc>
	}else if (strncmp((char*)cmd, (char*)"TBD =", strlen((char*)cmd)) == 0){
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	f7ff fb7b 	bl	8000108 <strlen>
 8000a12:	0002      	movs	r2, r0
 8000a14:	4915      	ldr	r1, [pc, #84]	@ (8000a6c <cmd_command_analizing+0x208>)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	0018      	movs	r0, r3
 8000a1a:	f005 f8c9 	bl	8005bb0 <strncmp>
 8000a1e:	1e03      	subs	r3, r0, #0
 8000a20:	d105      	bne.n	8000a2e <cmd_command_analizing+0x1ca>
		uart_ble_transmit((uint8_t*)"tbd ok");
 8000a22:	4b13      	ldr	r3, [pc, #76]	@ (8000a70 <cmd_command_analizing+0x20c>)
 8000a24:	0018      	movs	r0, r3
 8000a26:	f000 fb1d 	bl	8001064 <uart_ble_transmit>
		return true;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	e000      	b.n	8000a30 <cmd_command_analizing+0x1cc>
		return false;
 8000a2e:	2300      	movs	r3, #0
}
 8000a30:	0018      	movs	r0, r3
 8000a32:	46bd      	mov	sp, r7
 8000a34:	b005      	add	sp, #20
 8000a36:	bd90      	pop	{r4, r7, pc}
 8000a38:	08006504 	.word	0x08006504
 8000a3c:	48000400 	.word	0x48000400
 8000a40:	08006510 	.word	0x08006510
 8000a44:	08006520 	.word	0x08006520
 8000a48:	08006530 	.word	0x08006530
 8000a4c:	08006540 	.word	0x08006540
 8000a50:	08006550 	.word	0x08006550
 8000a54:	08006560 	.word	0x08006560
 8000a58:	08006570 	.word	0x08006570
 8000a5c:	0800658c 	.word	0x0800658c
 8000a60:	20000158 	.word	0x20000158
 8000a64:	0800659c 	.word	0x0800659c
 8000a68:	080065b8 	.word	0x080065b8
 8000a6c:	080065c4 	.word	0x080065c4
 8000a70:	080065cc 	.word	0x080065cc

08000a74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a78:	b672      	cpsid	i
}
 8000a7a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a7c:	46c0      	nop			@ (mov r8, r8)
 8000a7e:	e7fd      	b.n	8000a7c <Error_Handler+0x8>

08000a80 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000a84:	4b1b      	ldr	r3, [pc, #108]	@ (8000af4 <MX_SPI1_Init+0x74>)
 8000a86:	4a1c      	ldr	r2, [pc, #112]	@ (8000af8 <MX_SPI1_Init+0x78>)
 8000a88:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a8a:	4b1a      	ldr	r3, [pc, #104]	@ (8000af4 <MX_SPI1_Init+0x74>)
 8000a8c:	2282      	movs	r2, #130	@ 0x82
 8000a8e:	0052      	lsls	r2, r2, #1
 8000a90:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a92:	4b18      	ldr	r3, [pc, #96]	@ (8000af4 <MX_SPI1_Init+0x74>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a98:	4b16      	ldr	r3, [pc, #88]	@ (8000af4 <MX_SPI1_Init+0x74>)
 8000a9a:	22e0      	movs	r2, #224	@ 0xe0
 8000a9c:	00d2      	lsls	r2, r2, #3
 8000a9e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000aa0:	4b14      	ldr	r3, [pc, #80]	@ (8000af4 <MX_SPI1_Init+0x74>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000aa6:	4b13      	ldr	r3, [pc, #76]	@ (8000af4 <MX_SPI1_Init+0x74>)
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000aac:	4b11      	ldr	r3, [pc, #68]	@ (8000af4 <MX_SPI1_Init+0x74>)
 8000aae:	2280      	movs	r2, #128	@ 0x80
 8000ab0:	0092      	lsls	r2, r2, #2
 8000ab2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ab4:	4b0f      	ldr	r3, [pc, #60]	@ (8000af4 <MX_SPI1_Init+0x74>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000aba:	4b0e      	ldr	r3, [pc, #56]	@ (8000af4 <MX_SPI1_Init+0x74>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	@ (8000af4 <MX_SPI1_Init+0x74>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ac6:	4b0b      	ldr	r3, [pc, #44]	@ (8000af4 <MX_SPI1_Init+0x74>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000acc:	4b09      	ldr	r3, [pc, #36]	@ (8000af4 <MX_SPI1_Init+0x74>)
 8000ace:	2207      	movs	r2, #7
 8000ad0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ad2:	4b08      	ldr	r3, [pc, #32]	@ (8000af4 <MX_SPI1_Init+0x74>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000ad8:	4b06      	ldr	r3, [pc, #24]	@ (8000af4 <MX_SPI1_Init+0x74>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ade:	4b05      	ldr	r3, [pc, #20]	@ (8000af4 <MX_SPI1_Init+0x74>)
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	f002 fda5 	bl	8003630 <HAL_SPI_Init>
 8000ae6:	1e03      	subs	r3, r0, #0
 8000ae8:	d001      	beq.n	8000aee <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000aea:	f7ff ffc3 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000aee:	46c0      	nop			@ (mov r8, r8)
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20000174 	.word	0x20000174
 8000af8:	40013000 	.word	0x40013000

08000afc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000afc:	b590      	push	{r4, r7, lr}
 8000afe:	b08b      	sub	sp, #44	@ 0x2c
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b04:	2414      	movs	r4, #20
 8000b06:	193b      	adds	r3, r7, r4
 8000b08:	0018      	movs	r0, r3
 8000b0a:	2314      	movs	r3, #20
 8000b0c:	001a      	movs	r2, r3
 8000b0e:	2100      	movs	r1, #0
 8000b10:	f005 f846 	bl	8005ba0 <memset>
  if(spiHandle->Instance==SPI1)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a1c      	ldr	r2, [pc, #112]	@ (8000b8c <HAL_SPI_MspInit+0x90>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d132      	bne.n	8000b84 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b1e:	4b1c      	ldr	r3, [pc, #112]	@ (8000b90 <HAL_SPI_MspInit+0x94>)
 8000b20:	699a      	ldr	r2, [r3, #24]
 8000b22:	4b1b      	ldr	r3, [pc, #108]	@ (8000b90 <HAL_SPI_MspInit+0x94>)
 8000b24:	2180      	movs	r1, #128	@ 0x80
 8000b26:	0149      	lsls	r1, r1, #5
 8000b28:	430a      	orrs	r2, r1
 8000b2a:	619a      	str	r2, [r3, #24]
 8000b2c:	4b18      	ldr	r3, [pc, #96]	@ (8000b90 <HAL_SPI_MspInit+0x94>)
 8000b2e:	699a      	ldr	r2, [r3, #24]
 8000b30:	2380      	movs	r3, #128	@ 0x80
 8000b32:	015b      	lsls	r3, r3, #5
 8000b34:	4013      	ands	r3, r2
 8000b36:	613b      	str	r3, [r7, #16]
 8000b38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3a:	4b15      	ldr	r3, [pc, #84]	@ (8000b90 <HAL_SPI_MspInit+0x94>)
 8000b3c:	695a      	ldr	r2, [r3, #20]
 8000b3e:	4b14      	ldr	r3, [pc, #80]	@ (8000b90 <HAL_SPI_MspInit+0x94>)
 8000b40:	2180      	movs	r1, #128	@ 0x80
 8000b42:	0289      	lsls	r1, r1, #10
 8000b44:	430a      	orrs	r2, r1
 8000b46:	615a      	str	r2, [r3, #20]
 8000b48:	4b11      	ldr	r3, [pc, #68]	@ (8000b90 <HAL_SPI_MspInit+0x94>)
 8000b4a:	695a      	ldr	r2, [r3, #20]
 8000b4c:	2380      	movs	r3, #128	@ 0x80
 8000b4e:	029b      	lsls	r3, r3, #10
 8000b50:	4013      	ands	r3, r2
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000b56:	0021      	movs	r1, r4
 8000b58:	187b      	adds	r3, r7, r1
 8000b5a:	22e0      	movs	r2, #224	@ 0xe0
 8000b5c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5e:	187b      	adds	r3, r7, r1
 8000b60:	2202      	movs	r2, #2
 8000b62:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	187b      	adds	r3, r7, r1
 8000b66:	2200      	movs	r2, #0
 8000b68:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b6a:	187b      	adds	r3, r7, r1
 8000b6c:	2203      	movs	r2, #3
 8000b6e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000b70:	187b      	adds	r3, r7, r1
 8000b72:	2200      	movs	r2, #0
 8000b74:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b76:	187a      	adds	r2, r7, r1
 8000b78:	2390      	movs	r3, #144	@ 0x90
 8000b7a:	05db      	lsls	r3, r3, #23
 8000b7c:	0011      	movs	r1, r2
 8000b7e:	0018      	movs	r0, r3
 8000b80:	f001 fb7a 	bl	8002278 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000b84:	46c0      	nop			@ (mov r8, r8)
 8000b86:	46bd      	mov	sp, r7
 8000b88:	b00b      	add	sp, #44	@ 0x2c
 8000b8a:	bd90      	pop	{r4, r7, pc}
 8000b8c:	40013000 	.word	0x40013000
 8000b90:	40021000 	.word	0x40021000

08000b94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b9a:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd8 <HAL_MspInit+0x44>)
 8000b9c:	699a      	ldr	r2, [r3, #24]
 8000b9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd8 <HAL_MspInit+0x44>)
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	430a      	orrs	r2, r1
 8000ba4:	619a      	str	r2, [r3, #24]
 8000ba6:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd8 <HAL_MspInit+0x44>)
 8000ba8:	699b      	ldr	r3, [r3, #24]
 8000baa:	2201      	movs	r2, #1
 8000bac:	4013      	ands	r3, r2
 8000bae:	607b      	str	r3, [r7, #4]
 8000bb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb2:	4b09      	ldr	r3, [pc, #36]	@ (8000bd8 <HAL_MspInit+0x44>)
 8000bb4:	69da      	ldr	r2, [r3, #28]
 8000bb6:	4b08      	ldr	r3, [pc, #32]	@ (8000bd8 <HAL_MspInit+0x44>)
 8000bb8:	2180      	movs	r1, #128	@ 0x80
 8000bba:	0549      	lsls	r1, r1, #21
 8000bbc:	430a      	orrs	r2, r1
 8000bbe:	61da      	str	r2, [r3, #28]
 8000bc0:	4b05      	ldr	r3, [pc, #20]	@ (8000bd8 <HAL_MspInit+0x44>)
 8000bc2:	69da      	ldr	r2, [r3, #28]
 8000bc4:	2380      	movs	r3, #128	@ 0x80
 8000bc6:	055b      	lsls	r3, r3, #21
 8000bc8:	4013      	ands	r3, r2
 8000bca:	603b      	str	r3, [r7, #0]
 8000bcc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bce:	46c0      	nop			@ (mov r8, r8)
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	b002      	add	sp, #8
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	46c0      	nop			@ (mov r8, r8)
 8000bd8:	40021000 	.word	0x40021000

08000bdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000be0:	46c0      	nop			@ (mov r8, r8)
 8000be2:	e7fd      	b.n	8000be0 <NMI_Handler+0x4>

08000be4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000be8:	46c0      	nop			@ (mov r8, r8)
 8000bea:	e7fd      	b.n	8000be8 <HardFault_Handler+0x4>

08000bec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000bf0:	46c0      	nop			@ (mov r8, r8)
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bfa:	46c0      	nop			@ (mov r8, r8)
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c04:	f000 fc38 	bl	8001478 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c08:	46c0      	nop			@ (mov r8, r8)
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
	...

08000c10 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8000c14:	4b03      	ldr	r3, [pc, #12]	@ (8000c24 <DMA1_Channel1_IRQHandler+0x14>)
 8000c16:	0018      	movs	r0, r3
 8000c18:	f001 fa43 	bl	80020a2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000c1c:	46c0      	nop			@ (mov r8, r8)
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	46c0      	nop			@ (mov r8, r8)
 8000c24:	200000c0 	.word	0x200000c0

08000c28 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c2c:	4b03      	ldr	r3, [pc, #12]	@ (8000c3c <TIM2_IRQHandler+0x14>)
 8000c2e:	0018      	movs	r0, r3
 8000c30:	f002 ff96 	bl	8003b60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c34:	46c0      	nop			@ (mov r8, r8)
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	46c0      	nop			@ (mov r8, r8)
 8000c3c:	200001dc 	.word	0x200001dc

08000c40 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000c44:	4b03      	ldr	r3, [pc, #12]	@ (8000c54 <TIM16_IRQHandler+0x14>)
 8000c46:	0018      	movs	r0, r3
 8000c48:	f002 ff8a 	bl	8003b60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8000c4c:	46c0      	nop			@ (mov r8, r8)
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	46c0      	nop			@ (mov r8, r8)
 8000c54:	20000224 	.word	0x20000224

08000c58 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c5c:	4b03      	ldr	r3, [pc, #12]	@ (8000c6c <USART1_IRQHandler+0x14>)
 8000c5e:	0018      	movs	r0, r3
 8000c60:	f003 fd5e 	bl	8004720 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c64:	46c0      	nop			@ (mov r8, r8)
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	46c0      	nop			@ (mov r8, r8)
 8000c6c:	20000354 	.word	0x20000354

08000c70 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 1 */

/* uart Cplt Callback */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
	uart_ble_RxCpltCallback(huart);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	f000 fa3a 	bl	80010f4 <uart_ble_RxCpltCallback>
}
 8000c80:	46c0      	nop			@ (mov r8, r8)
 8000c82:	46bd      	mov	sp, r7
 8000c84:	b002      	add	sp, #8
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
	uart_ble_TxCpltCallback(huart);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	0018      	movs	r0, r3
 8000c94:	f000 fa84 	bl	80011a0 <uart_ble_TxCpltCallback>
}
 8000c98:	46c0      	nop			@ (mov r8, r8)
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	b002      	add	sp, #8
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM16)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a09      	ldr	r2, [pc, #36]	@ (8000cd4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d103      	bne.n	8000cba <HAL_TIM_PeriodElapsedCallback+0x1a>
    {
    	tsens_flag_analizer = true;
 8000cb2:	4b09      	ldr	r3, [pc, #36]	@ (8000cd8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	701a      	strb	r2, [r3, #0]
    }else if (htim->Instance == TIM2)
    {
    	pwm_for_sin();
    }
}
 8000cb8:	e007      	b.n	8000cca <HAL_TIM_PeriodElapsedCallback+0x2a>
    }else if (htim->Instance == TIM2)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	2380      	movs	r3, #128	@ 0x80
 8000cc0:	05db      	lsls	r3, r3, #23
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d101      	bne.n	8000cca <HAL_TIM_PeriodElapsedCallback+0x2a>
    	pwm_for_sin();
 8000cc6:	f7ff fcd3 	bl	8000670 <pwm_for_sin>
}
 8000cca:	46c0      	nop			@ (mov r8, r8)
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	b002      	add	sp, #8
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	46c0      	nop			@ (mov r8, r8)
 8000cd4:	40014400 	.word	0x40014400
 8000cd8:	20000280 	.word	0x20000280

08000cdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ce4:	4a14      	ldr	r2, [pc, #80]	@ (8000d38 <_sbrk+0x5c>)
 8000ce6:	4b15      	ldr	r3, [pc, #84]	@ (8000d3c <_sbrk+0x60>)
 8000ce8:	1ad3      	subs	r3, r2, r3
 8000cea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cf0:	4b13      	ldr	r3, [pc, #76]	@ (8000d40 <_sbrk+0x64>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d102      	bne.n	8000cfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cf8:	4b11      	ldr	r3, [pc, #68]	@ (8000d40 <_sbrk+0x64>)
 8000cfa:	4a12      	ldr	r2, [pc, #72]	@ (8000d44 <_sbrk+0x68>)
 8000cfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cfe:	4b10      	ldr	r3, [pc, #64]	@ (8000d40 <_sbrk+0x64>)
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	18d3      	adds	r3, r2, r3
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d207      	bcs.n	8000d1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d0c:	f004 ff76 	bl	8005bfc <__errno>
 8000d10:	0003      	movs	r3, r0
 8000d12:	220c      	movs	r2, #12
 8000d14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d16:	2301      	movs	r3, #1
 8000d18:	425b      	negs	r3, r3
 8000d1a:	e009      	b.n	8000d30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d1c:	4b08      	ldr	r3, [pc, #32]	@ (8000d40 <_sbrk+0x64>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d22:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <_sbrk+0x64>)
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	18d2      	adds	r2, r2, r3
 8000d2a:	4b05      	ldr	r3, [pc, #20]	@ (8000d40 <_sbrk+0x64>)
 8000d2c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000d2e:	68fb      	ldr	r3, [r7, #12]
}
 8000d30:	0018      	movs	r0, r3
 8000d32:	46bd      	mov	sp, r7
 8000d34:	b006      	add	sp, #24
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	20001800 	.word	0x20001800
 8000d3c:	00000400 	.word	0x00000400
 8000d40:	200001d8 	.word	0x200001d8
 8000d44:	20000808 	.word	0x20000808

08000d48 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000d4c:	46c0      	nop			@ (mov r8, r8)
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
	...

08000d54 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim16;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08a      	sub	sp, #40	@ 0x28
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d5a:	2320      	movs	r3, #32
 8000d5c:	18fb      	adds	r3, r7, r3
 8000d5e:	0018      	movs	r0, r3
 8000d60:	2308      	movs	r3, #8
 8000d62:	001a      	movs	r2, r3
 8000d64:	2100      	movs	r1, #0
 8000d66:	f004 ff1b 	bl	8005ba0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d6a:	1d3b      	adds	r3, r7, #4
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	231c      	movs	r3, #28
 8000d70:	001a      	movs	r2, r3
 8000d72:	2100      	movs	r1, #0
 8000d74:	f004 ff14 	bl	8005ba0 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d78:	4b24      	ldr	r3, [pc, #144]	@ (8000e0c <MX_TIM2_Init+0xb8>)
 8000d7a:	2280      	movs	r2, #128	@ 0x80
 8000d7c:	05d2      	lsls	r2, r2, #23
 8000d7e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 239;
 8000d80:	4b22      	ldr	r3, [pc, #136]	@ (8000e0c <MX_TIM2_Init+0xb8>)
 8000d82:	22ef      	movs	r2, #239	@ 0xef
 8000d84:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d86:	4b21      	ldr	r3, [pc, #132]	@ (8000e0c <MX_TIM2_Init+0xb8>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8000d8c:	4b1f      	ldr	r3, [pc, #124]	@ (8000e0c <MX_TIM2_Init+0xb8>)
 8000d8e:	2263      	movs	r2, #99	@ 0x63
 8000d90:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d92:	4b1e      	ldr	r3, [pc, #120]	@ (8000e0c <MX_TIM2_Init+0xb8>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d98:	4b1c      	ldr	r3, [pc, #112]	@ (8000e0c <MX_TIM2_Init+0xb8>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d9e:	4b1b      	ldr	r3, [pc, #108]	@ (8000e0c <MX_TIM2_Init+0xb8>)
 8000da0:	0018      	movs	r0, r3
 8000da2:	f002 fd99 	bl	80038d8 <HAL_TIM_PWM_Init>
 8000da6:	1e03      	subs	r3, r0, #0
 8000da8:	d001      	beq.n	8000dae <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000daa:	f7ff fe63 	bl	8000a74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dae:	2120      	movs	r1, #32
 8000db0:	187b      	adds	r3, r7, r1
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000db6:	187b      	adds	r3, r7, r1
 8000db8:	2200      	movs	r2, #0
 8000dba:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dbc:	187a      	adds	r2, r7, r1
 8000dbe:	4b13      	ldr	r3, [pc, #76]	@ (8000e0c <MX_TIM2_Init+0xb8>)
 8000dc0:	0011      	movs	r1, r2
 8000dc2:	0018      	movs	r0, r3
 8000dc4:	f003 fb28 	bl	8004418 <HAL_TIMEx_MasterConfigSynchronization>
 8000dc8:	1e03      	subs	r3, r0, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000dcc:	f7ff fe52 	bl	8000a74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dd0:	1d3b      	adds	r3, r7, #4
 8000dd2:	2260      	movs	r2, #96	@ 0x60
 8000dd4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 1;
 8000dd6:	1d3b      	adds	r3, r7, #4
 8000dd8:	2201      	movs	r2, #1
 8000dda:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ddc:	1d3b      	adds	r3, r7, #4
 8000dde:	2200      	movs	r2, #0
 8000de0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000de2:	1d3b      	adds	r3, r7, #4
 8000de4:	2200      	movs	r2, #0
 8000de6:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000de8:	1d39      	adds	r1, r7, #4
 8000dea:	4b08      	ldr	r3, [pc, #32]	@ (8000e0c <MX_TIM2_Init+0xb8>)
 8000dec:	2204      	movs	r2, #4
 8000dee:	0018      	movs	r0, r3
 8000df0:	f002 ffa4 	bl	8003d3c <HAL_TIM_PWM_ConfigChannel>
 8000df4:	1e03      	subs	r3, r0, #0
 8000df6:	d001      	beq.n	8000dfc <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8000df8:	f7ff fe3c 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000dfc:	4b03      	ldr	r3, [pc, #12]	@ (8000e0c <MX_TIM2_Init+0xb8>)
 8000dfe:	0018      	movs	r0, r3
 8000e00:	f000 f87c 	bl	8000efc <HAL_TIM_MspPostInit>

}
 8000e04:	46c0      	nop			@ (mov r8, r8)
 8000e06:	46bd      	mov	sp, r7
 8000e08:	b00a      	add	sp, #40	@ 0x28
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	200001dc 	.word	0x200001dc

08000e10 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000e14:	4b0f      	ldr	r3, [pc, #60]	@ (8000e54 <MX_TIM16_Init+0x44>)
 8000e16:	4a10      	ldr	r2, [pc, #64]	@ (8000e58 <MX_TIM16_Init+0x48>)
 8000e18:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 999;
 8000e1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e54 <MX_TIM16_Init+0x44>)
 8000e1c:	4a0f      	ldr	r2, [pc, #60]	@ (8000e5c <MX_TIM16_Init+0x4c>)
 8000e1e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e20:	4b0c      	ldr	r3, [pc, #48]	@ (8000e54 <MX_TIM16_Init+0x44>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 23999;
 8000e26:	4b0b      	ldr	r3, [pc, #44]	@ (8000e54 <MX_TIM16_Init+0x44>)
 8000e28:	4a0d      	ldr	r2, [pc, #52]	@ (8000e60 <MX_TIM16_Init+0x50>)
 8000e2a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e2c:	4b09      	ldr	r3, [pc, #36]	@ (8000e54 <MX_TIM16_Init+0x44>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000e32:	4b08      	ldr	r3, [pc, #32]	@ (8000e54 <MX_TIM16_Init+0x44>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e38:	4b06      	ldr	r3, [pc, #24]	@ (8000e54 <MX_TIM16_Init+0x44>)
 8000e3a:	2280      	movs	r2, #128	@ 0x80
 8000e3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000e3e:	4b05      	ldr	r3, [pc, #20]	@ (8000e54 <MX_TIM16_Init+0x44>)
 8000e40:	0018      	movs	r0, r3
 8000e42:	f002 fcad 	bl	80037a0 <HAL_TIM_Base_Init>
 8000e46:	1e03      	subs	r3, r0, #0
 8000e48:	d001      	beq.n	8000e4e <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8000e4a:	f7ff fe13 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000e4e:	46c0      	nop			@ (mov r8, r8)
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	20000224 	.word	0x20000224
 8000e58:	40014400 	.word	0x40014400
 8000e5c:	000003e7 	.word	0x000003e7
 8000e60:	00005dbf 	.word	0x00005dbf

08000e64 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	2380      	movs	r3, #128	@ 0x80
 8000e72:	05db      	lsls	r3, r3, #23
 8000e74:	429a      	cmp	r2, r3
 8000e76:	d113      	bne.n	8000ea0 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e78:	4b0b      	ldr	r3, [pc, #44]	@ (8000ea8 <HAL_TIM_PWM_MspInit+0x44>)
 8000e7a:	69da      	ldr	r2, [r3, #28]
 8000e7c:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea8 <HAL_TIM_PWM_MspInit+0x44>)
 8000e7e:	2101      	movs	r1, #1
 8000e80:	430a      	orrs	r2, r1
 8000e82:	61da      	str	r2, [r3, #28]
 8000e84:	4b08      	ldr	r3, [pc, #32]	@ (8000ea8 <HAL_TIM_PWM_MspInit+0x44>)
 8000e86:	69db      	ldr	r3, [r3, #28]
 8000e88:	2201      	movs	r2, #1
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	60fb      	str	r3, [r7, #12]
 8000e8e:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e90:	2200      	movs	r2, #0
 8000e92:	2100      	movs	r1, #0
 8000e94:	200f      	movs	r0, #15
 8000e96:	f000 ffa7 	bl	8001de8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e9a:	200f      	movs	r0, #15
 8000e9c:	f000 ffb9 	bl	8001e12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000ea0:	46c0      	nop			@ (mov r8, r8)
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	b004      	add	sp, #16
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	40021000 	.word	0x40021000

08000eac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a0e      	ldr	r2, [pc, #56]	@ (8000ef4 <HAL_TIM_Base_MspInit+0x48>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d115      	bne.n	8000eea <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000ebe:	4b0e      	ldr	r3, [pc, #56]	@ (8000ef8 <HAL_TIM_Base_MspInit+0x4c>)
 8000ec0:	699a      	ldr	r2, [r3, #24]
 8000ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ef8 <HAL_TIM_Base_MspInit+0x4c>)
 8000ec4:	2180      	movs	r1, #128	@ 0x80
 8000ec6:	0289      	lsls	r1, r1, #10
 8000ec8:	430a      	orrs	r2, r1
 8000eca:	619a      	str	r2, [r3, #24]
 8000ecc:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef8 <HAL_TIM_Base_MspInit+0x4c>)
 8000ece:	699a      	ldr	r2, [r3, #24]
 8000ed0:	2380      	movs	r3, #128	@ 0x80
 8000ed2:	029b      	lsls	r3, r3, #10
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	68fb      	ldr	r3, [r7, #12]

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8000eda:	2200      	movs	r2, #0
 8000edc:	2100      	movs	r1, #0
 8000ede:	2015      	movs	r0, #21
 8000ee0:	f000 ff82 	bl	8001de8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8000ee4:	2015      	movs	r0, #21
 8000ee6:	f000 ff94 	bl	8001e12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8000eea:	46c0      	nop			@ (mov r8, r8)
 8000eec:	46bd      	mov	sp, r7
 8000eee:	b004      	add	sp, #16
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	46c0      	nop			@ (mov r8, r8)
 8000ef4:	40014400 	.word	0x40014400
 8000ef8:	40021000 	.word	0x40021000

08000efc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000efc:	b590      	push	{r4, r7, lr}
 8000efe:	b089      	sub	sp, #36	@ 0x24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f04:	240c      	movs	r4, #12
 8000f06:	193b      	adds	r3, r7, r4
 8000f08:	0018      	movs	r0, r3
 8000f0a:	2314      	movs	r3, #20
 8000f0c:	001a      	movs	r2, r3
 8000f0e:	2100      	movs	r1, #0
 8000f10:	f004 fe46 	bl	8005ba0 <memset>
  if(timHandle->Instance==TIM2)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	2380      	movs	r3, #128	@ 0x80
 8000f1a:	05db      	lsls	r3, r3, #23
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d123      	bne.n	8000f68 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f20:	4b13      	ldr	r3, [pc, #76]	@ (8000f70 <HAL_TIM_MspPostInit+0x74>)
 8000f22:	695a      	ldr	r2, [r3, #20]
 8000f24:	4b12      	ldr	r3, [pc, #72]	@ (8000f70 <HAL_TIM_MspPostInit+0x74>)
 8000f26:	2180      	movs	r1, #128	@ 0x80
 8000f28:	02c9      	lsls	r1, r1, #11
 8000f2a:	430a      	orrs	r2, r1
 8000f2c:	615a      	str	r2, [r3, #20]
 8000f2e:	4b10      	ldr	r3, [pc, #64]	@ (8000f70 <HAL_TIM_MspPostInit+0x74>)
 8000f30:	695a      	ldr	r2, [r3, #20]
 8000f32:	2380      	movs	r3, #128	@ 0x80
 8000f34:	02db      	lsls	r3, r3, #11
 8000f36:	4013      	ands	r3, r2
 8000f38:	60bb      	str	r3, [r7, #8]
 8000f3a:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f3c:	0021      	movs	r1, r4
 8000f3e:	187b      	adds	r3, r7, r1
 8000f40:	2208      	movs	r2, #8
 8000f42:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f44:	187b      	adds	r3, r7, r1
 8000f46:	2202      	movs	r2, #2
 8000f48:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	187b      	adds	r3, r7, r1
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f50:	187b      	adds	r3, r7, r1
 8000f52:	2200      	movs	r2, #0
 8000f54:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000f56:	187b      	adds	r3, r7, r1
 8000f58:	2202      	movs	r2, #2
 8000f5a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f5c:	187b      	adds	r3, r7, r1
 8000f5e:	4a05      	ldr	r2, [pc, #20]	@ (8000f74 <HAL_TIM_MspPostInit+0x78>)
 8000f60:	0019      	movs	r1, r3
 8000f62:	0010      	movs	r0, r2
 8000f64:	f001 f988 	bl	8002278 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000f68:	46c0      	nop			@ (mov r8, r8)
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	b009      	add	sp, #36	@ 0x24
 8000f6e:	bd90      	pop	{r4, r7, pc}
 8000f70:	40021000 	.word	0x40021000
 8000f74:	48000400 	.word	0x48000400

08000f78 <analog_tsens_init>:

/**
  * @brief
  * @return
  */
void analog_tsens_init(ADC_HandleTypeDef *hadc,uint32_t channel){
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	6039      	str	r1, [r7, #0]
	adc_digital = hadc;
 8000f82:	4b10      	ldr	r3, [pc, #64]	@ (8000fc4 <analog_tsens_init+0x4c>)
 8000f84:	687a      	ldr	r2, [r7, #4]
 8000f86:	601a      	str	r2, [r3, #0]
	analog_tsens_sConfig.Channel = channel;
 8000f88:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc8 <analog_tsens_init+0x50>)
 8000f8a:	683a      	ldr	r2, [r7, #0]
 8000f8c:	601a      	str	r2, [r3, #0]
	analog_tsens_sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000f8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc8 <analog_tsens_init+0x50>)
 8000f90:	2280      	movs	r2, #128	@ 0x80
 8000f92:	0152      	lsls	r2, r2, #5
 8000f94:	605a      	str	r2, [r3, #4]
	analog_tsens_sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000f96:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc8 <analog_tsens_init+0x50>)
 8000f98:	2280      	movs	r2, #128	@ 0x80
 8000f9a:	0552      	lsls	r2, r2, #21
 8000f9c:	609a      	str	r2, [r3, #8]

	HAL_ADC_ConfigChannel(adc_digital, &analog_tsens_sConfig);
 8000f9e:	4b09      	ldr	r3, [pc, #36]	@ (8000fc4 <analog_tsens_init+0x4c>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a09      	ldr	r2, [pc, #36]	@ (8000fc8 <analog_tsens_init+0x50>)
 8000fa4:	0011      	movs	r1, r2
 8000fa6:	0018      	movs	r0, r3
 8000fa8:	f000 fc5c 	bl	8001864 <HAL_ADC_ConfigChannel>
	HAL_ADC_Start_DMA(adc_digital,(uint32_t*)&adc_tsens_value,1);
 8000fac:	4b05      	ldr	r3, [pc, #20]	@ (8000fc4 <analog_tsens_init+0x4c>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4906      	ldr	r1, [pc, #24]	@ (8000fcc <analog_tsens_init+0x54>)
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	0018      	movs	r0, r3
 8000fb6:	f000 fbbb 	bl	8001730 <HAL_ADC_Start_DMA>
}
 8000fba:	46c0      	nop			@ (mov r8, r8)
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	b002      	add	sp, #8
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	46c0      	nop			@ (mov r8, r8)
 8000fc4:	2000026c 	.word	0x2000026c
 8000fc8:	20000270 	.word	0x20000270
 8000fcc:	2000027c 	.word	0x2000027c

08000fd0 <get_analog_tsens>:

/*
  * @brief
  * @return
  */
uint32_t get_analog_tsens(void){
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
	HAL_ADC_ConfigChannel(adc_digital, &analog_tsens_sConfig);
 8000fd6:	4b12      	ldr	r3, [pc, #72]	@ (8001020 <get_analog_tsens+0x50>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a12      	ldr	r2, [pc, #72]	@ (8001024 <get_analog_tsens+0x54>)
 8000fdc:	0011      	movs	r1, r2
 8000fde:	0018      	movs	r0, r3
 8000fe0:	f000 fc40 	bl	8001864 <HAL_ADC_ConfigChannel>
	tsens_flag_analizer = false;
 8000fe4:	4b10      	ldr	r3, [pc, #64]	@ (8001028 <get_analog_tsens+0x58>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	701a      	strb	r2, [r3, #0]
	HAL_ADC_Start_DMA(adc_digital,(uint32_t*)&adc_tsens_value,1);
 8000fea:	4b0d      	ldr	r3, [pc, #52]	@ (8001020 <get_analog_tsens+0x50>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	490f      	ldr	r1, [pc, #60]	@ (800102c <get_analog_tsens+0x5c>)
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	0018      	movs	r0, r3
 8000ff4:	f000 fb9c 	bl	8001730 <HAL_ADC_Start_DMA>
	uint32_t ADC_temp = adc_tsens_value * 830;
 8000ff8:	4b0c      	ldr	r3, [pc, #48]	@ (800102c <get_analog_tsens+0x5c>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a0c      	ldr	r2, [pc, #48]	@ (8001030 <get_analog_tsens+0x60>)
 8000ffe:	4353      	muls	r3, r2
 8001000:	607b      	str	r3, [r7, #4]
	ADC_temp = (ADC_temp/100)-27315;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2164      	movs	r1, #100	@ 0x64
 8001006:	0018      	movs	r0, r3
 8001008:	f7ff f890 	bl	800012c <__udivsi3>
 800100c:	0003      	movs	r3, r0
 800100e:	4a09      	ldr	r2, [pc, #36]	@ (8001034 <get_analog_tsens+0x64>)
 8001010:	4694      	mov	ip, r2
 8001012:	4463      	add	r3, ip
 8001014:	607b      	str	r3, [r7, #4]
	return ADC_temp;
 8001016:	687b      	ldr	r3, [r7, #4]
}
 8001018:	0018      	movs	r0, r3
 800101a:	46bd      	mov	sp, r7
 800101c:	b002      	add	sp, #8
 800101e:	bd80      	pop	{r7, pc}
 8001020:	2000026c 	.word	0x2000026c
 8001024:	20000270 	.word	0x20000270
 8001028:	20000280 	.word	0x20000280
 800102c:	2000027c 	.word	0x2000027c
 8001030:	0000033e 	.word	0x0000033e
 8001034:	ffff954d 	.word	0xffff954d

08001038 <uart_ble_init>:

/**
  * @brief
  * @return
  */
void uart_ble_init(UART_HandleTypeDef *huart){
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
	ble_uart = huart;
 8001040:	4b06      	ldr	r3, [pc, #24]	@ (800105c <uart_ble_init+0x24>)
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(ble_uart, (uint8_t*)&local_buffer.rx_buf[0], 1);
 8001046:	4b05      	ldr	r3, [pc, #20]	@ (800105c <uart_ble_init+0x24>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4905      	ldr	r1, [pc, #20]	@ (8001060 <uart_ble_init+0x28>)
 800104c:	2201      	movs	r2, #1
 800104e:	0018      	movs	r0, r3
 8001050:	f003 fb0e 	bl	8004670 <HAL_UART_Receive_IT>
}
 8001054:	46c0      	nop			@ (mov r8, r8)
 8001056:	46bd      	mov	sp, r7
 8001058:	b002      	add	sp, #8
 800105a:	bd80      	pop	{r7, pc}
 800105c:	2000034c 	.word	0x2000034c
 8001060:	200002e8 	.word	0x200002e8

08001064 <uart_ble_transmit>:

/**
  * @brief
  * @return
  */
bool uart_ble_transmit(uint8_t* text){
 8001064:	b590      	push	{r4, r7, lr}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
	if (tx_transmit_flag == false) {
 800106c:	4b0e      	ldr	r3, [pc, #56]	@ (80010a8 <uart_ble_transmit+0x44>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	2201      	movs	r2, #1
 8001072:	4053      	eors	r3, r2
 8001074:	b2db      	uxtb	r3, r3
 8001076:	2b00      	cmp	r3, #0
 8001078:	d011      	beq.n	800109e <uart_ble_transmit+0x3a>
		tx_transmit_flag = true;
 800107a:	4b0b      	ldr	r3, [pc, #44]	@ (80010a8 <uart_ble_transmit+0x44>)
 800107c:	2201      	movs	r2, #1
 800107e:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(ble_uart, (char *) text, strlen((char *)text));
 8001080:	4b0a      	ldr	r3, [pc, #40]	@ (80010ac <uart_ble_transmit+0x48>)
 8001082:	681c      	ldr	r4, [r3, #0]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	0018      	movs	r0, r3
 8001088:	f7ff f83e 	bl	8000108 <strlen>
 800108c:	0003      	movs	r3, r0
 800108e:	b29a      	uxth	r2, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	0019      	movs	r1, r3
 8001094:	0020      	movs	r0, r4
 8001096:	f003 fa7b 	bl	8004590 <HAL_UART_Transmit_IT>
		return true;
 800109a:	2301      	movs	r3, #1
 800109c:	e000      	b.n	80010a0 <uart_ble_transmit+0x3c>
	}
	return false;
 800109e:	2300      	movs	r3, #0
}
 80010a0:	0018      	movs	r0, r3
 80010a2:	46bd      	mov	sp, r7
 80010a4:	b003      	add	sp, #12
 80010a6:	bd90      	pop	{r4, r7, pc}
 80010a8:	20000351 	.word	0x20000351
 80010ac:	2000034c 	.word	0x2000034c

080010b0 <uart_ble_pop_cmd>:
/**
 * @brief
 * @return
 */
bool uart_ble_pop_cmd(uint8_t *cmd)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
	if (end_msg_flag==true){
 80010b8:	4b0c      	ldr	r3, [pc, #48]	@ (80010ec <uart_ble_pop_cmd+0x3c>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d00f      	beq.n	80010e0 <uart_ble_pop_cmd+0x30>
		strncpy((char *)cmd, (char *) local_buffer.rx_buf, strlen((char *)local_buffer.rx_buf)+1);
 80010c0:	4b0b      	ldr	r3, [pc, #44]	@ (80010f0 <uart_ble_pop_cmd+0x40>)
 80010c2:	0018      	movs	r0, r3
 80010c4:	f7ff f820 	bl	8000108 <strlen>
 80010c8:	0003      	movs	r3, r0
 80010ca:	1c5a      	adds	r2, r3, #1
 80010cc:	4908      	ldr	r1, [pc, #32]	@ (80010f0 <uart_ble_pop_cmd+0x40>)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	0018      	movs	r0, r3
 80010d2:	f004 fd7e 	bl	8005bd2 <strncpy>
		end_msg_flag = false;
 80010d6:	4b05      	ldr	r3, [pc, #20]	@ (80010ec <uart_ble_pop_cmd+0x3c>)
 80010d8:	2200      	movs	r2, #0
 80010da:	701a      	strb	r2, [r3, #0]
		return true;
 80010dc:	2301      	movs	r3, #1
 80010de:	e000      	b.n	80010e2 <uart_ble_pop_cmd+0x32>
	}
	return false;
 80010e0:	2300      	movs	r3, #0
}
 80010e2:	0018      	movs	r0, r3
 80010e4:	46bd      	mov	sp, r7
 80010e6:	b002      	add	sp, #8
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	46c0      	nop			@ (mov r8, r8)
 80010ec:	20000350 	.word	0x20000350
 80010f0:	200002e8 	.word	0x200002e8

080010f4 <uart_ble_RxCpltCallback>:

/**
  * @brief
  * @return
  */
void uart_ble_RxCpltCallback(UART_HandleTypeDef *huart){
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
	if (huart->Instance == ble_uart->Instance){
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	4b23      	ldr	r3, [pc, #140]	@ (8001190 <uart_ble_RxCpltCallback+0x9c>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	429a      	cmp	r2, r3
 8001108:	d13d      	bne.n	8001186 <uart_ble_RxCpltCallback+0x92>
		com_len ++;
 800110a:	4b22      	ldr	r3, [pc, #136]	@ (8001194 <uart_ble_RxCpltCallback+0xa0>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	3301      	adds	r3, #1
 8001110:	b2da      	uxtb	r2, r3
 8001112:	4b20      	ldr	r3, [pc, #128]	@ (8001194 <uart_ble_RxCpltCallback+0xa0>)
 8001114:	701a      	strb	r2, [r3, #0]
		if (local_buffer.rx_buf[com_len-1] == '\n' ||
 8001116:	4b1f      	ldr	r3, [pc, #124]	@ (8001194 <uart_ble_RxCpltCallback+0xa0>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	3b01      	subs	r3, #1
 800111c:	4a1e      	ldr	r2, [pc, #120]	@ (8001198 <uart_ble_RxCpltCallback+0xa4>)
 800111e:	2164      	movs	r1, #100	@ 0x64
 8001120:	18d3      	adds	r3, r2, r3
 8001122:	185b      	adds	r3, r3, r1
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	2b0a      	cmp	r3, #10
 8001128:	d009      	beq.n	800113e <uart_ble_RxCpltCallback+0x4a>
				local_buffer.rx_buf[com_len-1] == '\r'){
 800112a:	4b1a      	ldr	r3, [pc, #104]	@ (8001194 <uart_ble_RxCpltCallback+0xa0>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	3b01      	subs	r3, #1
 8001130:	4a19      	ldr	r2, [pc, #100]	@ (8001198 <uart_ble_RxCpltCallback+0xa4>)
 8001132:	2164      	movs	r1, #100	@ 0x64
 8001134:	18d3      	adds	r3, r2, r3
 8001136:	185b      	adds	r3, r3, r1
 8001138:	781b      	ldrb	r3, [r3, #0]
		if (local_buffer.rx_buf[com_len-1] == '\n' ||
 800113a:	2b0d      	cmp	r3, #13
 800113c:	d116      	bne.n	800116c <uart_ble_RxCpltCallback+0x78>
			if(com_len>2){
 800113e:	4b15      	ldr	r3, [pc, #84]	@ (8001194 <uart_ble_RxCpltCallback+0xa0>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	2b02      	cmp	r3, #2
 8001144:	d90f      	bls.n	8001166 <uart_ble_RxCpltCallback+0x72>
				end_msg_flag = true;
 8001146:	4b15      	ldr	r3, [pc, #84]	@ (800119c <uart_ble_RxCpltCallback+0xa8>)
 8001148:	2201      	movs	r2, #1
 800114a:	701a      	strb	r2, [r3, #0]
				local_buffer.rx_buf[com_len-1] = '\0';
 800114c:	4b11      	ldr	r3, [pc, #68]	@ (8001194 <uart_ble_RxCpltCallback+0xa0>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	3b01      	subs	r3, #1
 8001152:	4a11      	ldr	r2, [pc, #68]	@ (8001198 <uart_ble_RxCpltCallback+0xa4>)
 8001154:	2164      	movs	r1, #100	@ 0x64
 8001156:	18d3      	adds	r3, r2, r3
 8001158:	185b      	adds	r3, r3, r1
 800115a:	2200      	movs	r2, #0
 800115c:	701a      	strb	r2, [r3, #0]
				com_len = 0;
 800115e:	4b0d      	ldr	r3, [pc, #52]	@ (8001194 <uart_ble_RxCpltCallback+0xa0>)
 8001160:	2200      	movs	r2, #0
 8001162:	701a      	strb	r2, [r3, #0]
 8001164:	e002      	b.n	800116c <uart_ble_RxCpltCallback+0x78>
			}else{
				com_len = 0;
 8001166:	4b0b      	ldr	r3, [pc, #44]	@ (8001194 <uart_ble_RxCpltCallback+0xa0>)
 8001168:	2200      	movs	r2, #0
 800116a:	701a      	strb	r2, [r3, #0]
			}
		}
		HAL_UART_Receive_IT(ble_uart, (uint8_t*)&local_buffer.rx_buf[com_len], 1);
 800116c:	4b08      	ldr	r3, [pc, #32]	@ (8001190 <uart_ble_RxCpltCallback+0x9c>)
 800116e:	6818      	ldr	r0, [r3, #0]
 8001170:	4b08      	ldr	r3, [pc, #32]	@ (8001194 <uart_ble_RxCpltCallback+0xa0>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	3360      	adds	r3, #96	@ 0x60
 8001176:	001a      	movs	r2, r3
 8001178:	4b07      	ldr	r3, [pc, #28]	@ (8001198 <uart_ble_RxCpltCallback+0xa4>)
 800117a:	18d3      	adds	r3, r2, r3
 800117c:	3304      	adds	r3, #4
 800117e:	2201      	movs	r2, #1
 8001180:	0019      	movs	r1, r3
 8001182:	f003 fa75 	bl	8004670 <HAL_UART_Receive_IT>
	}
}
 8001186:	46c0      	nop			@ (mov r8, r8)
 8001188:	46bd      	mov	sp, r7
 800118a:	b002      	add	sp, #8
 800118c:	bd80      	pop	{r7, pc}
 800118e:	46c0      	nop			@ (mov r8, r8)
 8001190:	2000034c 	.word	0x2000034c
 8001194:	20000352 	.word	0x20000352
 8001198:	20000284 	.word	0x20000284
 800119c:	20000350 	.word	0x20000350

080011a0 <uart_ble_TxCpltCallback>:

/**
  * @brief
  * @return
  */
void uart_ble_TxCpltCallback(UART_HandleTypeDef *huart){
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == ble_uart->Instance){
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	4b05      	ldr	r3, [pc, #20]	@ (80011c4 <uart_ble_TxCpltCallback+0x24>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d102      	bne.n	80011bc <uart_ble_TxCpltCallback+0x1c>
		tx_transmit_flag = false;
 80011b6:	4b04      	ldr	r3, [pc, #16]	@ (80011c8 <uart_ble_TxCpltCallback+0x28>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	701a      	strb	r2, [r3, #0]
	}
}
 80011bc:	46c0      	nop			@ (mov r8, r8)
 80011be:	46bd      	mov	sp, r7
 80011c0:	b002      	add	sp, #8
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	2000034c 	.word	0x2000034c
 80011c8:	20000351 	.word	0x20000351

080011cc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011d0:	4b14      	ldr	r3, [pc, #80]	@ (8001224 <MX_USART1_UART_Init+0x58>)
 80011d2:	4a15      	ldr	r2, [pc, #84]	@ (8001228 <MX_USART1_UART_Init+0x5c>)
 80011d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80011d6:	4b13      	ldr	r3, [pc, #76]	@ (8001224 <MX_USART1_UART_Init+0x58>)
 80011d8:	2296      	movs	r2, #150	@ 0x96
 80011da:	0192      	lsls	r2, r2, #6
 80011dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011de:	4b11      	ldr	r3, [pc, #68]	@ (8001224 <MX_USART1_UART_Init+0x58>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001224 <MX_USART1_UART_Init+0x58>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001224 <MX_USART1_UART_Init+0x58>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001224 <MX_USART1_UART_Init+0x58>)
 80011f2:	220c      	movs	r2, #12
 80011f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001224 <MX_USART1_UART_Init+0x58>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011fc:	4b09      	ldr	r3, [pc, #36]	@ (8001224 <MX_USART1_UART_Init+0x58>)
 80011fe:	2200      	movs	r2, #0
 8001200:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001202:	4b08      	ldr	r3, [pc, #32]	@ (8001224 <MX_USART1_UART_Init+0x58>)
 8001204:	2200      	movs	r2, #0
 8001206:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001208:	4b06      	ldr	r3, [pc, #24]	@ (8001224 <MX_USART1_UART_Init+0x58>)
 800120a:	2200      	movs	r2, #0
 800120c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800120e:	4b05      	ldr	r3, [pc, #20]	@ (8001224 <MX_USART1_UART_Init+0x58>)
 8001210:	0018      	movs	r0, r3
 8001212:	f003 f969 	bl	80044e8 <HAL_UART_Init>
 8001216:	1e03      	subs	r3, r0, #0
 8001218:	d001      	beq.n	800121e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800121a:	f7ff fc2b 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800121e:	46c0      	nop			@ (mov r8, r8)
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	20000354 	.word	0x20000354
 8001228:	40013800 	.word	0x40013800

0800122c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800122c:	b590      	push	{r4, r7, lr}
 800122e:	b08b      	sub	sp, #44	@ 0x2c
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001234:	2414      	movs	r4, #20
 8001236:	193b      	adds	r3, r7, r4
 8001238:	0018      	movs	r0, r3
 800123a:	2314      	movs	r3, #20
 800123c:	001a      	movs	r2, r3
 800123e:	2100      	movs	r1, #0
 8001240:	f004 fcae 	bl	8005ba0 <memset>
  if(uartHandle->Instance==USART1)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a21      	ldr	r2, [pc, #132]	@ (80012d0 <HAL_UART_MspInit+0xa4>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d13b      	bne.n	80012c6 <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800124e:	4b21      	ldr	r3, [pc, #132]	@ (80012d4 <HAL_UART_MspInit+0xa8>)
 8001250:	699a      	ldr	r2, [r3, #24]
 8001252:	4b20      	ldr	r3, [pc, #128]	@ (80012d4 <HAL_UART_MspInit+0xa8>)
 8001254:	2180      	movs	r1, #128	@ 0x80
 8001256:	01c9      	lsls	r1, r1, #7
 8001258:	430a      	orrs	r2, r1
 800125a:	619a      	str	r2, [r3, #24]
 800125c:	4b1d      	ldr	r3, [pc, #116]	@ (80012d4 <HAL_UART_MspInit+0xa8>)
 800125e:	699a      	ldr	r2, [r3, #24]
 8001260:	2380      	movs	r3, #128	@ 0x80
 8001262:	01db      	lsls	r3, r3, #7
 8001264:	4013      	ands	r3, r2
 8001266:	613b      	str	r3, [r7, #16]
 8001268:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800126a:	4b1a      	ldr	r3, [pc, #104]	@ (80012d4 <HAL_UART_MspInit+0xa8>)
 800126c:	695a      	ldr	r2, [r3, #20]
 800126e:	4b19      	ldr	r3, [pc, #100]	@ (80012d4 <HAL_UART_MspInit+0xa8>)
 8001270:	2180      	movs	r1, #128	@ 0x80
 8001272:	0289      	lsls	r1, r1, #10
 8001274:	430a      	orrs	r2, r1
 8001276:	615a      	str	r2, [r3, #20]
 8001278:	4b16      	ldr	r3, [pc, #88]	@ (80012d4 <HAL_UART_MspInit+0xa8>)
 800127a:	695a      	ldr	r2, [r3, #20]
 800127c:	2380      	movs	r3, #128	@ 0x80
 800127e:	029b      	lsls	r3, r3, #10
 8001280:	4013      	ands	r3, r2
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001286:	193b      	adds	r3, r7, r4
 8001288:	22c0      	movs	r2, #192	@ 0xc0
 800128a:	00d2      	lsls	r2, r2, #3
 800128c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128e:	0021      	movs	r1, r4
 8001290:	187b      	adds	r3, r7, r1
 8001292:	2202      	movs	r2, #2
 8001294:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	187b      	adds	r3, r7, r1
 8001298:	2200      	movs	r2, #0
 800129a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800129c:	187b      	adds	r3, r7, r1
 800129e:	2203      	movs	r2, #3
 80012a0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80012a2:	187b      	adds	r3, r7, r1
 80012a4:	2201      	movs	r2, #1
 80012a6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a8:	187a      	adds	r2, r7, r1
 80012aa:	2390      	movs	r3, #144	@ 0x90
 80012ac:	05db      	lsls	r3, r3, #23
 80012ae:	0011      	movs	r1, r2
 80012b0:	0018      	movs	r0, r3
 80012b2:	f000 ffe1 	bl	8002278 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80012b6:	2200      	movs	r2, #0
 80012b8:	2100      	movs	r1, #0
 80012ba:	201b      	movs	r0, #27
 80012bc:	f000 fd94 	bl	8001de8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80012c0:	201b      	movs	r0, #27
 80012c2:	f000 fda6 	bl	8001e12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80012c6:	46c0      	nop			@ (mov r8, r8)
 80012c8:	46bd      	mov	sp, r7
 80012ca:	b00b      	add	sp, #44	@ 0x2c
 80012cc:	bd90      	pop	{r4, r7, pc}
 80012ce:	46c0      	nop			@ (mov r8, r8)
 80012d0:	40013800 	.word	0x40013800
 80012d4:	40021000 	.word	0x40021000

080012d8 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80012dc:	4b0f      	ldr	r3, [pc, #60]	@ (800131c <MX_USB_PCD_Init+0x44>)
 80012de:	4a10      	ldr	r2, [pc, #64]	@ (8001320 <MX_USB_PCD_Init+0x48>)
 80012e0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80012e2:	4b0e      	ldr	r3, [pc, #56]	@ (800131c <MX_USB_PCD_Init+0x44>)
 80012e4:	2208      	movs	r2, #8
 80012e6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80012e8:	4b0c      	ldr	r3, [pc, #48]	@ (800131c <MX_USB_PCD_Init+0x44>)
 80012ea:	2202      	movs	r2, #2
 80012ec:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80012ee:	4b0b      	ldr	r3, [pc, #44]	@ (800131c <MX_USB_PCD_Init+0x44>)
 80012f0:	2202      	movs	r2, #2
 80012f2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80012f4:	4b09      	ldr	r3, [pc, #36]	@ (800131c <MX_USB_PCD_Init+0x44>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80012fa:	4b08      	ldr	r3, [pc, #32]	@ (800131c <MX_USB_PCD_Init+0x44>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001300:	4b06      	ldr	r3, [pc, #24]	@ (800131c <MX_USB_PCD_Init+0x44>)
 8001302:	2200      	movs	r2, #0
 8001304:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001306:	4b05      	ldr	r3, [pc, #20]	@ (800131c <MX_USB_PCD_Init+0x44>)
 8001308:	0018      	movs	r0, r3
 800130a:	f001 fa93 	bl	8002834 <HAL_PCD_Init>
 800130e:	1e03      	subs	r3, r0, #0
 8001310:	d001      	beq.n	8001316 <MX_USB_PCD_Init+0x3e>
  {
    Error_Handler();
 8001312:	f7ff fbaf 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001316:	46c0      	nop			@ (mov r8, r8)
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	200003dc 	.word	0x200003dc
 8001320:	40005c00 	.word	0x40005c00

08001324 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]

  if(pcdHandle->Instance==USB)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a0a      	ldr	r2, [pc, #40]	@ (800135c <HAL_PCD_MspInit+0x38>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d10d      	bne.n	8001352 <HAL_PCD_MspInit+0x2e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001336:	4b0a      	ldr	r3, [pc, #40]	@ (8001360 <HAL_PCD_MspInit+0x3c>)
 8001338:	69da      	ldr	r2, [r3, #28]
 800133a:	4b09      	ldr	r3, [pc, #36]	@ (8001360 <HAL_PCD_MspInit+0x3c>)
 800133c:	2180      	movs	r1, #128	@ 0x80
 800133e:	0409      	lsls	r1, r1, #16
 8001340:	430a      	orrs	r2, r1
 8001342:	61da      	str	r2, [r3, #28]
 8001344:	4b06      	ldr	r3, [pc, #24]	@ (8001360 <HAL_PCD_MspInit+0x3c>)
 8001346:	69da      	ldr	r2, [r3, #28]
 8001348:	2380      	movs	r3, #128	@ 0x80
 800134a:	041b      	lsls	r3, r3, #16
 800134c:	4013      	ands	r3, r2
 800134e:	60fb      	str	r3, [r7, #12]
 8001350:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8001352:	46c0      	nop			@ (mov r8, r8)
 8001354:	46bd      	mov	sp, r7
 8001356:	b004      	add	sp, #16
 8001358:	bd80      	pop	{r7, pc}
 800135a:	46c0      	nop			@ (mov r8, r8)
 800135c:	40005c00 	.word	0x40005c00
 8001360:	40021000 	.word	0x40021000

08001364 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001364:	4813      	ldr	r0, [pc, #76]	@ (80013b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001366:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001368:	f7ff fcee 	bl	8000d48 <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 800136c:	4812      	ldr	r0, [pc, #72]	@ (80013b8 <LoopForever+0x6>)
    LDR R1, [R0]
 800136e:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8001370:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8001372:	4a12      	ldr	r2, [pc, #72]	@ (80013bc <LoopForever+0xa>)
    CMP R1, R2
 8001374:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8001376:	d105      	bne.n	8001384 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8001378:	4811      	ldr	r0, [pc, #68]	@ (80013c0 <LoopForever+0xe>)
    LDR R1,=0x00000001
 800137a:	4912      	ldr	r1, [pc, #72]	@ (80013c4 <LoopForever+0x12>)
    STR R1, [R0]
 800137c:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 800137e:	4812      	ldr	r0, [pc, #72]	@ (80013c8 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8001380:	4912      	ldr	r1, [pc, #72]	@ (80013cc <LoopForever+0x1a>)
    STR R1, [R0]
 8001382:	6001      	str	r1, [r0, #0]

08001384 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001384:	4812      	ldr	r0, [pc, #72]	@ (80013d0 <LoopForever+0x1e>)
  ldr r1, =_edata
 8001386:	4913      	ldr	r1, [pc, #76]	@ (80013d4 <LoopForever+0x22>)
  ldr r2, =_sidata
 8001388:	4a13      	ldr	r2, [pc, #76]	@ (80013d8 <LoopForever+0x26>)
  movs r3, #0
 800138a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800138c:	e002      	b.n	8001394 <LoopCopyDataInit>

0800138e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800138e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001390:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001392:	3304      	adds	r3, #4

08001394 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001394:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001396:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001398:	d3f9      	bcc.n	800138e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800139a:	4a10      	ldr	r2, [pc, #64]	@ (80013dc <LoopForever+0x2a>)
  ldr r4, =_ebss
 800139c:	4c10      	ldr	r4, [pc, #64]	@ (80013e0 <LoopForever+0x2e>)
  movs r3, #0
 800139e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013a0:	e001      	b.n	80013a6 <LoopFillZerobss>

080013a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013a4:	3204      	adds	r2, #4

080013a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013a8:	d3fb      	bcc.n	80013a2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80013aa:	f004 fc2d 	bl	8005c08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013ae:	f7ff f99d 	bl	80006ec <main>

080013b2 <LoopForever>:

LoopForever:
    b LoopForever
 80013b2:	e7fe      	b.n	80013b2 <LoopForever>
  ldr   r0, =_estack
 80013b4:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 80013b8:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80013bc:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 80013c0:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 80013c4:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80013c8:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80013cc:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80013d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013d4:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80013d8:	08006648 	.word	0x08006648
  ldr r2, =_sbss
 80013dc:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80013e0:	20000804 	.word	0x20000804

080013e4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013e4:	e7fe      	b.n	80013e4 <ADC1_IRQHandler>
	...

080013e8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013ec:	4b07      	ldr	r3, [pc, #28]	@ (800140c <HAL_Init+0x24>)
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	4b06      	ldr	r3, [pc, #24]	@ (800140c <HAL_Init+0x24>)
 80013f2:	2110      	movs	r1, #16
 80013f4:	430a      	orrs	r2, r1
 80013f6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80013f8:	2003      	movs	r0, #3
 80013fa:	f000 f809 	bl	8001410 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013fe:	f7ff fbc9 	bl	8000b94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001402:	2300      	movs	r3, #0
}
 8001404:	0018      	movs	r0, r3
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	46c0      	nop			@ (mov r8, r8)
 800140c:	40022000 	.word	0x40022000

08001410 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001410:	b590      	push	{r4, r7, lr}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001418:	4b14      	ldr	r3, [pc, #80]	@ (800146c <HAL_InitTick+0x5c>)
 800141a:	681c      	ldr	r4, [r3, #0]
 800141c:	4b14      	ldr	r3, [pc, #80]	@ (8001470 <HAL_InitTick+0x60>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	0019      	movs	r1, r3
 8001422:	23fa      	movs	r3, #250	@ 0xfa
 8001424:	0098      	lsls	r0, r3, #2
 8001426:	f7fe fe81 	bl	800012c <__udivsi3>
 800142a:	0003      	movs	r3, r0
 800142c:	0019      	movs	r1, r3
 800142e:	0020      	movs	r0, r4
 8001430:	f7fe fe7c 	bl	800012c <__udivsi3>
 8001434:	0003      	movs	r3, r0
 8001436:	0018      	movs	r0, r3
 8001438:	f000 fcfb 	bl	8001e32 <HAL_SYSTICK_Config>
 800143c:	1e03      	subs	r3, r0, #0
 800143e:	d001      	beq.n	8001444 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	e00f      	b.n	8001464 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2b03      	cmp	r3, #3
 8001448:	d80b      	bhi.n	8001462 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800144a:	6879      	ldr	r1, [r7, #4]
 800144c:	2301      	movs	r3, #1
 800144e:	425b      	negs	r3, r3
 8001450:	2200      	movs	r2, #0
 8001452:	0018      	movs	r0, r3
 8001454:	f000 fcc8 	bl	8001de8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001458:	4b06      	ldr	r3, [pc, #24]	@ (8001474 <HAL_InitTick+0x64>)
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800145e:	2300      	movs	r3, #0
 8001460:	e000      	b.n	8001464 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
}
 8001464:	0018      	movs	r0, r3
 8001466:	46bd      	mov	sp, r7
 8001468:	b003      	add	sp, #12
 800146a:	bd90      	pop	{r4, r7, pc}
 800146c:	20000008 	.word	0x20000008
 8001470:	20000010 	.word	0x20000010
 8001474:	2000000c 	.word	0x2000000c

08001478 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800147c:	4b05      	ldr	r3, [pc, #20]	@ (8001494 <HAL_IncTick+0x1c>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	001a      	movs	r2, r3
 8001482:	4b05      	ldr	r3, [pc, #20]	@ (8001498 <HAL_IncTick+0x20>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	18d2      	adds	r2, r2, r3
 8001488:	4b03      	ldr	r3, [pc, #12]	@ (8001498 <HAL_IncTick+0x20>)
 800148a:	601a      	str	r2, [r3, #0]
}
 800148c:	46c0      	nop			@ (mov r8, r8)
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	46c0      	nop			@ (mov r8, r8)
 8001494:	20000010 	.word	0x20000010
 8001498:	200006b8 	.word	0x200006b8

0800149c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  return uwTick;
 80014a0:	4b02      	ldr	r3, [pc, #8]	@ (80014ac <HAL_GetTick+0x10>)
 80014a2:	681b      	ldr	r3, [r3, #0]
}
 80014a4:	0018      	movs	r0, r3
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	46c0      	nop			@ (mov r8, r8)
 80014ac:	200006b8 	.word	0x200006b8

080014b0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014b8:	230f      	movs	r3, #15
 80014ba:	18fb      	adds	r3, r7, r3
 80014bc:	2200      	movs	r2, #0
 80014be:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80014c0:	2300      	movs	r3, #0
 80014c2:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d101      	bne.n	80014ce <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e125      	b.n	800171a <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d10a      	bne.n	80014ec <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2200      	movs	r2, #0
 80014da:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2234      	movs	r2, #52	@ 0x34
 80014e0:	2100      	movs	r1, #0
 80014e2:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	0018      	movs	r0, r3
 80014e8:	f7fe ff22 	bl	8000330 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014f0:	2210      	movs	r2, #16
 80014f2:	4013      	ands	r3, r2
 80014f4:	d000      	beq.n	80014f8 <HAL_ADC_Init+0x48>
 80014f6:	e103      	b.n	8001700 <HAL_ADC_Init+0x250>
 80014f8:	230f      	movs	r3, #15
 80014fa:	18fb      	adds	r3, r7, r3
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d000      	beq.n	8001504 <HAL_ADC_Init+0x54>
 8001502:	e0fd      	b.n	8001700 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	2204      	movs	r2, #4
 800150c:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800150e:	d000      	beq.n	8001512 <HAL_ADC_Init+0x62>
 8001510:	e0f6      	b.n	8001700 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001516:	4a83      	ldr	r2, [pc, #524]	@ (8001724 <HAL_ADC_Init+0x274>)
 8001518:	4013      	ands	r3, r2
 800151a:	2202      	movs	r2, #2
 800151c:	431a      	orrs	r2, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	2203      	movs	r2, #3
 800152a:	4013      	ands	r3, r2
 800152c:	2b01      	cmp	r3, #1
 800152e:	d112      	bne.n	8001556 <HAL_ADC_Init+0xa6>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2201      	movs	r2, #1
 8001538:	4013      	ands	r3, r2
 800153a:	2b01      	cmp	r3, #1
 800153c:	d009      	beq.n	8001552 <HAL_ADC_Init+0xa2>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	68da      	ldr	r2, [r3, #12]
 8001544:	2380      	movs	r3, #128	@ 0x80
 8001546:	021b      	lsls	r3, r3, #8
 8001548:	401a      	ands	r2, r3
 800154a:	2380      	movs	r3, #128	@ 0x80
 800154c:	021b      	lsls	r3, r3, #8
 800154e:	429a      	cmp	r2, r3
 8001550:	d101      	bne.n	8001556 <HAL_ADC_Init+0xa6>
 8001552:	2301      	movs	r3, #1
 8001554:	e000      	b.n	8001558 <HAL_ADC_Init+0xa8>
 8001556:	2300      	movs	r3, #0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d116      	bne.n	800158a <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	68db      	ldr	r3, [r3, #12]
 8001562:	2218      	movs	r2, #24
 8001564:	4393      	bics	r3, r2
 8001566:	0019      	movs	r1, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	689a      	ldr	r2, [r3, #8]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	430a      	orrs	r2, r1
 8001572:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	691b      	ldr	r3, [r3, #16]
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	0899      	lsrs	r1, r3, #2
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685a      	ldr	r2, [r3, #4]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	430a      	orrs	r2, r1
 8001588:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	68da      	ldr	r2, [r3, #12]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4964      	ldr	r1, [pc, #400]	@ (8001728 <HAL_ADC_Init+0x278>)
 8001596:	400a      	ands	r2, r1
 8001598:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	7e1b      	ldrb	r3, [r3, #24]
 800159e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	7e5b      	ldrb	r3, [r3, #25]
 80015a4:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80015a6:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	7e9b      	ldrb	r3, [r3, #26]
 80015ac:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80015ae:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d002      	beq.n	80015be <HAL_ADC_Init+0x10e>
 80015b8:	2380      	movs	r3, #128	@ 0x80
 80015ba:	015b      	lsls	r3, r3, #5
 80015bc:	e000      	b.n	80015c0 <HAL_ADC_Init+0x110>
 80015be:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80015c0:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80015c6:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	691b      	ldr	r3, [r3, #16]
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d101      	bne.n	80015d4 <HAL_ADC_Init+0x124>
 80015d0:	2304      	movs	r3, #4
 80015d2:	e000      	b.n	80015d6 <HAL_ADC_Init+0x126>
 80015d4:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80015d6:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2124      	movs	r1, #36	@ 0x24
 80015dc:	5c5b      	ldrb	r3, [r3, r1]
 80015de:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80015e0:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80015e2:	68ba      	ldr	r2, [r7, #8]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	7edb      	ldrb	r3, [r3, #27]
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d115      	bne.n	800161c <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	7e9b      	ldrb	r3, [r3, #26]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d105      	bne.n	8001604 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	2280      	movs	r2, #128	@ 0x80
 80015fc:	0252      	lsls	r2, r2, #9
 80015fe:	4313      	orrs	r3, r2
 8001600:	60bb      	str	r3, [r7, #8]
 8001602:	e00b      	b.n	800161c <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001608:	2220      	movs	r2, #32
 800160a:	431a      	orrs	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001614:	2201      	movs	r2, #1
 8001616:	431a      	orrs	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	69da      	ldr	r2, [r3, #28]
 8001620:	23c2      	movs	r3, #194	@ 0xc2
 8001622:	33ff      	adds	r3, #255	@ 0xff
 8001624:	429a      	cmp	r2, r3
 8001626:	d007      	beq.n	8001638 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001630:	4313      	orrs	r3, r2
 8001632:	68ba      	ldr	r2, [r7, #8]
 8001634:	4313      	orrs	r3, r2
 8001636:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	68d9      	ldr	r1, [r3, #12]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	68ba      	ldr	r2, [r7, #8]
 8001644:	430a      	orrs	r2, r1
 8001646:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800164c:	2380      	movs	r3, #128	@ 0x80
 800164e:	055b      	lsls	r3, r3, #21
 8001650:	429a      	cmp	r2, r3
 8001652:	d01b      	beq.n	800168c <HAL_ADC_Init+0x1dc>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001658:	2b01      	cmp	r3, #1
 800165a:	d017      	beq.n	800168c <HAL_ADC_Init+0x1dc>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001660:	2b02      	cmp	r3, #2
 8001662:	d013      	beq.n	800168c <HAL_ADC_Init+0x1dc>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001668:	2b03      	cmp	r3, #3
 800166a:	d00f      	beq.n	800168c <HAL_ADC_Init+0x1dc>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001670:	2b04      	cmp	r3, #4
 8001672:	d00b      	beq.n	800168c <HAL_ADC_Init+0x1dc>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001678:	2b05      	cmp	r3, #5
 800167a:	d007      	beq.n	800168c <HAL_ADC_Init+0x1dc>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001680:	2b06      	cmp	r3, #6
 8001682:	d003      	beq.n	800168c <HAL_ADC_Init+0x1dc>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001688:	2b07      	cmp	r3, #7
 800168a:	d112      	bne.n	80016b2 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	695a      	ldr	r2, [r3, #20]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	2107      	movs	r1, #7
 8001698:	438a      	bics	r2, r1
 800169a:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	6959      	ldr	r1, [r3, #20]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016a6:	2207      	movs	r2, #7
 80016a8:	401a      	ands	r2, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	430a      	orrs	r2, r1
 80016b0:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	4a1c      	ldr	r2, [pc, #112]	@ (800172c <HAL_ADC_Init+0x27c>)
 80016ba:	4013      	ands	r3, r2
 80016bc:	68ba      	ldr	r2, [r7, #8]
 80016be:	429a      	cmp	r2, r3
 80016c0:	d10b      	bne.n	80016da <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2200      	movs	r2, #0
 80016c6:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016cc:	2203      	movs	r2, #3
 80016ce:	4393      	bics	r3, r2
 80016d0:	2201      	movs	r2, #1
 80016d2:	431a      	orrs	r2, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80016d8:	e01c      	b.n	8001714 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016de:	2212      	movs	r2, #18
 80016e0:	4393      	bics	r3, r2
 80016e2:	2210      	movs	r2, #16
 80016e4:	431a      	orrs	r2, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016ee:	2201      	movs	r2, #1
 80016f0:	431a      	orrs	r2, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80016f6:	230f      	movs	r3, #15
 80016f8:	18fb      	adds	r3, r7, r3
 80016fa:	2201      	movs	r2, #1
 80016fc:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80016fe:	e009      	b.n	8001714 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001704:	2210      	movs	r2, #16
 8001706:	431a      	orrs	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 800170c:	230f      	movs	r3, #15
 800170e:	18fb      	adds	r3, r7, r3
 8001710:	2201      	movs	r2, #1
 8001712:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001714:	230f      	movs	r3, #15
 8001716:	18fb      	adds	r3, r7, r3
 8001718:	781b      	ldrb	r3, [r3, #0]
}
 800171a:	0018      	movs	r0, r3
 800171c:	46bd      	mov	sp, r7
 800171e:	b004      	add	sp, #16
 8001720:	bd80      	pop	{r7, pc}
 8001722:	46c0      	nop			@ (mov r8, r8)
 8001724:	fffffefd 	.word	0xfffffefd
 8001728:	fffe0219 	.word	0xfffe0219
 800172c:	833fffe7 	.word	0x833fffe7

08001730 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001730:	b590      	push	{r4, r7, lr}
 8001732:	b087      	sub	sp, #28
 8001734:	af00      	add	r7, sp, #0
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	60b9      	str	r1, [r7, #8]
 800173a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800173c:	2317      	movs	r3, #23
 800173e:	18fb      	adds	r3, r7, r3
 8001740:	2200      	movs	r2, #0
 8001742:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	2204      	movs	r2, #4
 800174c:	4013      	ands	r3, r2
 800174e:	d15e      	bne.n	800180e <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2234      	movs	r2, #52	@ 0x34
 8001754:	5c9b      	ldrb	r3, [r3, r2]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d101      	bne.n	800175e <HAL_ADC_Start_DMA+0x2e>
 800175a:	2302      	movs	r3, #2
 800175c:	e05e      	b.n	800181c <HAL_ADC_Start_DMA+0xec>
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	2234      	movs	r2, #52	@ 0x34
 8001762:	2101      	movs	r1, #1
 8001764:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	7e5b      	ldrb	r3, [r3, #25]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d007      	beq.n	800177e <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800176e:	2317      	movs	r3, #23
 8001770:	18fc      	adds	r4, r7, r3
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	0018      	movs	r0, r3
 8001776:	f000 f983 	bl	8001a80 <ADC_Enable>
 800177a:	0003      	movs	r3, r0
 800177c:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800177e:	2317      	movs	r3, #23
 8001780:	18fb      	adds	r3, r7, r3
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d146      	bne.n	8001816 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800178c:	4a25      	ldr	r2, [pc, #148]	@ (8001824 <HAL_ADC_Start_DMA+0xf4>)
 800178e:	4013      	ands	r3, r2
 8001790:	2280      	movs	r2, #128	@ 0x80
 8001792:	0052      	lsls	r2, r2, #1
 8001794:	431a      	orrs	r2, r3
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	2200      	movs	r2, #0
 800179e:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	2234      	movs	r2, #52	@ 0x34
 80017a4:	2100      	movs	r1, #0
 80017a6:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ac:	4a1e      	ldr	r2, [pc, #120]	@ (8001828 <HAL_ADC_Start_DMA+0xf8>)
 80017ae:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b4:	4a1d      	ldr	r2, [pc, #116]	@ (800182c <HAL_ADC_Start_DMA+0xfc>)
 80017b6:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017bc:	4a1c      	ldr	r2, [pc, #112]	@ (8001830 <HAL_ADC_Start_DMA+0x100>)
 80017be:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	221c      	movs	r2, #28
 80017c6:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	685a      	ldr	r2, [r3, #4]
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2110      	movs	r1, #16
 80017d4:	430a      	orrs	r2, r1
 80017d6:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	68da      	ldr	r2, [r3, #12]
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	2101      	movs	r1, #1
 80017e4:	430a      	orrs	r2, r1
 80017e6:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	3340      	adds	r3, #64	@ 0x40
 80017f2:	0019      	movs	r1, r3
 80017f4:	68ba      	ldr	r2, [r7, #8]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f000 fb70 	bl	8001edc <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	689a      	ldr	r2, [r3, #8]
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2104      	movs	r1, #4
 8001808:	430a      	orrs	r2, r1
 800180a:	609a      	str	r2, [r3, #8]
 800180c:	e003      	b.n	8001816 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800180e:	2317      	movs	r3, #23
 8001810:	18fb      	adds	r3, r7, r3
 8001812:	2202      	movs	r2, #2
 8001814:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001816:	2317      	movs	r3, #23
 8001818:	18fb      	adds	r3, r7, r3
 800181a:	781b      	ldrb	r3, [r3, #0]
}
 800181c:	0018      	movs	r0, r3
 800181e:	46bd      	mov	sp, r7
 8001820:	b007      	add	sp, #28
 8001822:	bd90      	pop	{r4, r7, pc}
 8001824:	fffff0fe 	.word	0xfffff0fe
 8001828:	08001b89 	.word	0x08001b89
 800182c:	08001c3d 	.word	0x08001c3d
 8001830:	08001c5b 	.word	0x08001c5b

08001834 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800183c:	46c0      	nop			@ (mov r8, r8)
 800183e:	46bd      	mov	sp, r7
 8001840:	b002      	add	sp, #8
 8001842:	bd80      	pop	{r7, pc}

08001844 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800184c:	46c0      	nop			@ (mov r8, r8)
 800184e:	46bd      	mov	sp, r7
 8001850:	b002      	add	sp, #8
 8001852:	bd80      	pop	{r7, pc}

08001854 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800185c:	46c0      	nop			@ (mov r8, r8)
 800185e:	46bd      	mov	sp, r7
 8001860:	b002      	add	sp, #8
 8001862:	bd80      	pop	{r7, pc}

08001864 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800186e:	230f      	movs	r3, #15
 8001870:	18fb      	adds	r3, r7, r3
 8001872:	2200      	movs	r2, #0
 8001874:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8001876:	2300      	movs	r3, #0
 8001878:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800187e:	2380      	movs	r3, #128	@ 0x80
 8001880:	055b      	lsls	r3, r3, #21
 8001882:	429a      	cmp	r2, r3
 8001884:	d011      	beq.n	80018aa <HAL_ADC_ConfigChannel+0x46>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800188a:	2b01      	cmp	r3, #1
 800188c:	d00d      	beq.n	80018aa <HAL_ADC_ConfigChannel+0x46>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001892:	2b02      	cmp	r3, #2
 8001894:	d009      	beq.n	80018aa <HAL_ADC_ConfigChannel+0x46>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800189a:	2b03      	cmp	r3, #3
 800189c:	d005      	beq.n	80018aa <HAL_ADC_ConfigChannel+0x46>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018a2:	2b04      	cmp	r3, #4
 80018a4:	d001      	beq.n	80018aa <HAL_ADC_ConfigChannel+0x46>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2234      	movs	r2, #52	@ 0x34
 80018ae:	5c9b      	ldrb	r3, [r3, r2]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d101      	bne.n	80018b8 <HAL_ADC_ConfigChannel+0x54>
 80018b4:	2302      	movs	r3, #2
 80018b6:	e0d0      	b.n	8001a5a <HAL_ADC_ConfigChannel+0x1f6>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2234      	movs	r2, #52	@ 0x34
 80018bc:	2101      	movs	r1, #1
 80018be:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	2204      	movs	r2, #4
 80018c8:	4013      	ands	r3, r2
 80018ca:	d000      	beq.n	80018ce <HAL_ADC_ConfigChannel+0x6a>
 80018cc:	e0b4      	b.n	8001a38 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	4a64      	ldr	r2, [pc, #400]	@ (8001a64 <HAL_ADC_ConfigChannel+0x200>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d100      	bne.n	80018da <HAL_ADC_ConfigChannel+0x76>
 80018d8:	e082      	b.n	80019e0 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2201      	movs	r2, #1
 80018e6:	409a      	lsls	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	430a      	orrs	r2, r1
 80018ee:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018f4:	2380      	movs	r3, #128	@ 0x80
 80018f6:	055b      	lsls	r3, r3, #21
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d037      	beq.n	800196c <HAL_ADC_ConfigChannel+0x108>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001900:	2b01      	cmp	r3, #1
 8001902:	d033      	beq.n	800196c <HAL_ADC_ConfigChannel+0x108>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001908:	2b02      	cmp	r3, #2
 800190a:	d02f      	beq.n	800196c <HAL_ADC_ConfigChannel+0x108>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001910:	2b03      	cmp	r3, #3
 8001912:	d02b      	beq.n	800196c <HAL_ADC_ConfigChannel+0x108>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001918:	2b04      	cmp	r3, #4
 800191a:	d027      	beq.n	800196c <HAL_ADC_ConfigChannel+0x108>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001920:	2b05      	cmp	r3, #5
 8001922:	d023      	beq.n	800196c <HAL_ADC_ConfigChannel+0x108>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001928:	2b06      	cmp	r3, #6
 800192a:	d01f      	beq.n	800196c <HAL_ADC_ConfigChannel+0x108>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001930:	2b07      	cmp	r3, #7
 8001932:	d01b      	beq.n	800196c <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	689a      	ldr	r2, [r3, #8]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	695b      	ldr	r3, [r3, #20]
 800193e:	2107      	movs	r1, #7
 8001940:	400b      	ands	r3, r1
 8001942:	429a      	cmp	r2, r3
 8001944:	d012      	beq.n	800196c <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	695a      	ldr	r2, [r3, #20]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2107      	movs	r1, #7
 8001952:	438a      	bics	r2, r1
 8001954:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	6959      	ldr	r1, [r3, #20]
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	2207      	movs	r2, #7
 8001962:	401a      	ands	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	430a      	orrs	r2, r1
 800196a:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2b10      	cmp	r3, #16
 8001972:	d007      	beq.n	8001984 <HAL_ADC_ConfigChannel+0x120>
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2b11      	cmp	r3, #17
 800197a:	d003      	beq.n	8001984 <HAL_ADC_ConfigChannel+0x120>
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2b12      	cmp	r3, #18
 8001982:	d163      	bne.n	8001a4c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001984:	4b38      	ldr	r3, [pc, #224]	@ (8001a68 <HAL_ADC_ConfigChannel+0x204>)
 8001986:	6819      	ldr	r1, [r3, #0]
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2b10      	cmp	r3, #16
 800198e:	d009      	beq.n	80019a4 <HAL_ADC_ConfigChannel+0x140>
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2b11      	cmp	r3, #17
 8001996:	d102      	bne.n	800199e <HAL_ADC_ConfigChannel+0x13a>
 8001998:	2380      	movs	r3, #128	@ 0x80
 800199a:	03db      	lsls	r3, r3, #15
 800199c:	e004      	b.n	80019a8 <HAL_ADC_ConfigChannel+0x144>
 800199e:	2380      	movs	r3, #128	@ 0x80
 80019a0:	045b      	lsls	r3, r3, #17
 80019a2:	e001      	b.n	80019a8 <HAL_ADC_ConfigChannel+0x144>
 80019a4:	2380      	movs	r3, #128	@ 0x80
 80019a6:	041b      	lsls	r3, r3, #16
 80019a8:	4a2f      	ldr	r2, [pc, #188]	@ (8001a68 <HAL_ADC_ConfigChannel+0x204>)
 80019aa:	430b      	orrs	r3, r1
 80019ac:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2b10      	cmp	r3, #16
 80019b4:	d14a      	bne.n	8001a4c <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80019b6:	4b2d      	ldr	r3, [pc, #180]	@ (8001a6c <HAL_ADC_ConfigChannel+0x208>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	492d      	ldr	r1, [pc, #180]	@ (8001a70 <HAL_ADC_ConfigChannel+0x20c>)
 80019bc:	0018      	movs	r0, r3
 80019be:	f7fe fbb5 	bl	800012c <__udivsi3>
 80019c2:	0003      	movs	r3, r0
 80019c4:	001a      	movs	r2, r3
 80019c6:	0013      	movs	r3, r2
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	189b      	adds	r3, r3, r2
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80019d0:	e002      	b.n	80019d8 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	3b01      	subs	r3, #1
 80019d6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1f9      	bne.n	80019d2 <HAL_ADC_ConfigChannel+0x16e>
 80019de:	e035      	b.n	8001a4c <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2101      	movs	r1, #1
 80019ec:	4099      	lsls	r1, r3
 80019ee:	000b      	movs	r3, r1
 80019f0:	43d9      	mvns	r1, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	400a      	ands	r2, r1
 80019f8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2b10      	cmp	r3, #16
 8001a00:	d007      	beq.n	8001a12 <HAL_ADC_ConfigChannel+0x1ae>
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2b11      	cmp	r3, #17
 8001a08:	d003      	beq.n	8001a12 <HAL_ADC_ConfigChannel+0x1ae>
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2b12      	cmp	r3, #18
 8001a10:	d11c      	bne.n	8001a4c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001a12:	4b15      	ldr	r3, [pc, #84]	@ (8001a68 <HAL_ADC_ConfigChannel+0x204>)
 8001a14:	6819      	ldr	r1, [r3, #0]
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2b10      	cmp	r3, #16
 8001a1c:	d007      	beq.n	8001a2e <HAL_ADC_ConfigChannel+0x1ca>
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2b11      	cmp	r3, #17
 8001a24:	d101      	bne.n	8001a2a <HAL_ADC_ConfigChannel+0x1c6>
 8001a26:	4b13      	ldr	r3, [pc, #76]	@ (8001a74 <HAL_ADC_ConfigChannel+0x210>)
 8001a28:	e002      	b.n	8001a30 <HAL_ADC_ConfigChannel+0x1cc>
 8001a2a:	4b13      	ldr	r3, [pc, #76]	@ (8001a78 <HAL_ADC_ConfigChannel+0x214>)
 8001a2c:	e000      	b.n	8001a30 <HAL_ADC_ConfigChannel+0x1cc>
 8001a2e:	4b13      	ldr	r3, [pc, #76]	@ (8001a7c <HAL_ADC_ConfigChannel+0x218>)
 8001a30:	4a0d      	ldr	r2, [pc, #52]	@ (8001a68 <HAL_ADC_ConfigChannel+0x204>)
 8001a32:	400b      	ands	r3, r1
 8001a34:	6013      	str	r3, [r2, #0]
 8001a36:	e009      	b.n	8001a4c <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a3c:	2220      	movs	r2, #32
 8001a3e:	431a      	orrs	r2, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001a44:	230f      	movs	r3, #15
 8001a46:	18fb      	adds	r3, r7, r3
 8001a48:	2201      	movs	r2, #1
 8001a4a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2234      	movs	r2, #52	@ 0x34
 8001a50:	2100      	movs	r1, #0
 8001a52:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001a54:	230f      	movs	r3, #15
 8001a56:	18fb      	adds	r3, r7, r3
 8001a58:	781b      	ldrb	r3, [r3, #0]
}
 8001a5a:	0018      	movs	r0, r3
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	b004      	add	sp, #16
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	46c0      	nop			@ (mov r8, r8)
 8001a64:	00001001 	.word	0x00001001
 8001a68:	40012708 	.word	0x40012708
 8001a6c:	20000008 	.word	0x20000008
 8001a70:	000f4240 	.word	0x000f4240
 8001a74:	ffbfffff 	.word	0xffbfffff
 8001a78:	feffffff 	.word	0xfeffffff
 8001a7c:	ff7fffff 	.word	0xff7fffff

08001a80 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	2203      	movs	r2, #3
 8001a98:	4013      	ands	r3, r2
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d112      	bne.n	8001ac4 <ADC_Enable+0x44>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d009      	beq.n	8001ac0 <ADC_Enable+0x40>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	68da      	ldr	r2, [r3, #12]
 8001ab2:	2380      	movs	r3, #128	@ 0x80
 8001ab4:	021b      	lsls	r3, r3, #8
 8001ab6:	401a      	ands	r2, r3
 8001ab8:	2380      	movs	r3, #128	@ 0x80
 8001aba:	021b      	lsls	r3, r3, #8
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d101      	bne.n	8001ac4 <ADC_Enable+0x44>
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e000      	b.n	8001ac6 <ADC_Enable+0x46>
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d152      	bne.n	8001b70 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	4a2a      	ldr	r2, [pc, #168]	@ (8001b7c <ADC_Enable+0xfc>)
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	d00d      	beq.n	8001af2 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ada:	2210      	movs	r2, #16
 8001adc:	431a      	orrs	r2, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	639a      	str	r2, [r3, #56]	@ 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	431a      	orrs	r2, r3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e03f      	b.n	8001b72 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	689a      	ldr	r2, [r3, #8]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2101      	movs	r1, #1
 8001afe:	430a      	orrs	r2, r1
 8001b00:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b02:	4b1f      	ldr	r3, [pc, #124]	@ (8001b80 <ADC_Enable+0x100>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	491f      	ldr	r1, [pc, #124]	@ (8001b84 <ADC_Enable+0x104>)
 8001b08:	0018      	movs	r0, r3
 8001b0a:	f7fe fb0f 	bl	800012c <__udivsi3>
 8001b0e:	0003      	movs	r3, r0
 8001b10:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001b12:	e002      	b.n	8001b1a <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	3b01      	subs	r3, #1
 8001b18:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d1f9      	bne.n	8001b14 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001b20:	f7ff fcbc 	bl	800149c <HAL_GetTick>
 8001b24:	0003      	movs	r3, r0
 8001b26:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001b28:	e01b      	b.n	8001b62 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001b2a:	f7ff fcb7 	bl	800149c <HAL_GetTick>
 8001b2e:	0002      	movs	r2, r0
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d914      	bls.n	8001b62 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	4013      	ands	r3, r2
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d00d      	beq.n	8001b62 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b4a:	2210      	movs	r2, #16
 8001b4c:	431a      	orrs	r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b56:	2201      	movs	r2, #1
 8001b58:	431a      	orrs	r2, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e007      	b.n	8001b72 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d1dc      	bne.n	8001b2a <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	0018      	movs	r0, r3
 8001b74:	46bd      	mov	sp, r7
 8001b76:	b004      	add	sp, #16
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	46c0      	nop			@ (mov r8, r8)
 8001b7c:	80000017 	.word	0x80000017
 8001b80:	20000008 	.word	0x20000008
 8001b84:	000f4240 	.word	0x000f4240

08001b88 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b94:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b9a:	2250      	movs	r2, #80	@ 0x50
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	d140      	bne.n	8001c22 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ba4:	2280      	movs	r2, #128	@ 0x80
 8001ba6:	0092      	lsls	r2, r2, #2
 8001ba8:	431a      	orrs	r2, r3
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	68da      	ldr	r2, [r3, #12]
 8001bb4:	23c0      	movs	r3, #192	@ 0xc0
 8001bb6:	011b      	lsls	r3, r3, #4
 8001bb8:	4013      	ands	r3, r2
 8001bba:	d12d      	bne.n	8001c18 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d129      	bne.n	8001c18 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2208      	movs	r2, #8
 8001bcc:	4013      	ands	r3, r2
 8001bce:	2b08      	cmp	r3, #8
 8001bd0:	d122      	bne.n	8001c18 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	2204      	movs	r2, #4
 8001bda:	4013      	ands	r3, r2
 8001bdc:	d110      	bne.n	8001c00 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	685a      	ldr	r2, [r3, #4]
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	210c      	movs	r1, #12
 8001bea:	438a      	bics	r2, r1
 8001bec:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bf2:	4a11      	ldr	r2, [pc, #68]	@ (8001c38 <ADC_DMAConvCplt+0xb0>)
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	431a      	orrs	r2, r3
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	639a      	str	r2, [r3, #56]	@ 0x38
 8001bfe:	e00b      	b.n	8001c18 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c04:	2220      	movs	r2, #32
 8001c06:	431a      	orrs	r2, r3
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	639a      	str	r2, [r3, #56]	@ 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c10:	2201      	movs	r2, #1
 8001c12:	431a      	orrs	r2, r3
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	0018      	movs	r0, r3
 8001c1c:	f7ff fe0a 	bl	8001834 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8001c20:	e005      	b.n	8001c2e <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	0010      	movs	r0, r2
 8001c2c:	4798      	blx	r3
}
 8001c2e:	46c0      	nop			@ (mov r8, r8)
 8001c30:	46bd      	mov	sp, r7
 8001c32:	b004      	add	sp, #16
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	46c0      	nop			@ (mov r8, r8)
 8001c38:	fffffefe 	.word	0xfffffefe

08001c3c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c48:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	0018      	movs	r0, r3
 8001c4e:	f7ff fdf9 	bl	8001844 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001c52:	46c0      	nop			@ (mov r8, r8)
 8001c54:	46bd      	mov	sp, r7
 8001c56:	b004      	add	sp, #16
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b084      	sub	sp, #16
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c66:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c6c:	2240      	movs	r2, #64	@ 0x40
 8001c6e:	431a      	orrs	r2, r3
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c78:	2204      	movs	r2, #4
 8001c7a:	431a      	orrs	r2, r3
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	63da      	str	r2, [r3, #60]	@ 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	0018      	movs	r0, r3
 8001c84:	f7ff fde6 	bl	8001854 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001c88:	46c0      	nop			@ (mov r8, r8)
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	b004      	add	sp, #16
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	0002      	movs	r2, r0
 8001c98:	1dfb      	adds	r3, r7, #7
 8001c9a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001c9c:	1dfb      	adds	r3, r7, #7
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	2b7f      	cmp	r3, #127	@ 0x7f
 8001ca2:	d809      	bhi.n	8001cb8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ca4:	1dfb      	adds	r3, r7, #7
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	001a      	movs	r2, r3
 8001caa:	231f      	movs	r3, #31
 8001cac:	401a      	ands	r2, r3
 8001cae:	4b04      	ldr	r3, [pc, #16]	@ (8001cc0 <__NVIC_EnableIRQ+0x30>)
 8001cb0:	2101      	movs	r1, #1
 8001cb2:	4091      	lsls	r1, r2
 8001cb4:	000a      	movs	r2, r1
 8001cb6:	601a      	str	r2, [r3, #0]
  }
}
 8001cb8:	46c0      	nop			@ (mov r8, r8)
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	b002      	add	sp, #8
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	e000e100 	.word	0xe000e100

08001cc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cc4:	b590      	push	{r4, r7, lr}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	0002      	movs	r2, r0
 8001ccc:	6039      	str	r1, [r7, #0]
 8001cce:	1dfb      	adds	r3, r7, #7
 8001cd0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001cd2:	1dfb      	adds	r3, r7, #7
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	2b7f      	cmp	r3, #127	@ 0x7f
 8001cd8:	d828      	bhi.n	8001d2c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cda:	4a2f      	ldr	r2, [pc, #188]	@ (8001d98 <__NVIC_SetPriority+0xd4>)
 8001cdc:	1dfb      	adds	r3, r7, #7
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	b25b      	sxtb	r3, r3
 8001ce2:	089b      	lsrs	r3, r3, #2
 8001ce4:	33c0      	adds	r3, #192	@ 0xc0
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	589b      	ldr	r3, [r3, r2]
 8001cea:	1dfa      	adds	r2, r7, #7
 8001cec:	7812      	ldrb	r2, [r2, #0]
 8001cee:	0011      	movs	r1, r2
 8001cf0:	2203      	movs	r2, #3
 8001cf2:	400a      	ands	r2, r1
 8001cf4:	00d2      	lsls	r2, r2, #3
 8001cf6:	21ff      	movs	r1, #255	@ 0xff
 8001cf8:	4091      	lsls	r1, r2
 8001cfa:	000a      	movs	r2, r1
 8001cfc:	43d2      	mvns	r2, r2
 8001cfe:	401a      	ands	r2, r3
 8001d00:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	019b      	lsls	r3, r3, #6
 8001d06:	22ff      	movs	r2, #255	@ 0xff
 8001d08:	401a      	ands	r2, r3
 8001d0a:	1dfb      	adds	r3, r7, #7
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	0018      	movs	r0, r3
 8001d10:	2303      	movs	r3, #3
 8001d12:	4003      	ands	r3, r0
 8001d14:	00db      	lsls	r3, r3, #3
 8001d16:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d18:	481f      	ldr	r0, [pc, #124]	@ (8001d98 <__NVIC_SetPriority+0xd4>)
 8001d1a:	1dfb      	adds	r3, r7, #7
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	b25b      	sxtb	r3, r3
 8001d20:	089b      	lsrs	r3, r3, #2
 8001d22:	430a      	orrs	r2, r1
 8001d24:	33c0      	adds	r3, #192	@ 0xc0
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001d2a:	e031      	b.n	8001d90 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d2c:	4a1b      	ldr	r2, [pc, #108]	@ (8001d9c <__NVIC_SetPriority+0xd8>)
 8001d2e:	1dfb      	adds	r3, r7, #7
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	0019      	movs	r1, r3
 8001d34:	230f      	movs	r3, #15
 8001d36:	400b      	ands	r3, r1
 8001d38:	3b08      	subs	r3, #8
 8001d3a:	089b      	lsrs	r3, r3, #2
 8001d3c:	3306      	adds	r3, #6
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	18d3      	adds	r3, r2, r3
 8001d42:	3304      	adds	r3, #4
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	1dfa      	adds	r2, r7, #7
 8001d48:	7812      	ldrb	r2, [r2, #0]
 8001d4a:	0011      	movs	r1, r2
 8001d4c:	2203      	movs	r2, #3
 8001d4e:	400a      	ands	r2, r1
 8001d50:	00d2      	lsls	r2, r2, #3
 8001d52:	21ff      	movs	r1, #255	@ 0xff
 8001d54:	4091      	lsls	r1, r2
 8001d56:	000a      	movs	r2, r1
 8001d58:	43d2      	mvns	r2, r2
 8001d5a:	401a      	ands	r2, r3
 8001d5c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	019b      	lsls	r3, r3, #6
 8001d62:	22ff      	movs	r2, #255	@ 0xff
 8001d64:	401a      	ands	r2, r3
 8001d66:	1dfb      	adds	r3, r7, #7
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	0018      	movs	r0, r3
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	4003      	ands	r3, r0
 8001d70:	00db      	lsls	r3, r3, #3
 8001d72:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d74:	4809      	ldr	r0, [pc, #36]	@ (8001d9c <__NVIC_SetPriority+0xd8>)
 8001d76:	1dfb      	adds	r3, r7, #7
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	001c      	movs	r4, r3
 8001d7c:	230f      	movs	r3, #15
 8001d7e:	4023      	ands	r3, r4
 8001d80:	3b08      	subs	r3, #8
 8001d82:	089b      	lsrs	r3, r3, #2
 8001d84:	430a      	orrs	r2, r1
 8001d86:	3306      	adds	r3, #6
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	18c3      	adds	r3, r0, r3
 8001d8c:	3304      	adds	r3, #4
 8001d8e:	601a      	str	r2, [r3, #0]
}
 8001d90:	46c0      	nop			@ (mov r8, r8)
 8001d92:	46bd      	mov	sp, r7
 8001d94:	b003      	add	sp, #12
 8001d96:	bd90      	pop	{r4, r7, pc}
 8001d98:	e000e100 	.word	0xe000e100
 8001d9c:	e000ed00 	.word	0xe000ed00

08001da0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	1e5a      	subs	r2, r3, #1
 8001dac:	2380      	movs	r3, #128	@ 0x80
 8001dae:	045b      	lsls	r3, r3, #17
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d301      	bcc.n	8001db8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001db4:	2301      	movs	r3, #1
 8001db6:	e010      	b.n	8001dda <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001db8:	4b0a      	ldr	r3, [pc, #40]	@ (8001de4 <SysTick_Config+0x44>)
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	3a01      	subs	r2, #1
 8001dbe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	425b      	negs	r3, r3
 8001dc4:	2103      	movs	r1, #3
 8001dc6:	0018      	movs	r0, r3
 8001dc8:	f7ff ff7c 	bl	8001cc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dcc:	4b05      	ldr	r3, [pc, #20]	@ (8001de4 <SysTick_Config+0x44>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dd2:	4b04      	ldr	r3, [pc, #16]	@ (8001de4 <SysTick_Config+0x44>)
 8001dd4:	2207      	movs	r2, #7
 8001dd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	0018      	movs	r0, r3
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	b002      	add	sp, #8
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	46c0      	nop			@ (mov r8, r8)
 8001de4:	e000e010 	.word	0xe000e010

08001de8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	60b9      	str	r1, [r7, #8]
 8001df0:	607a      	str	r2, [r7, #4]
 8001df2:	210f      	movs	r1, #15
 8001df4:	187b      	adds	r3, r7, r1
 8001df6:	1c02      	adds	r2, r0, #0
 8001df8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001dfa:	68ba      	ldr	r2, [r7, #8]
 8001dfc:	187b      	adds	r3, r7, r1
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	b25b      	sxtb	r3, r3
 8001e02:	0011      	movs	r1, r2
 8001e04:	0018      	movs	r0, r3
 8001e06:	f7ff ff5d 	bl	8001cc4 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8001e0a:	46c0      	nop			@ (mov r8, r8)
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	b004      	add	sp, #16
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b082      	sub	sp, #8
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	0002      	movs	r2, r0
 8001e1a:	1dfb      	adds	r3, r7, #7
 8001e1c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e1e:	1dfb      	adds	r3, r7, #7
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	b25b      	sxtb	r3, r3
 8001e24:	0018      	movs	r0, r3
 8001e26:	f7ff ff33 	bl	8001c90 <__NVIC_EnableIRQ>
}
 8001e2a:	46c0      	nop			@ (mov r8, r8)
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	b002      	add	sp, #8
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b082      	sub	sp, #8
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	0018      	movs	r0, r3
 8001e3e:	f7ff ffaf 	bl	8001da0 <SysTick_Config>
 8001e42:	0003      	movs	r3, r0
}
 8001e44:	0018      	movs	r0, r3
 8001e46:	46bd      	mov	sp, r7
 8001e48:	b002      	add	sp, #8
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e54:	2300      	movs	r3, #0
 8001e56:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d101      	bne.n	8001e62 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e036      	b.n	8001ed0 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2221      	movs	r2, #33	@ 0x21
 8001e66:	2102      	movs	r1, #2
 8001e68:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	4a18      	ldr	r2, [pc, #96]	@ (8001ed8 <HAL_DMA_Init+0x8c>)
 8001e76:	4013      	ands	r3, r2
 8001e78:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001e82:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	695b      	ldr	r3, [r3, #20]
 8001e94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e9a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	69db      	ldr	r3, [r3, #28]
 8001ea0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001ea2:	68fa      	ldr	r2, [r7, #12]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	68fa      	ldr	r2, [r7, #12]
 8001eae:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	0018      	movs	r0, r3
 8001eb4:	f000 f9c4 	bl	8002240 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2221      	movs	r2, #33	@ 0x21
 8001ec2:	2101      	movs	r1, #1
 8001ec4:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2220      	movs	r2, #32
 8001eca:	2100      	movs	r1, #0
 8001ecc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001ece:	2300      	movs	r3, #0
}
 8001ed0:	0018      	movs	r0, r3
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	b004      	add	sp, #16
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	ffffc00f 	.word	0xffffc00f

08001edc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b086      	sub	sp, #24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	607a      	str	r2, [r7, #4]
 8001ee8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001eea:	2317      	movs	r3, #23
 8001eec:	18fb      	adds	r3, r7, r3
 8001eee:	2200      	movs	r2, #0
 8001ef0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2220      	movs	r2, #32
 8001ef6:	5c9b      	ldrb	r3, [r3, r2]
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d101      	bne.n	8001f00 <HAL_DMA_Start_IT+0x24>
 8001efc:	2302      	movs	r3, #2
 8001efe:	e04f      	b.n	8001fa0 <HAL_DMA_Start_IT+0xc4>
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2220      	movs	r2, #32
 8001f04:	2101      	movs	r1, #1
 8001f06:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2221      	movs	r2, #33	@ 0x21
 8001f0c:	5c9b      	ldrb	r3, [r3, r2]
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d13a      	bne.n	8001f8a <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2221      	movs	r2, #33	@ 0x21
 8001f18:	2102      	movs	r1, #2
 8001f1a:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2101      	movs	r1, #1
 8001f2e:	438a      	bics	r2, r1
 8001f30:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	68b9      	ldr	r1, [r7, #8]
 8001f38:	68f8      	ldr	r0, [r7, #12]
 8001f3a:	f000 f954 	bl	80021e6 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d008      	beq.n	8001f58 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	210e      	movs	r1, #14
 8001f52:	430a      	orrs	r2, r1
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	e00f      	b.n	8001f78 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	210a      	movs	r1, #10
 8001f64:	430a      	orrs	r2, r1
 8001f66:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2104      	movs	r1, #4
 8001f74:	438a      	bics	r2, r1
 8001f76:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2101      	movs	r1, #1
 8001f84:	430a      	orrs	r2, r1
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	e007      	b.n	8001f9a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2220      	movs	r2, #32
 8001f8e:	2100      	movs	r1, #0
 8001f90:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001f92:	2317      	movs	r3, #23
 8001f94:	18fb      	adds	r3, r7, r3
 8001f96:	2202      	movs	r2, #2
 8001f98:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8001f9a:	2317      	movs	r3, #23
 8001f9c:	18fb      	adds	r3, r7, r3
 8001f9e:	781b      	ldrb	r3, [r3, #0]
}
 8001fa0:	0018      	movs	r0, r3
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	b006      	add	sp, #24
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2221      	movs	r2, #33	@ 0x21
 8001fb4:	5c9b      	ldrb	r3, [r3, r2]
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d008      	beq.n	8001fce <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2204      	movs	r2, #4
 8001fc0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2220      	movs	r2, #32
 8001fc6:	2100      	movs	r1, #0
 8001fc8:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e020      	b.n	8002010 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	210e      	movs	r1, #14
 8001fda:	438a      	bics	r2, r1
 8001fdc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2101      	movs	r1, #1
 8001fea:	438a      	bics	r2, r1
 8001fec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	4091      	lsls	r1, r2
 8001ffa:	000a      	movs	r2, r1
 8001ffc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2221      	movs	r2, #33	@ 0x21
 8002002:	2101      	movs	r1, #1
 8002004:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2220      	movs	r2, #32
 800200a:	2100      	movs	r1, #0
 800200c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800200e:	2300      	movs	r3, #0
}
 8002010:	0018      	movs	r0, r3
 8002012:	46bd      	mov	sp, r7
 8002014:	b002      	add	sp, #8
 8002016:	bd80      	pop	{r7, pc}

08002018 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002020:	210f      	movs	r1, #15
 8002022:	187b      	adds	r3, r7, r1
 8002024:	2200      	movs	r2, #0
 8002026:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2221      	movs	r2, #33	@ 0x21
 800202c:	5c9b      	ldrb	r3, [r3, r2]
 800202e:	b2db      	uxtb	r3, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d006      	beq.n	8002042 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2204      	movs	r2, #4
 8002038:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 800203a:	187b      	adds	r3, r7, r1
 800203c:	2201      	movs	r2, #1
 800203e:	701a      	strb	r2, [r3, #0]
 8002040:	e028      	b.n	8002094 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	210e      	movs	r1, #14
 800204e:	438a      	bics	r2, r1
 8002050:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2101      	movs	r1, #1
 800205e:	438a      	bics	r2, r1
 8002060:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800206a:	2101      	movs	r1, #1
 800206c:	4091      	lsls	r1, r2
 800206e:	000a      	movs	r2, r1
 8002070:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2221      	movs	r2, #33	@ 0x21
 8002076:	2101      	movs	r1, #1
 8002078:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2220      	movs	r2, #32
 800207e:	2100      	movs	r1, #0
 8002080:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002086:	2b00      	cmp	r3, #0
 8002088:	d004      	beq.n	8002094 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	0010      	movs	r0, r2
 8002092:	4798      	blx	r3
    }
  }
  return status;
 8002094:	230f      	movs	r3, #15
 8002096:	18fb      	adds	r3, r7, r3
 8002098:	781b      	ldrb	r3, [r3, #0]
}
 800209a:	0018      	movs	r0, r3
 800209c:	46bd      	mov	sp, r7
 800209e:	b004      	add	sp, #16
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b084      	sub	sp, #16
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020be:	2204      	movs	r2, #4
 80020c0:	409a      	lsls	r2, r3
 80020c2:	0013      	movs	r3, r2
 80020c4:	68fa      	ldr	r2, [r7, #12]
 80020c6:	4013      	ands	r3, r2
 80020c8:	d024      	beq.n	8002114 <HAL_DMA_IRQHandler+0x72>
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	2204      	movs	r2, #4
 80020ce:	4013      	ands	r3, r2
 80020d0:	d020      	beq.n	8002114 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2220      	movs	r2, #32
 80020da:	4013      	ands	r3, r2
 80020dc:	d107      	bne.n	80020ee <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2104      	movs	r1, #4
 80020ea:	438a      	bics	r2, r1
 80020ec:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020f6:	2104      	movs	r1, #4
 80020f8:	4091      	lsls	r1, r2
 80020fa:	000a      	movs	r2, r1
 80020fc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002102:	2b00      	cmp	r3, #0
 8002104:	d100      	bne.n	8002108 <HAL_DMA_IRQHandler+0x66>
 8002106:	e06a      	b.n	80021de <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	0010      	movs	r0, r2
 8002110:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002112:	e064      	b.n	80021de <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002118:	2202      	movs	r2, #2
 800211a:	409a      	lsls	r2, r3
 800211c:	0013      	movs	r3, r2
 800211e:	68fa      	ldr	r2, [r7, #12]
 8002120:	4013      	ands	r3, r2
 8002122:	d02b      	beq.n	800217c <HAL_DMA_IRQHandler+0xda>
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	2202      	movs	r2, #2
 8002128:	4013      	ands	r3, r2
 800212a:	d027      	beq.n	800217c <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2220      	movs	r2, #32
 8002134:	4013      	ands	r3, r2
 8002136:	d10b      	bne.n	8002150 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	210a      	movs	r1, #10
 8002144:	438a      	bics	r2, r1
 8002146:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2221      	movs	r2, #33	@ 0x21
 800214c:	2101      	movs	r1, #1
 800214e:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002158:	2102      	movs	r1, #2
 800215a:	4091      	lsls	r1, r2
 800215c:	000a      	movs	r2, r1
 800215e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2220      	movs	r2, #32
 8002164:	2100      	movs	r1, #0
 8002166:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800216c:	2b00      	cmp	r3, #0
 800216e:	d036      	beq.n	80021de <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	0010      	movs	r0, r2
 8002178:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800217a:	e030      	b.n	80021de <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002180:	2208      	movs	r2, #8
 8002182:	409a      	lsls	r2, r3
 8002184:	0013      	movs	r3, r2
 8002186:	68fa      	ldr	r2, [r7, #12]
 8002188:	4013      	ands	r3, r2
 800218a:	d028      	beq.n	80021de <HAL_DMA_IRQHandler+0x13c>
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	2208      	movs	r2, #8
 8002190:	4013      	ands	r3, r2
 8002192:	d024      	beq.n	80021de <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	210e      	movs	r1, #14
 80021a0:	438a      	bics	r2, r1
 80021a2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021ac:	2101      	movs	r1, #1
 80021ae:	4091      	lsls	r1, r2
 80021b0:	000a      	movs	r2, r1
 80021b2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2201      	movs	r2, #1
 80021b8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2221      	movs	r2, #33	@ 0x21
 80021be:	2101      	movs	r1, #1
 80021c0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2220      	movs	r2, #32
 80021c6:	2100      	movs	r1, #0
 80021c8:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d005      	beq.n	80021de <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	0010      	movs	r0, r2
 80021da:	4798      	blx	r3
    }
  }
}
 80021dc:	e7ff      	b.n	80021de <HAL_DMA_IRQHandler+0x13c>
 80021de:	46c0      	nop			@ (mov r8, r8)
 80021e0:	46bd      	mov	sp, r7
 80021e2:	b004      	add	sp, #16
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b084      	sub	sp, #16
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	60f8      	str	r0, [r7, #12]
 80021ee:	60b9      	str	r1, [r7, #8]
 80021f0:	607a      	str	r2, [r7, #4]
 80021f2:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021fc:	2101      	movs	r1, #1
 80021fe:	4091      	lsls	r1, r2
 8002200:	000a      	movs	r2, r1
 8002202:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	683a      	ldr	r2, [r7, #0]
 800220a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	2b10      	cmp	r3, #16
 8002212:	d108      	bne.n	8002226 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68ba      	ldr	r2, [r7, #8]
 8002222:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002224:	e007      	b.n	8002236 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	68ba      	ldr	r2, [r7, #8]
 800222c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	60da      	str	r2, [r3, #12]
}
 8002236:	46c0      	nop			@ (mov r8, r8)
 8002238:	46bd      	mov	sp, r7
 800223a:	b004      	add	sp, #16
 800223c:	bd80      	pop	{r7, pc}
	...

08002240 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a08      	ldr	r2, [pc, #32]	@ (8002270 <DMA_CalcBaseAndBitshift+0x30>)
 800224e:	4694      	mov	ip, r2
 8002250:	4463      	add	r3, ip
 8002252:	2114      	movs	r1, #20
 8002254:	0018      	movs	r0, r3
 8002256:	f7fd ff69 	bl	800012c <__udivsi3>
 800225a:	0003      	movs	r3, r0
 800225c:	009a      	lsls	r2, r3, #2
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a03      	ldr	r2, [pc, #12]	@ (8002274 <DMA_CalcBaseAndBitshift+0x34>)
 8002266:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8002268:	46c0      	nop			@ (mov r8, r8)
 800226a:	46bd      	mov	sp, r7
 800226c:	b002      	add	sp, #8
 800226e:	bd80      	pop	{r7, pc}
 8002270:	bffdfff8 	.word	0xbffdfff8
 8002274:	40020000 	.word	0x40020000

08002278 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b086      	sub	sp, #24
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002282:	2300      	movs	r3, #0
 8002284:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002286:	e149      	b.n	800251c <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2101      	movs	r1, #1
 800228e:	697a      	ldr	r2, [r7, #20]
 8002290:	4091      	lsls	r1, r2
 8002292:	000a      	movs	r2, r1
 8002294:	4013      	ands	r3, r2
 8002296:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d100      	bne.n	80022a0 <HAL_GPIO_Init+0x28>
 800229e:	e13a      	b.n	8002516 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	2203      	movs	r2, #3
 80022a6:	4013      	ands	r3, r2
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d005      	beq.n	80022b8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	2203      	movs	r2, #3
 80022b2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d130      	bne.n	800231a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	2203      	movs	r2, #3
 80022c4:	409a      	lsls	r2, r3
 80022c6:	0013      	movs	r3, r2
 80022c8:	43da      	mvns	r2, r3
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	4013      	ands	r3, r2
 80022ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	68da      	ldr	r2, [r3, #12]
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	409a      	lsls	r2, r3
 80022da:	0013      	movs	r3, r2
 80022dc:	693a      	ldr	r2, [r7, #16]
 80022de:	4313      	orrs	r3, r2
 80022e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	693a      	ldr	r2, [r7, #16]
 80022e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022ee:	2201      	movs	r2, #1
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	409a      	lsls	r2, r3
 80022f4:	0013      	movs	r3, r2
 80022f6:	43da      	mvns	r2, r3
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	4013      	ands	r3, r2
 80022fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	091b      	lsrs	r3, r3, #4
 8002304:	2201      	movs	r2, #1
 8002306:	401a      	ands	r2, r3
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	409a      	lsls	r2, r3
 800230c:	0013      	movs	r3, r2
 800230e:	693a      	ldr	r2, [r7, #16]
 8002310:	4313      	orrs	r3, r2
 8002312:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	2203      	movs	r2, #3
 8002320:	4013      	ands	r3, r2
 8002322:	2b03      	cmp	r3, #3
 8002324:	d017      	beq.n	8002356 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	2203      	movs	r2, #3
 8002332:	409a      	lsls	r2, r3
 8002334:	0013      	movs	r3, r2
 8002336:	43da      	mvns	r2, r3
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	4013      	ands	r3, r2
 800233c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	689a      	ldr	r2, [r3, #8]
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	409a      	lsls	r2, r3
 8002348:	0013      	movs	r3, r2
 800234a:	693a      	ldr	r2, [r7, #16]
 800234c:	4313      	orrs	r3, r2
 800234e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	693a      	ldr	r2, [r7, #16]
 8002354:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	2203      	movs	r2, #3
 800235c:	4013      	ands	r3, r2
 800235e:	2b02      	cmp	r3, #2
 8002360:	d123      	bne.n	80023aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	08da      	lsrs	r2, r3, #3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	3208      	adds	r2, #8
 800236a:	0092      	lsls	r2, r2, #2
 800236c:	58d3      	ldr	r3, [r2, r3]
 800236e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	2207      	movs	r2, #7
 8002374:	4013      	ands	r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	220f      	movs	r2, #15
 800237a:	409a      	lsls	r2, r3
 800237c:	0013      	movs	r3, r2
 800237e:	43da      	mvns	r2, r3
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	4013      	ands	r3, r2
 8002384:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	691a      	ldr	r2, [r3, #16]
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	2107      	movs	r1, #7
 800238e:	400b      	ands	r3, r1
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	409a      	lsls	r2, r3
 8002394:	0013      	movs	r3, r2
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	4313      	orrs	r3, r2
 800239a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	08da      	lsrs	r2, r3, #3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	3208      	adds	r2, #8
 80023a4:	0092      	lsls	r2, r2, #2
 80023a6:	6939      	ldr	r1, [r7, #16]
 80023a8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	2203      	movs	r2, #3
 80023b6:	409a      	lsls	r2, r3
 80023b8:	0013      	movs	r3, r2
 80023ba:	43da      	mvns	r2, r3
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	4013      	ands	r3, r2
 80023c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	2203      	movs	r2, #3
 80023c8:	401a      	ands	r2, r3
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	409a      	lsls	r2, r3
 80023d0:	0013      	movs	r3, r2
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	685a      	ldr	r2, [r3, #4]
 80023e2:	23c0      	movs	r3, #192	@ 0xc0
 80023e4:	029b      	lsls	r3, r3, #10
 80023e6:	4013      	ands	r3, r2
 80023e8:	d100      	bne.n	80023ec <HAL_GPIO_Init+0x174>
 80023ea:	e094      	b.n	8002516 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ec:	4b51      	ldr	r3, [pc, #324]	@ (8002534 <HAL_GPIO_Init+0x2bc>)
 80023ee:	699a      	ldr	r2, [r3, #24]
 80023f0:	4b50      	ldr	r3, [pc, #320]	@ (8002534 <HAL_GPIO_Init+0x2bc>)
 80023f2:	2101      	movs	r1, #1
 80023f4:	430a      	orrs	r2, r1
 80023f6:	619a      	str	r2, [r3, #24]
 80023f8:	4b4e      	ldr	r3, [pc, #312]	@ (8002534 <HAL_GPIO_Init+0x2bc>)
 80023fa:	699b      	ldr	r3, [r3, #24]
 80023fc:	2201      	movs	r2, #1
 80023fe:	4013      	ands	r3, r2
 8002400:	60bb      	str	r3, [r7, #8]
 8002402:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002404:	4a4c      	ldr	r2, [pc, #304]	@ (8002538 <HAL_GPIO_Init+0x2c0>)
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	089b      	lsrs	r3, r3, #2
 800240a:	3302      	adds	r3, #2
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	589b      	ldr	r3, [r3, r2]
 8002410:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	2203      	movs	r2, #3
 8002416:	4013      	ands	r3, r2
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	220f      	movs	r2, #15
 800241c:	409a      	lsls	r2, r3
 800241e:	0013      	movs	r3, r2
 8002420:	43da      	mvns	r2, r3
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	4013      	ands	r3, r2
 8002426:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	2390      	movs	r3, #144	@ 0x90
 800242c:	05db      	lsls	r3, r3, #23
 800242e:	429a      	cmp	r2, r3
 8002430:	d00d      	beq.n	800244e <HAL_GPIO_Init+0x1d6>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a41      	ldr	r2, [pc, #260]	@ (800253c <HAL_GPIO_Init+0x2c4>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d007      	beq.n	800244a <HAL_GPIO_Init+0x1d2>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a40      	ldr	r2, [pc, #256]	@ (8002540 <HAL_GPIO_Init+0x2c8>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d101      	bne.n	8002446 <HAL_GPIO_Init+0x1ce>
 8002442:	2302      	movs	r3, #2
 8002444:	e004      	b.n	8002450 <HAL_GPIO_Init+0x1d8>
 8002446:	2305      	movs	r3, #5
 8002448:	e002      	b.n	8002450 <HAL_GPIO_Init+0x1d8>
 800244a:	2301      	movs	r3, #1
 800244c:	e000      	b.n	8002450 <HAL_GPIO_Init+0x1d8>
 800244e:	2300      	movs	r3, #0
 8002450:	697a      	ldr	r2, [r7, #20]
 8002452:	2103      	movs	r1, #3
 8002454:	400a      	ands	r2, r1
 8002456:	0092      	lsls	r2, r2, #2
 8002458:	4093      	lsls	r3, r2
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	4313      	orrs	r3, r2
 800245e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002460:	4935      	ldr	r1, [pc, #212]	@ (8002538 <HAL_GPIO_Init+0x2c0>)
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	089b      	lsrs	r3, r3, #2
 8002466:	3302      	adds	r3, #2
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	693a      	ldr	r2, [r7, #16]
 800246c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800246e:	4b35      	ldr	r3, [pc, #212]	@ (8002544 <HAL_GPIO_Init+0x2cc>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	43da      	mvns	r2, r3
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	4013      	ands	r3, r2
 800247c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	685a      	ldr	r2, [r3, #4]
 8002482:	2380      	movs	r3, #128	@ 0x80
 8002484:	035b      	lsls	r3, r3, #13
 8002486:	4013      	ands	r3, r2
 8002488:	d003      	beq.n	8002492 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	4313      	orrs	r3, r2
 8002490:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002492:	4b2c      	ldr	r3, [pc, #176]	@ (8002544 <HAL_GPIO_Init+0x2cc>)
 8002494:	693a      	ldr	r2, [r7, #16]
 8002496:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002498:	4b2a      	ldr	r3, [pc, #168]	@ (8002544 <HAL_GPIO_Init+0x2cc>)
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	43da      	mvns	r2, r3
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	4013      	ands	r3, r2
 80024a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685a      	ldr	r2, [r3, #4]
 80024ac:	2380      	movs	r3, #128	@ 0x80
 80024ae:	039b      	lsls	r3, r3, #14
 80024b0:	4013      	ands	r3, r2
 80024b2:	d003      	beq.n	80024bc <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80024bc:	4b21      	ldr	r3, [pc, #132]	@ (8002544 <HAL_GPIO_Init+0x2cc>)
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80024c2:	4b20      	ldr	r3, [pc, #128]	@ (8002544 <HAL_GPIO_Init+0x2cc>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	43da      	mvns	r2, r3
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	4013      	ands	r3, r2
 80024d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685a      	ldr	r2, [r3, #4]
 80024d6:	2380      	movs	r3, #128	@ 0x80
 80024d8:	029b      	lsls	r3, r3, #10
 80024da:	4013      	ands	r3, r2
 80024dc:	d003      	beq.n	80024e6 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80024e6:	4b17      	ldr	r3, [pc, #92]	@ (8002544 <HAL_GPIO_Init+0x2cc>)
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80024ec:	4b15      	ldr	r3, [pc, #84]	@ (8002544 <HAL_GPIO_Init+0x2cc>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	43da      	mvns	r2, r3
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	4013      	ands	r3, r2
 80024fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685a      	ldr	r2, [r3, #4]
 8002500:	2380      	movs	r3, #128	@ 0x80
 8002502:	025b      	lsls	r3, r3, #9
 8002504:	4013      	ands	r3, r2
 8002506:	d003      	beq.n	8002510 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8002508:	693a      	ldr	r2, [r7, #16]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	4313      	orrs	r3, r2
 800250e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002510:	4b0c      	ldr	r3, [pc, #48]	@ (8002544 <HAL_GPIO_Init+0x2cc>)
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	3301      	adds	r3, #1
 800251a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	40da      	lsrs	r2, r3
 8002524:	1e13      	subs	r3, r2, #0
 8002526:	d000      	beq.n	800252a <HAL_GPIO_Init+0x2b2>
 8002528:	e6ae      	b.n	8002288 <HAL_GPIO_Init+0x10>
  } 
}
 800252a:	46c0      	nop			@ (mov r8, r8)
 800252c:	46c0      	nop			@ (mov r8, r8)
 800252e:	46bd      	mov	sp, r7
 8002530:	b006      	add	sp, #24
 8002532:	bd80      	pop	{r7, pc}
 8002534:	40021000 	.word	0x40021000
 8002538:	40010000 	.word	0x40010000
 800253c:	48000400 	.word	0x48000400
 8002540:	48000800 	.word	0x48000800
 8002544:	40010400 	.word	0x40010400

08002548 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	0008      	movs	r0, r1
 8002552:	0011      	movs	r1, r2
 8002554:	1cbb      	adds	r3, r7, #2
 8002556:	1c02      	adds	r2, r0, #0
 8002558:	801a      	strh	r2, [r3, #0]
 800255a:	1c7b      	adds	r3, r7, #1
 800255c:	1c0a      	adds	r2, r1, #0
 800255e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002560:	1c7b      	adds	r3, r7, #1
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d004      	beq.n	8002572 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002568:	1cbb      	adds	r3, r7, #2
 800256a:	881a      	ldrh	r2, [r3, #0]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002570:	e003      	b.n	800257a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002572:	1cbb      	adds	r3, r7, #2
 8002574:	881a      	ldrh	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800257a:	46c0      	nop			@ (mov r8, r8)
 800257c:	46bd      	mov	sp, r7
 800257e:	b002      	add	sp, #8
 8002580:	bd80      	pop	{r7, pc}

08002582 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002582:	b580      	push	{r7, lr}
 8002584:	b084      	sub	sp, #16
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
 800258a:	000a      	movs	r2, r1
 800258c:	1cbb      	adds	r3, r7, #2
 800258e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	695b      	ldr	r3, [r3, #20]
 8002594:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002596:	1cbb      	adds	r3, r7, #2
 8002598:	881b      	ldrh	r3, [r3, #0]
 800259a:	68fa      	ldr	r2, [r7, #12]
 800259c:	4013      	ands	r3, r2
 800259e:	041a      	lsls	r2, r3, #16
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	43db      	mvns	r3, r3
 80025a4:	1cb9      	adds	r1, r7, #2
 80025a6:	8809      	ldrh	r1, [r1, #0]
 80025a8:	400b      	ands	r3, r1
 80025aa:	431a      	orrs	r2, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	619a      	str	r2, [r3, #24]
}
 80025b0:	46c0      	nop			@ (mov r8, r8)
 80025b2:	46bd      	mov	sp, r7
 80025b4:	b004      	add	sp, #16
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d101      	bne.n	80025ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e08f      	b.n	80026ea <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2241      	movs	r2, #65	@ 0x41
 80025ce:	5c9b      	ldrb	r3, [r3, r2]
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d107      	bne.n	80025e6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2240      	movs	r2, #64	@ 0x40
 80025da:	2100      	movs	r1, #0
 80025dc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	0018      	movs	r0, r3
 80025e2:	f7fd fff7 	bl	80005d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2241      	movs	r2, #65	@ 0x41
 80025ea:	2124      	movs	r1, #36	@ 0x24
 80025ec:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2101      	movs	r1, #1
 80025fa:	438a      	bics	r2, r1
 80025fc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685a      	ldr	r2, [r3, #4]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	493b      	ldr	r1, [pc, #236]	@ (80026f4 <HAL_I2C_Init+0x13c>)
 8002608:	400a      	ands	r2, r1
 800260a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	689a      	ldr	r2, [r3, #8]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4938      	ldr	r1, [pc, #224]	@ (80026f8 <HAL_I2C_Init+0x140>)
 8002618:	400a      	ands	r2, r1
 800261a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	2b01      	cmp	r3, #1
 8002622:	d108      	bne.n	8002636 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	689a      	ldr	r2, [r3, #8]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2180      	movs	r1, #128	@ 0x80
 800262e:	0209      	lsls	r1, r1, #8
 8002630:	430a      	orrs	r2, r1
 8002632:	609a      	str	r2, [r3, #8]
 8002634:	e007      	b.n	8002646 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	689a      	ldr	r2, [r3, #8]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2184      	movs	r1, #132	@ 0x84
 8002640:	0209      	lsls	r1, r1, #8
 8002642:	430a      	orrs	r2, r1
 8002644:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	2b02      	cmp	r3, #2
 800264c:	d109      	bne.n	8002662 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	685a      	ldr	r2, [r3, #4]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2180      	movs	r1, #128	@ 0x80
 800265a:	0109      	lsls	r1, r1, #4
 800265c:	430a      	orrs	r2, r1
 800265e:	605a      	str	r2, [r3, #4]
 8002660:	e007      	b.n	8002672 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	685a      	ldr	r2, [r3, #4]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4923      	ldr	r1, [pc, #140]	@ (80026fc <HAL_I2C_Init+0x144>)
 800266e:	400a      	ands	r2, r1
 8002670:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	685a      	ldr	r2, [r3, #4]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4920      	ldr	r1, [pc, #128]	@ (8002700 <HAL_I2C_Init+0x148>)
 800267e:	430a      	orrs	r2, r1
 8002680:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	68da      	ldr	r2, [r3, #12]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	491a      	ldr	r1, [pc, #104]	@ (80026f8 <HAL_I2C_Init+0x140>)
 800268e:	400a      	ands	r2, r1
 8002690:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	691a      	ldr	r2, [r3, #16]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	695b      	ldr	r3, [r3, #20]
 800269a:	431a      	orrs	r2, r3
 800269c:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	430a      	orrs	r2, r1
 80026aa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	69d9      	ldr	r1, [r3, #28]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a1a      	ldr	r2, [r3, #32]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	430a      	orrs	r2, r1
 80026ba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2101      	movs	r1, #1
 80026c8:	430a      	orrs	r2, r1
 80026ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2241      	movs	r2, #65	@ 0x41
 80026d6:	2120      	movs	r1, #32
 80026d8:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2242      	movs	r2, #66	@ 0x42
 80026e4:	2100      	movs	r1, #0
 80026e6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	0018      	movs	r0, r3
 80026ec:	46bd      	mov	sp, r7
 80026ee:	b002      	add	sp, #8
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	46c0      	nop			@ (mov r8, r8)
 80026f4:	f0ffffff 	.word	0xf0ffffff
 80026f8:	ffff7fff 	.word	0xffff7fff
 80026fc:	fffff7ff 	.word	0xfffff7ff
 8002700:	02008000 	.word	0x02008000

08002704 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2241      	movs	r2, #65	@ 0x41
 8002712:	5c9b      	ldrb	r3, [r3, r2]
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b20      	cmp	r3, #32
 8002718:	d138      	bne.n	800278c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2240      	movs	r2, #64	@ 0x40
 800271e:	5c9b      	ldrb	r3, [r3, r2]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d101      	bne.n	8002728 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002724:	2302      	movs	r3, #2
 8002726:	e032      	b.n	800278e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2240      	movs	r2, #64	@ 0x40
 800272c:	2101      	movs	r1, #1
 800272e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2241      	movs	r2, #65	@ 0x41
 8002734:	2124      	movs	r1, #36	@ 0x24
 8002736:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2101      	movs	r1, #1
 8002744:	438a      	bics	r2, r1
 8002746:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4911      	ldr	r1, [pc, #68]	@ (8002798 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002754:	400a      	ands	r2, r1
 8002756:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	6819      	ldr	r1, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	683a      	ldr	r2, [r7, #0]
 8002764:	430a      	orrs	r2, r1
 8002766:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2101      	movs	r1, #1
 8002774:	430a      	orrs	r2, r1
 8002776:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2241      	movs	r2, #65	@ 0x41
 800277c:	2120      	movs	r1, #32
 800277e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2240      	movs	r2, #64	@ 0x40
 8002784:	2100      	movs	r1, #0
 8002786:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002788:	2300      	movs	r3, #0
 800278a:	e000      	b.n	800278e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800278c:	2302      	movs	r3, #2
  }
}
 800278e:	0018      	movs	r0, r3
 8002790:	46bd      	mov	sp, r7
 8002792:	b002      	add	sp, #8
 8002794:	bd80      	pop	{r7, pc}
 8002796:	46c0      	nop			@ (mov r8, r8)
 8002798:	ffffefff 	.word	0xffffefff

0800279c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2241      	movs	r2, #65	@ 0x41
 80027aa:	5c9b      	ldrb	r3, [r3, r2]
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	2b20      	cmp	r3, #32
 80027b0:	d139      	bne.n	8002826 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2240      	movs	r2, #64	@ 0x40
 80027b6:	5c9b      	ldrb	r3, [r3, r2]
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d101      	bne.n	80027c0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80027bc:	2302      	movs	r3, #2
 80027be:	e033      	b.n	8002828 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2240      	movs	r2, #64	@ 0x40
 80027c4:	2101      	movs	r1, #1
 80027c6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2241      	movs	r2, #65	@ 0x41
 80027cc:	2124      	movs	r1, #36	@ 0x24
 80027ce:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2101      	movs	r1, #1
 80027dc:	438a      	bics	r2, r1
 80027de:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	4a11      	ldr	r2, [pc, #68]	@ (8002830 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80027ec:	4013      	ands	r3, r2
 80027ee:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	021b      	lsls	r3, r3, #8
 80027f4:	68fa      	ldr	r2, [r7, #12]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2101      	movs	r1, #1
 800280e:	430a      	orrs	r2, r1
 8002810:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2241      	movs	r2, #65	@ 0x41
 8002816:	2120      	movs	r1, #32
 8002818:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2240      	movs	r2, #64	@ 0x40
 800281e:	2100      	movs	r1, #0
 8002820:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002822:	2300      	movs	r3, #0
 8002824:	e000      	b.n	8002828 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002826:	2302      	movs	r3, #2
  }
}
 8002828:	0018      	movs	r0, r3
 800282a:	46bd      	mov	sp, r7
 800282c:	b004      	add	sp, #16
 800282e:	bd80      	pop	{r7, pc}
 8002830:	fffff0ff 	.word	0xfffff0ff

08002834 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002834:	b590      	push	{r4, r7, lr}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d101      	bne.n	8002846 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e0e4      	b.n	8002a10 <HAL_PCD_Init+0x1dc>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a73      	ldr	r2, [pc, #460]	@ (8002a18 <HAL_PCD_Init+0x1e4>)
 800284a:	5c9b      	ldrb	r3, [r3, r2]
 800284c:	b2db      	uxtb	r3, r3
 800284e:	2b00      	cmp	r3, #0
 8002850:	d108      	bne.n	8002864 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	23a4      	movs	r3, #164	@ 0xa4
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	2100      	movs	r1, #0
 800285a:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	0018      	movs	r0, r3
 8002860:	f7fe fd60 	bl	8001324 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	4a6c      	ldr	r2, [pc, #432]	@ (8002a18 <HAL_PCD_Init+0x1e4>)
 8002868:	2103      	movs	r1, #3
 800286a:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	0018      	movs	r0, r3
 8002872:	f003 f93d 	bl	8005af0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002876:	230f      	movs	r3, #15
 8002878:	18fb      	adds	r3, r7, r3
 800287a:	2200      	movs	r2, #0
 800287c:	701a      	strb	r2, [r3, #0]
 800287e:	e047      	b.n	8002910 <HAL_PCD_Init+0xdc>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002880:	200f      	movs	r0, #15
 8002882:	183b      	adds	r3, r7, r0
 8002884:	781a      	ldrb	r2, [r3, #0]
 8002886:	6879      	ldr	r1, [r7, #4]
 8002888:	0013      	movs	r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	189b      	adds	r3, r3, r2
 800288e:	00db      	lsls	r3, r3, #3
 8002890:	18cb      	adds	r3, r1, r3
 8002892:	3311      	adds	r3, #17
 8002894:	2201      	movs	r2, #1
 8002896:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002898:	183b      	adds	r3, r7, r0
 800289a:	781a      	ldrb	r2, [r3, #0]
 800289c:	6879      	ldr	r1, [r7, #4]
 800289e:	0013      	movs	r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	189b      	adds	r3, r3, r2
 80028a4:	00db      	lsls	r3, r3, #3
 80028a6:	18cb      	adds	r3, r1, r3
 80028a8:	3310      	adds	r3, #16
 80028aa:	183a      	adds	r2, r7, r0
 80028ac:	7812      	ldrb	r2, [r2, #0]
 80028ae:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80028b0:	183b      	adds	r3, r7, r0
 80028b2:	781a      	ldrb	r2, [r3, #0]
 80028b4:	6879      	ldr	r1, [r7, #4]
 80028b6:	0013      	movs	r3, r2
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	189b      	adds	r3, r3, r2
 80028bc:	00db      	lsls	r3, r3, #3
 80028be:	18cb      	adds	r3, r1, r3
 80028c0:	3313      	adds	r3, #19
 80028c2:	2200      	movs	r2, #0
 80028c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80028c6:	183b      	adds	r3, r7, r0
 80028c8:	781a      	ldrb	r2, [r3, #0]
 80028ca:	6879      	ldr	r1, [r7, #4]
 80028cc:	0013      	movs	r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	189b      	adds	r3, r3, r2
 80028d2:	00db      	lsls	r3, r3, #3
 80028d4:	18cb      	adds	r3, r1, r3
 80028d6:	3320      	adds	r3, #32
 80028d8:	2200      	movs	r2, #0
 80028da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80028dc:	183b      	adds	r3, r7, r0
 80028de:	781a      	ldrb	r2, [r3, #0]
 80028e0:	6879      	ldr	r1, [r7, #4]
 80028e2:	0013      	movs	r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	189b      	adds	r3, r3, r2
 80028e8:	00db      	lsls	r3, r3, #3
 80028ea:	18cb      	adds	r3, r1, r3
 80028ec:	3324      	adds	r3, #36	@ 0x24
 80028ee:	2200      	movs	r2, #0
 80028f0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80028f2:	183b      	adds	r3, r7, r0
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	6879      	ldr	r1, [r7, #4]
 80028f8:	1c5a      	adds	r2, r3, #1
 80028fa:	0013      	movs	r3, r2
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	189b      	adds	r3, r3, r2
 8002900:	00db      	lsls	r3, r3, #3
 8002902:	2200      	movs	r2, #0
 8002904:	505a      	str	r2, [r3, r1]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002906:	183b      	adds	r3, r7, r0
 8002908:	781a      	ldrb	r2, [r3, #0]
 800290a:	183b      	adds	r3, r7, r0
 800290c:	3201      	adds	r2, #1
 800290e:	701a      	strb	r2, [r3, #0]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	791b      	ldrb	r3, [r3, #4]
 8002914:	210f      	movs	r1, #15
 8002916:	187a      	adds	r2, r7, r1
 8002918:	7812      	ldrb	r2, [r2, #0]
 800291a:	429a      	cmp	r2, r3
 800291c:	d3b0      	bcc.n	8002880 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800291e:	187b      	adds	r3, r7, r1
 8002920:	2200      	movs	r2, #0
 8002922:	701a      	strb	r2, [r3, #0]
 8002924:	e056      	b.n	80029d4 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002926:	240f      	movs	r4, #15
 8002928:	193b      	adds	r3, r7, r4
 800292a:	781a      	ldrb	r2, [r3, #0]
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	2352      	movs	r3, #82	@ 0x52
 8002930:	33ff      	adds	r3, #255	@ 0xff
 8002932:	0019      	movs	r1, r3
 8002934:	0013      	movs	r3, r2
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	189b      	adds	r3, r3, r2
 800293a:	00db      	lsls	r3, r3, #3
 800293c:	18c3      	adds	r3, r0, r3
 800293e:	185b      	adds	r3, r3, r1
 8002940:	2200      	movs	r2, #0
 8002942:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002944:	193b      	adds	r3, r7, r4
 8002946:	781a      	ldrb	r2, [r3, #0]
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	23a8      	movs	r3, #168	@ 0xa8
 800294c:	0059      	lsls	r1, r3, #1
 800294e:	0013      	movs	r3, r2
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	189b      	adds	r3, r3, r2
 8002954:	00db      	lsls	r3, r3, #3
 8002956:	18c3      	adds	r3, r0, r3
 8002958:	185b      	adds	r3, r3, r1
 800295a:	193a      	adds	r2, r7, r4
 800295c:	7812      	ldrb	r2, [r2, #0]
 800295e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002960:	193b      	adds	r3, r7, r4
 8002962:	781a      	ldrb	r2, [r3, #0]
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	2354      	movs	r3, #84	@ 0x54
 8002968:	33ff      	adds	r3, #255	@ 0xff
 800296a:	0019      	movs	r1, r3
 800296c:	0013      	movs	r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	189b      	adds	r3, r3, r2
 8002972:	00db      	lsls	r3, r3, #3
 8002974:	18c3      	adds	r3, r0, r3
 8002976:	185b      	adds	r3, r3, r1
 8002978:	2200      	movs	r2, #0
 800297a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800297c:	193b      	adds	r3, r7, r4
 800297e:	781a      	ldrb	r2, [r3, #0]
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	23b0      	movs	r3, #176	@ 0xb0
 8002984:	0059      	lsls	r1, r3, #1
 8002986:	0013      	movs	r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	189b      	adds	r3, r3, r2
 800298c:	00db      	lsls	r3, r3, #3
 800298e:	18c3      	adds	r3, r0, r3
 8002990:	185b      	adds	r3, r3, r1
 8002992:	2200      	movs	r2, #0
 8002994:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002996:	193b      	adds	r3, r7, r4
 8002998:	781a      	ldrb	r2, [r3, #0]
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	23b2      	movs	r3, #178	@ 0xb2
 800299e:	0059      	lsls	r1, r3, #1
 80029a0:	0013      	movs	r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	189b      	adds	r3, r3, r2
 80029a6:	00db      	lsls	r3, r3, #3
 80029a8:	18c3      	adds	r3, r0, r3
 80029aa:	185b      	adds	r3, r3, r1
 80029ac:	2200      	movs	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80029b0:	193b      	adds	r3, r7, r4
 80029b2:	781a      	ldrb	r2, [r3, #0]
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	23b4      	movs	r3, #180	@ 0xb4
 80029b8:	0059      	lsls	r1, r3, #1
 80029ba:	0013      	movs	r3, r2
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	189b      	adds	r3, r3, r2
 80029c0:	00db      	lsls	r3, r3, #3
 80029c2:	18c3      	adds	r3, r0, r3
 80029c4:	185b      	adds	r3, r3, r1
 80029c6:	2200      	movs	r2, #0
 80029c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029ca:	193b      	adds	r3, r7, r4
 80029cc:	781a      	ldrb	r2, [r3, #0]
 80029ce:	193b      	adds	r3, r7, r4
 80029d0:	3201      	adds	r2, #1
 80029d2:	701a      	strb	r2, [r3, #0]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	791b      	ldrb	r3, [r3, #4]
 80029d8:	220f      	movs	r2, #15
 80029da:	18ba      	adds	r2, r7, r2
 80029dc:	7812      	ldrb	r2, [r2, #0]
 80029de:	429a      	cmp	r2, r3
 80029e0:	d3a1      	bcc.n	8002926 <HAL_PCD_Init+0xf2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6818      	ldr	r0, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6859      	ldr	r1, [r3, #4]
 80029ea:	689a      	ldr	r2, [r3, #8]
 80029ec:	f003 f89a 	bl	8005b24 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a07      	ldr	r2, [pc, #28]	@ (8002a18 <HAL_PCD_Init+0x1e4>)
 80029fa:	2101      	movs	r1, #1
 80029fc:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	7a9b      	ldrb	r3, [r3, #10]
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d103      	bne.n	8002a0e <HAL_PCD_Init+0x1da>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	0018      	movs	r0, r3
 8002a0a:	f000 f807 	bl	8002a1c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	0018      	movs	r0, r3
 8002a12:	46bd      	mov	sp, r7
 8002a14:	b005      	add	sp, #20
 8002a16:	bd90      	pop	{r4, r7, pc}
 8002a18:	00000291 	.word	0x00000291

08002a1c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	23b4      	movs	r3, #180	@ 0xb4
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	2101      	movs	r1, #1
 8002a32:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	23b2      	movs	r3, #178	@ 0xb2
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	2100      	movs	r1, #0
 8002a3c:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2254      	movs	r2, #84	@ 0x54
 8002a42:	5a9b      	ldrh	r3, [r3, r2]
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	2201      	movs	r2, #1
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	b299      	uxth	r1, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2254      	movs	r2, #84	@ 0x54
 8002a50:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2254      	movs	r2, #84	@ 0x54
 8002a56:	5a9b      	ldrh	r3, [r3, r2]
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	2202      	movs	r2, #2
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	b299      	uxth	r1, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2254      	movs	r2, #84	@ 0x54
 8002a64:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8002a66:	2300      	movs	r3, #0
}
 8002a68:	0018      	movs	r0, r3
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	b004      	add	sp, #16
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b088      	sub	sp, #32
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d102      	bne.n	8002a84 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	f000 fb76 	bl	8003170 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	d100      	bne.n	8002a90 <HAL_RCC_OscConfig+0x20>
 8002a8e:	e08e      	b.n	8002bae <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002a90:	4bc5      	ldr	r3, [pc, #788]	@ (8002da8 <HAL_RCC_OscConfig+0x338>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	220c      	movs	r2, #12
 8002a96:	4013      	ands	r3, r2
 8002a98:	2b04      	cmp	r3, #4
 8002a9a:	d00e      	beq.n	8002aba <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a9c:	4bc2      	ldr	r3, [pc, #776]	@ (8002da8 <HAL_RCC_OscConfig+0x338>)
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	220c      	movs	r2, #12
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	2b08      	cmp	r3, #8
 8002aa6:	d117      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x68>
 8002aa8:	4bbf      	ldr	r3, [pc, #764]	@ (8002da8 <HAL_RCC_OscConfig+0x338>)
 8002aaa:	685a      	ldr	r2, [r3, #4]
 8002aac:	23c0      	movs	r3, #192	@ 0xc0
 8002aae:	025b      	lsls	r3, r3, #9
 8002ab0:	401a      	ands	r2, r3
 8002ab2:	2380      	movs	r3, #128	@ 0x80
 8002ab4:	025b      	lsls	r3, r3, #9
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d10e      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aba:	4bbb      	ldr	r3, [pc, #748]	@ (8002da8 <HAL_RCC_OscConfig+0x338>)
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	2380      	movs	r3, #128	@ 0x80
 8002ac0:	029b      	lsls	r3, r3, #10
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	d100      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x58>
 8002ac6:	e071      	b.n	8002bac <HAL_RCC_OscConfig+0x13c>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d000      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x62>
 8002ad0:	e06c      	b.n	8002bac <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	f000 fb4c 	bl	8003170 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d107      	bne.n	8002af0 <HAL_RCC_OscConfig+0x80>
 8002ae0:	4bb1      	ldr	r3, [pc, #708]	@ (8002da8 <HAL_RCC_OscConfig+0x338>)
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	4bb0      	ldr	r3, [pc, #704]	@ (8002da8 <HAL_RCC_OscConfig+0x338>)
 8002ae6:	2180      	movs	r1, #128	@ 0x80
 8002ae8:	0249      	lsls	r1, r1, #9
 8002aea:	430a      	orrs	r2, r1
 8002aec:	601a      	str	r2, [r3, #0]
 8002aee:	e02f      	b.n	8002b50 <HAL_RCC_OscConfig+0xe0>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d10c      	bne.n	8002b12 <HAL_RCC_OscConfig+0xa2>
 8002af8:	4bab      	ldr	r3, [pc, #684]	@ (8002da8 <HAL_RCC_OscConfig+0x338>)
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	4baa      	ldr	r3, [pc, #680]	@ (8002da8 <HAL_RCC_OscConfig+0x338>)
 8002afe:	49ab      	ldr	r1, [pc, #684]	@ (8002dac <HAL_RCC_OscConfig+0x33c>)
 8002b00:	400a      	ands	r2, r1
 8002b02:	601a      	str	r2, [r3, #0]
 8002b04:	4ba8      	ldr	r3, [pc, #672]	@ (8002da8 <HAL_RCC_OscConfig+0x338>)
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	4ba7      	ldr	r3, [pc, #668]	@ (8002da8 <HAL_RCC_OscConfig+0x338>)
 8002b0a:	49a9      	ldr	r1, [pc, #676]	@ (8002db0 <HAL_RCC_OscConfig+0x340>)
 8002b0c:	400a      	ands	r2, r1
 8002b0e:	601a      	str	r2, [r3, #0]
 8002b10:	e01e      	b.n	8002b50 <HAL_RCC_OscConfig+0xe0>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	2b05      	cmp	r3, #5
 8002b18:	d10e      	bne.n	8002b38 <HAL_RCC_OscConfig+0xc8>
 8002b1a:	4ba3      	ldr	r3, [pc, #652]	@ (8002da8 <HAL_RCC_OscConfig+0x338>)
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	4ba2      	ldr	r3, [pc, #648]	@ (8002da8 <HAL_RCC_OscConfig+0x338>)
 8002b20:	2180      	movs	r1, #128	@ 0x80
 8002b22:	02c9      	lsls	r1, r1, #11
 8002b24:	430a      	orrs	r2, r1
 8002b26:	601a      	str	r2, [r3, #0]
 8002b28:	4b9f      	ldr	r3, [pc, #636]	@ (8002da8 <HAL_RCC_OscConfig+0x338>)
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	4b9e      	ldr	r3, [pc, #632]	@ (8002da8 <HAL_RCC_OscConfig+0x338>)
 8002b2e:	2180      	movs	r1, #128	@ 0x80
 8002b30:	0249      	lsls	r1, r1, #9
 8002b32:	430a      	orrs	r2, r1
 8002b34:	601a      	str	r2, [r3, #0]
 8002b36:	e00b      	b.n	8002b50 <HAL_RCC_OscConfig+0xe0>
 8002b38:	4b9b      	ldr	r3, [pc, #620]	@ (8002da8 <HAL_RCC_OscConfig+0x338>)
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	4b9a      	ldr	r3, [pc, #616]	@ (8002da8 <HAL_RCC_OscConfig+0x338>)
 8002b3e:	499b      	ldr	r1, [pc, #620]	@ (8002dac <HAL_RCC_OscConfig+0x33c>)
 8002b40:	400a      	ands	r2, r1
 8002b42:	601a      	str	r2, [r3, #0]
 8002b44:	4b98      	ldr	r3, [pc, #608]	@ (8002da8 <HAL_RCC_OscConfig+0x338>)
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	4b97      	ldr	r3, [pc, #604]	@ (8002da8 <HAL_RCC_OscConfig+0x338>)
 8002b4a:	4999      	ldr	r1, [pc, #612]	@ (8002db0 <HAL_RCC_OscConfig+0x340>)
 8002b4c:	400a      	ands	r2, r1
 8002b4e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d014      	beq.n	8002b82 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b58:	f7fe fca0 	bl	800149c <HAL_GetTick>
 8002b5c:	0003      	movs	r3, r0
 8002b5e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b60:	e008      	b.n	8002b74 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b62:	f7fe fc9b 	bl	800149c <HAL_GetTick>
 8002b66:	0002      	movs	r2, r0
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	2b64      	cmp	r3, #100	@ 0x64
 8002b6e:	d901      	bls.n	8002b74 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e2fd      	b.n	8003170 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b74:	4b8c      	ldr	r3, [pc, #560]	@ (8002da8 <HAL_RCC_OscConfig+0x338>)
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	2380      	movs	r3, #128	@ 0x80
 8002b7a:	029b      	lsls	r3, r3, #10
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	d0f0      	beq.n	8002b62 <HAL_RCC_OscConfig+0xf2>
 8002b80:	e015      	b.n	8002bae <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b82:	f7fe fc8b 	bl	800149c <HAL_GetTick>
 8002b86:	0003      	movs	r3, r0
 8002b88:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b8a:	e008      	b.n	8002b9e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b8c:	f7fe fc86 	bl	800149c <HAL_GetTick>
 8002b90:	0002      	movs	r2, r0
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b64      	cmp	r3, #100	@ 0x64
 8002b98:	d901      	bls.n	8002b9e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e2e8      	b.n	8003170 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b9e:	4b82      	ldr	r3, [pc, #520]	@ (8002da8 <HAL_RCC_OscConfig+0x338>)
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	2380      	movs	r3, #128	@ 0x80
 8002ba4:	029b      	lsls	r3, r3, #10
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	d1f0      	bne.n	8002b8c <HAL_RCC_OscConfig+0x11c>
 8002baa:	e000      	b.n	8002bae <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bac:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	2202      	movs	r2, #2
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	d100      	bne.n	8002bba <HAL_RCC_OscConfig+0x14a>
 8002bb8:	e06c      	b.n	8002c94 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002bba:	4b7b      	ldr	r3, [pc, #492]	@ (8002da8 <HAL_RCC_OscConfig+0x338>)
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	220c      	movs	r2, #12
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	d00e      	beq.n	8002be2 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002bc4:	4b78      	ldr	r3, [pc, #480]	@ (8002da8 <HAL_RCC_OscConfig+0x338>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	220c      	movs	r2, #12
 8002bca:	4013      	ands	r3, r2
 8002bcc:	2b08      	cmp	r3, #8
 8002bce:	d11f      	bne.n	8002c10 <HAL_RCC_OscConfig+0x1a0>
 8002bd0:	4b75      	ldr	r3, [pc, #468]	@ (8002da8 <HAL_RCC_OscConfig+0x338>)
 8002bd2:	685a      	ldr	r2, [r3, #4]
 8002bd4:	23c0      	movs	r3, #192	@ 0xc0
 8002bd6:	025b      	lsls	r3, r3, #9
 8002bd8:	401a      	ands	r2, r3
 8002bda:	2380      	movs	r3, #128	@ 0x80
 8002bdc:	021b      	lsls	r3, r3, #8
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d116      	bne.n	8002c10 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002be2:	4b71      	ldr	r3, [pc, #452]	@ (8002da8 <HAL_RCC_OscConfig+0x338>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2202      	movs	r2, #2
 8002be8:	4013      	ands	r3, r2
 8002bea:	d005      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x188>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d001      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e2bb      	b.n	8003170 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bf8:	4b6b      	ldr	r3, [pc, #428]	@ (8002da8 <HAL_RCC_OscConfig+0x338>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	22f8      	movs	r2, #248	@ 0xf8
 8002bfe:	4393      	bics	r3, r2
 8002c00:	0019      	movs	r1, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	00da      	lsls	r2, r3, #3
 8002c08:	4b67      	ldr	r3, [pc, #412]	@ (8002da8 <HAL_RCC_OscConfig+0x338>)
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c0e:	e041      	b.n	8002c94 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d024      	beq.n	8002c62 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c18:	4b63      	ldr	r3, [pc, #396]	@ (8002da8 <HAL_RCC_OscConfig+0x338>)
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	4b62      	ldr	r3, [pc, #392]	@ (8002da8 <HAL_RCC_OscConfig+0x338>)
 8002c1e:	2101      	movs	r1, #1
 8002c20:	430a      	orrs	r2, r1
 8002c22:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c24:	f7fe fc3a 	bl	800149c <HAL_GetTick>
 8002c28:	0003      	movs	r3, r0
 8002c2a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c2c:	e008      	b.n	8002c40 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c2e:	f7fe fc35 	bl	800149c <HAL_GetTick>
 8002c32:	0002      	movs	r2, r0
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d901      	bls.n	8002c40 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e297      	b.n	8003170 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c40:	4b59      	ldr	r3, [pc, #356]	@ (8002da8 <HAL_RCC_OscConfig+0x338>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2202      	movs	r2, #2
 8002c46:	4013      	ands	r3, r2
 8002c48:	d0f1      	beq.n	8002c2e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c4a:	4b57      	ldr	r3, [pc, #348]	@ (8002da8 <HAL_RCC_OscConfig+0x338>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	22f8      	movs	r2, #248	@ 0xf8
 8002c50:	4393      	bics	r3, r2
 8002c52:	0019      	movs	r1, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	00da      	lsls	r2, r3, #3
 8002c5a:	4b53      	ldr	r3, [pc, #332]	@ (8002da8 <HAL_RCC_OscConfig+0x338>)
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	601a      	str	r2, [r3, #0]
 8002c60:	e018      	b.n	8002c94 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c62:	4b51      	ldr	r3, [pc, #324]	@ (8002da8 <HAL_RCC_OscConfig+0x338>)
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	4b50      	ldr	r3, [pc, #320]	@ (8002da8 <HAL_RCC_OscConfig+0x338>)
 8002c68:	2101      	movs	r1, #1
 8002c6a:	438a      	bics	r2, r1
 8002c6c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c6e:	f7fe fc15 	bl	800149c <HAL_GetTick>
 8002c72:	0003      	movs	r3, r0
 8002c74:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c76:	e008      	b.n	8002c8a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c78:	f7fe fc10 	bl	800149c <HAL_GetTick>
 8002c7c:	0002      	movs	r2, r0
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e272      	b.n	8003170 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c8a:	4b47      	ldr	r3, [pc, #284]	@ (8002da8 <HAL_RCC_OscConfig+0x338>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2202      	movs	r2, #2
 8002c90:	4013      	ands	r3, r2
 8002c92:	d1f1      	bne.n	8002c78 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2208      	movs	r2, #8
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	d036      	beq.n	8002d0c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	69db      	ldr	r3, [r3, #28]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d019      	beq.n	8002cda <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ca6:	4b40      	ldr	r3, [pc, #256]	@ (8002da8 <HAL_RCC_OscConfig+0x338>)
 8002ca8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002caa:	4b3f      	ldr	r3, [pc, #252]	@ (8002da8 <HAL_RCC_OscConfig+0x338>)
 8002cac:	2101      	movs	r1, #1
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cb2:	f7fe fbf3 	bl	800149c <HAL_GetTick>
 8002cb6:	0003      	movs	r3, r0
 8002cb8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cba:	e008      	b.n	8002cce <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cbc:	f7fe fbee 	bl	800149c <HAL_GetTick>
 8002cc0:	0002      	movs	r2, r0
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e250      	b.n	8003170 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cce:	4b36      	ldr	r3, [pc, #216]	@ (8002da8 <HAL_RCC_OscConfig+0x338>)
 8002cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	d0f1      	beq.n	8002cbc <HAL_RCC_OscConfig+0x24c>
 8002cd8:	e018      	b.n	8002d0c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cda:	4b33      	ldr	r3, [pc, #204]	@ (8002da8 <HAL_RCC_OscConfig+0x338>)
 8002cdc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002cde:	4b32      	ldr	r3, [pc, #200]	@ (8002da8 <HAL_RCC_OscConfig+0x338>)
 8002ce0:	2101      	movs	r1, #1
 8002ce2:	438a      	bics	r2, r1
 8002ce4:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ce6:	f7fe fbd9 	bl	800149c <HAL_GetTick>
 8002cea:	0003      	movs	r3, r0
 8002cec:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cee:	e008      	b.n	8002d02 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cf0:	f7fe fbd4 	bl	800149c <HAL_GetTick>
 8002cf4:	0002      	movs	r2, r0
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e236      	b.n	8003170 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d02:	4b29      	ldr	r3, [pc, #164]	@ (8002da8 <HAL_RCC_OscConfig+0x338>)
 8002d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d06:	2202      	movs	r2, #2
 8002d08:	4013      	ands	r3, r2
 8002d0a:	d1f1      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2204      	movs	r2, #4
 8002d12:	4013      	ands	r3, r2
 8002d14:	d100      	bne.n	8002d18 <HAL_RCC_OscConfig+0x2a8>
 8002d16:	e0b5      	b.n	8002e84 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d18:	201f      	movs	r0, #31
 8002d1a:	183b      	adds	r3, r7, r0
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d20:	4b21      	ldr	r3, [pc, #132]	@ (8002da8 <HAL_RCC_OscConfig+0x338>)
 8002d22:	69da      	ldr	r2, [r3, #28]
 8002d24:	2380      	movs	r3, #128	@ 0x80
 8002d26:	055b      	lsls	r3, r3, #21
 8002d28:	4013      	ands	r3, r2
 8002d2a:	d110      	bne.n	8002d4e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d2c:	4b1e      	ldr	r3, [pc, #120]	@ (8002da8 <HAL_RCC_OscConfig+0x338>)
 8002d2e:	69da      	ldr	r2, [r3, #28]
 8002d30:	4b1d      	ldr	r3, [pc, #116]	@ (8002da8 <HAL_RCC_OscConfig+0x338>)
 8002d32:	2180      	movs	r1, #128	@ 0x80
 8002d34:	0549      	lsls	r1, r1, #21
 8002d36:	430a      	orrs	r2, r1
 8002d38:	61da      	str	r2, [r3, #28]
 8002d3a:	4b1b      	ldr	r3, [pc, #108]	@ (8002da8 <HAL_RCC_OscConfig+0x338>)
 8002d3c:	69da      	ldr	r2, [r3, #28]
 8002d3e:	2380      	movs	r3, #128	@ 0x80
 8002d40:	055b      	lsls	r3, r3, #21
 8002d42:	4013      	ands	r3, r2
 8002d44:	60fb      	str	r3, [r7, #12]
 8002d46:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002d48:	183b      	adds	r3, r7, r0
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d4e:	4b19      	ldr	r3, [pc, #100]	@ (8002db4 <HAL_RCC_OscConfig+0x344>)
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	2380      	movs	r3, #128	@ 0x80
 8002d54:	005b      	lsls	r3, r3, #1
 8002d56:	4013      	ands	r3, r2
 8002d58:	d11a      	bne.n	8002d90 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d5a:	4b16      	ldr	r3, [pc, #88]	@ (8002db4 <HAL_RCC_OscConfig+0x344>)
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	4b15      	ldr	r3, [pc, #84]	@ (8002db4 <HAL_RCC_OscConfig+0x344>)
 8002d60:	2180      	movs	r1, #128	@ 0x80
 8002d62:	0049      	lsls	r1, r1, #1
 8002d64:	430a      	orrs	r2, r1
 8002d66:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d68:	f7fe fb98 	bl	800149c <HAL_GetTick>
 8002d6c:	0003      	movs	r3, r0
 8002d6e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d70:	e008      	b.n	8002d84 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d72:	f7fe fb93 	bl	800149c <HAL_GetTick>
 8002d76:	0002      	movs	r2, r0
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	2b64      	cmp	r3, #100	@ 0x64
 8002d7e:	d901      	bls.n	8002d84 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e1f5      	b.n	8003170 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d84:	4b0b      	ldr	r3, [pc, #44]	@ (8002db4 <HAL_RCC_OscConfig+0x344>)
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	2380      	movs	r3, #128	@ 0x80
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	d0f0      	beq.n	8002d72 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d10f      	bne.n	8002db8 <HAL_RCC_OscConfig+0x348>
 8002d98:	4b03      	ldr	r3, [pc, #12]	@ (8002da8 <HAL_RCC_OscConfig+0x338>)
 8002d9a:	6a1a      	ldr	r2, [r3, #32]
 8002d9c:	4b02      	ldr	r3, [pc, #8]	@ (8002da8 <HAL_RCC_OscConfig+0x338>)
 8002d9e:	2101      	movs	r1, #1
 8002da0:	430a      	orrs	r2, r1
 8002da2:	621a      	str	r2, [r3, #32]
 8002da4:	e036      	b.n	8002e14 <HAL_RCC_OscConfig+0x3a4>
 8002da6:	46c0      	nop			@ (mov r8, r8)
 8002da8:	40021000 	.word	0x40021000
 8002dac:	fffeffff 	.word	0xfffeffff
 8002db0:	fffbffff 	.word	0xfffbffff
 8002db4:	40007000 	.word	0x40007000
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d10c      	bne.n	8002dda <HAL_RCC_OscConfig+0x36a>
 8002dc0:	4bca      	ldr	r3, [pc, #808]	@ (80030ec <HAL_RCC_OscConfig+0x67c>)
 8002dc2:	6a1a      	ldr	r2, [r3, #32]
 8002dc4:	4bc9      	ldr	r3, [pc, #804]	@ (80030ec <HAL_RCC_OscConfig+0x67c>)
 8002dc6:	2101      	movs	r1, #1
 8002dc8:	438a      	bics	r2, r1
 8002dca:	621a      	str	r2, [r3, #32]
 8002dcc:	4bc7      	ldr	r3, [pc, #796]	@ (80030ec <HAL_RCC_OscConfig+0x67c>)
 8002dce:	6a1a      	ldr	r2, [r3, #32]
 8002dd0:	4bc6      	ldr	r3, [pc, #792]	@ (80030ec <HAL_RCC_OscConfig+0x67c>)
 8002dd2:	2104      	movs	r1, #4
 8002dd4:	438a      	bics	r2, r1
 8002dd6:	621a      	str	r2, [r3, #32]
 8002dd8:	e01c      	b.n	8002e14 <HAL_RCC_OscConfig+0x3a4>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	2b05      	cmp	r3, #5
 8002de0:	d10c      	bne.n	8002dfc <HAL_RCC_OscConfig+0x38c>
 8002de2:	4bc2      	ldr	r3, [pc, #776]	@ (80030ec <HAL_RCC_OscConfig+0x67c>)
 8002de4:	6a1a      	ldr	r2, [r3, #32]
 8002de6:	4bc1      	ldr	r3, [pc, #772]	@ (80030ec <HAL_RCC_OscConfig+0x67c>)
 8002de8:	2104      	movs	r1, #4
 8002dea:	430a      	orrs	r2, r1
 8002dec:	621a      	str	r2, [r3, #32]
 8002dee:	4bbf      	ldr	r3, [pc, #764]	@ (80030ec <HAL_RCC_OscConfig+0x67c>)
 8002df0:	6a1a      	ldr	r2, [r3, #32]
 8002df2:	4bbe      	ldr	r3, [pc, #760]	@ (80030ec <HAL_RCC_OscConfig+0x67c>)
 8002df4:	2101      	movs	r1, #1
 8002df6:	430a      	orrs	r2, r1
 8002df8:	621a      	str	r2, [r3, #32]
 8002dfa:	e00b      	b.n	8002e14 <HAL_RCC_OscConfig+0x3a4>
 8002dfc:	4bbb      	ldr	r3, [pc, #748]	@ (80030ec <HAL_RCC_OscConfig+0x67c>)
 8002dfe:	6a1a      	ldr	r2, [r3, #32]
 8002e00:	4bba      	ldr	r3, [pc, #744]	@ (80030ec <HAL_RCC_OscConfig+0x67c>)
 8002e02:	2101      	movs	r1, #1
 8002e04:	438a      	bics	r2, r1
 8002e06:	621a      	str	r2, [r3, #32]
 8002e08:	4bb8      	ldr	r3, [pc, #736]	@ (80030ec <HAL_RCC_OscConfig+0x67c>)
 8002e0a:	6a1a      	ldr	r2, [r3, #32]
 8002e0c:	4bb7      	ldr	r3, [pc, #732]	@ (80030ec <HAL_RCC_OscConfig+0x67c>)
 8002e0e:	2104      	movs	r1, #4
 8002e10:	438a      	bics	r2, r1
 8002e12:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d014      	beq.n	8002e46 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e1c:	f7fe fb3e 	bl	800149c <HAL_GetTick>
 8002e20:	0003      	movs	r3, r0
 8002e22:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e24:	e009      	b.n	8002e3a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e26:	f7fe fb39 	bl	800149c <HAL_GetTick>
 8002e2a:	0002      	movs	r2, r0
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	4aaf      	ldr	r2, [pc, #700]	@ (80030f0 <HAL_RCC_OscConfig+0x680>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e19a      	b.n	8003170 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e3a:	4bac      	ldr	r3, [pc, #688]	@ (80030ec <HAL_RCC_OscConfig+0x67c>)
 8002e3c:	6a1b      	ldr	r3, [r3, #32]
 8002e3e:	2202      	movs	r2, #2
 8002e40:	4013      	ands	r3, r2
 8002e42:	d0f0      	beq.n	8002e26 <HAL_RCC_OscConfig+0x3b6>
 8002e44:	e013      	b.n	8002e6e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e46:	f7fe fb29 	bl	800149c <HAL_GetTick>
 8002e4a:	0003      	movs	r3, r0
 8002e4c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e4e:	e009      	b.n	8002e64 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e50:	f7fe fb24 	bl	800149c <HAL_GetTick>
 8002e54:	0002      	movs	r2, r0
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	4aa5      	ldr	r2, [pc, #660]	@ (80030f0 <HAL_RCC_OscConfig+0x680>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d901      	bls.n	8002e64 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e185      	b.n	8003170 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e64:	4ba1      	ldr	r3, [pc, #644]	@ (80030ec <HAL_RCC_OscConfig+0x67c>)
 8002e66:	6a1b      	ldr	r3, [r3, #32]
 8002e68:	2202      	movs	r2, #2
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	d1f0      	bne.n	8002e50 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e6e:	231f      	movs	r3, #31
 8002e70:	18fb      	adds	r3, r7, r3
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d105      	bne.n	8002e84 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e78:	4b9c      	ldr	r3, [pc, #624]	@ (80030ec <HAL_RCC_OscConfig+0x67c>)
 8002e7a:	69da      	ldr	r2, [r3, #28]
 8002e7c:	4b9b      	ldr	r3, [pc, #620]	@ (80030ec <HAL_RCC_OscConfig+0x67c>)
 8002e7e:	499d      	ldr	r1, [pc, #628]	@ (80030f4 <HAL_RCC_OscConfig+0x684>)
 8002e80:	400a      	ands	r2, r1
 8002e82:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2210      	movs	r2, #16
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	d063      	beq.n	8002f56 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	695b      	ldr	r3, [r3, #20]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d12a      	bne.n	8002eec <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002e96:	4b95      	ldr	r3, [pc, #596]	@ (80030ec <HAL_RCC_OscConfig+0x67c>)
 8002e98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e9a:	4b94      	ldr	r3, [pc, #592]	@ (80030ec <HAL_RCC_OscConfig+0x67c>)
 8002e9c:	2104      	movs	r1, #4
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002ea2:	4b92      	ldr	r3, [pc, #584]	@ (80030ec <HAL_RCC_OscConfig+0x67c>)
 8002ea4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ea6:	4b91      	ldr	r3, [pc, #580]	@ (80030ec <HAL_RCC_OscConfig+0x67c>)
 8002ea8:	2101      	movs	r1, #1
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eae:	f7fe faf5 	bl	800149c <HAL_GetTick>
 8002eb2:	0003      	movs	r3, r0
 8002eb4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002eb6:	e008      	b.n	8002eca <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002eb8:	f7fe faf0 	bl	800149c <HAL_GetTick>
 8002ebc:	0002      	movs	r2, r0
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e152      	b.n	8003170 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002eca:	4b88      	ldr	r3, [pc, #544]	@ (80030ec <HAL_RCC_OscConfig+0x67c>)
 8002ecc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ece:	2202      	movs	r2, #2
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	d0f1      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002ed4:	4b85      	ldr	r3, [pc, #532]	@ (80030ec <HAL_RCC_OscConfig+0x67c>)
 8002ed6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ed8:	22f8      	movs	r2, #248	@ 0xf8
 8002eda:	4393      	bics	r3, r2
 8002edc:	0019      	movs	r1, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	00da      	lsls	r2, r3, #3
 8002ee4:	4b81      	ldr	r3, [pc, #516]	@ (80030ec <HAL_RCC_OscConfig+0x67c>)
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	635a      	str	r2, [r3, #52]	@ 0x34
 8002eea:	e034      	b.n	8002f56 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	695b      	ldr	r3, [r3, #20]
 8002ef0:	3305      	adds	r3, #5
 8002ef2:	d111      	bne.n	8002f18 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002ef4:	4b7d      	ldr	r3, [pc, #500]	@ (80030ec <HAL_RCC_OscConfig+0x67c>)
 8002ef6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ef8:	4b7c      	ldr	r3, [pc, #496]	@ (80030ec <HAL_RCC_OscConfig+0x67c>)
 8002efa:	2104      	movs	r1, #4
 8002efc:	438a      	bics	r2, r1
 8002efe:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002f00:	4b7a      	ldr	r3, [pc, #488]	@ (80030ec <HAL_RCC_OscConfig+0x67c>)
 8002f02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f04:	22f8      	movs	r2, #248	@ 0xf8
 8002f06:	4393      	bics	r3, r2
 8002f08:	0019      	movs	r1, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	00da      	lsls	r2, r3, #3
 8002f10:	4b76      	ldr	r3, [pc, #472]	@ (80030ec <HAL_RCC_OscConfig+0x67c>)
 8002f12:	430a      	orrs	r2, r1
 8002f14:	635a      	str	r2, [r3, #52]	@ 0x34
 8002f16:	e01e      	b.n	8002f56 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002f18:	4b74      	ldr	r3, [pc, #464]	@ (80030ec <HAL_RCC_OscConfig+0x67c>)
 8002f1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f1c:	4b73      	ldr	r3, [pc, #460]	@ (80030ec <HAL_RCC_OscConfig+0x67c>)
 8002f1e:	2104      	movs	r1, #4
 8002f20:	430a      	orrs	r2, r1
 8002f22:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002f24:	4b71      	ldr	r3, [pc, #452]	@ (80030ec <HAL_RCC_OscConfig+0x67c>)
 8002f26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f28:	4b70      	ldr	r3, [pc, #448]	@ (80030ec <HAL_RCC_OscConfig+0x67c>)
 8002f2a:	2101      	movs	r1, #1
 8002f2c:	438a      	bics	r2, r1
 8002f2e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f30:	f7fe fab4 	bl	800149c <HAL_GetTick>
 8002f34:	0003      	movs	r3, r0
 8002f36:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002f38:	e008      	b.n	8002f4c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002f3a:	f7fe faaf 	bl	800149c <HAL_GetTick>
 8002f3e:	0002      	movs	r2, r0
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d901      	bls.n	8002f4c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e111      	b.n	8003170 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002f4c:	4b67      	ldr	r3, [pc, #412]	@ (80030ec <HAL_RCC_OscConfig+0x67c>)
 8002f4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f50:	2202      	movs	r2, #2
 8002f52:	4013      	ands	r3, r2
 8002f54:	d1f1      	bne.n	8002f3a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2220      	movs	r2, #32
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	d05c      	beq.n	800301a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002f60:	4b62      	ldr	r3, [pc, #392]	@ (80030ec <HAL_RCC_OscConfig+0x67c>)
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	220c      	movs	r2, #12
 8002f66:	4013      	ands	r3, r2
 8002f68:	2b0c      	cmp	r3, #12
 8002f6a:	d00e      	beq.n	8002f8a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002f6c:	4b5f      	ldr	r3, [pc, #380]	@ (80030ec <HAL_RCC_OscConfig+0x67c>)
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	220c      	movs	r2, #12
 8002f72:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002f74:	2b08      	cmp	r3, #8
 8002f76:	d114      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002f78:	4b5c      	ldr	r3, [pc, #368]	@ (80030ec <HAL_RCC_OscConfig+0x67c>)
 8002f7a:	685a      	ldr	r2, [r3, #4]
 8002f7c:	23c0      	movs	r3, #192	@ 0xc0
 8002f7e:	025b      	lsls	r3, r3, #9
 8002f80:	401a      	ands	r2, r3
 8002f82:	23c0      	movs	r3, #192	@ 0xc0
 8002f84:	025b      	lsls	r3, r3, #9
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d10b      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002f8a:	4b58      	ldr	r3, [pc, #352]	@ (80030ec <HAL_RCC_OscConfig+0x67c>)
 8002f8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f8e:	2380      	movs	r3, #128	@ 0x80
 8002f90:	029b      	lsls	r3, r3, #10
 8002f92:	4013      	ands	r3, r2
 8002f94:	d040      	beq.n	8003018 <HAL_RCC_OscConfig+0x5a8>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a1b      	ldr	r3, [r3, #32]
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d03c      	beq.n	8003018 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e0e6      	b.n	8003170 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a1b      	ldr	r3, [r3, #32]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d01b      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002faa:	4b50      	ldr	r3, [pc, #320]	@ (80030ec <HAL_RCC_OscConfig+0x67c>)
 8002fac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002fae:	4b4f      	ldr	r3, [pc, #316]	@ (80030ec <HAL_RCC_OscConfig+0x67c>)
 8002fb0:	2180      	movs	r1, #128	@ 0x80
 8002fb2:	0249      	lsls	r1, r1, #9
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb8:	f7fe fa70 	bl	800149c <HAL_GetTick>
 8002fbc:	0003      	movs	r3, r0
 8002fbe:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002fc0:	e008      	b.n	8002fd4 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fc2:	f7fe fa6b 	bl	800149c <HAL_GetTick>
 8002fc6:	0002      	movs	r2, r0
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d901      	bls.n	8002fd4 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	e0cd      	b.n	8003170 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002fd4:	4b45      	ldr	r3, [pc, #276]	@ (80030ec <HAL_RCC_OscConfig+0x67c>)
 8002fd6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002fd8:	2380      	movs	r3, #128	@ 0x80
 8002fda:	029b      	lsls	r3, r3, #10
 8002fdc:	4013      	ands	r3, r2
 8002fde:	d0f0      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x552>
 8002fe0:	e01b      	b.n	800301a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002fe2:	4b42      	ldr	r3, [pc, #264]	@ (80030ec <HAL_RCC_OscConfig+0x67c>)
 8002fe4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002fe6:	4b41      	ldr	r3, [pc, #260]	@ (80030ec <HAL_RCC_OscConfig+0x67c>)
 8002fe8:	4943      	ldr	r1, [pc, #268]	@ (80030f8 <HAL_RCC_OscConfig+0x688>)
 8002fea:	400a      	ands	r2, r1
 8002fec:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fee:	f7fe fa55 	bl	800149c <HAL_GetTick>
 8002ff2:	0003      	movs	r3, r0
 8002ff4:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002ff6:	e008      	b.n	800300a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ff8:	f7fe fa50 	bl	800149c <HAL_GetTick>
 8002ffc:	0002      	movs	r2, r0
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	2b02      	cmp	r3, #2
 8003004:	d901      	bls.n	800300a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e0b2      	b.n	8003170 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800300a:	4b38      	ldr	r3, [pc, #224]	@ (80030ec <HAL_RCC_OscConfig+0x67c>)
 800300c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800300e:	2380      	movs	r3, #128	@ 0x80
 8003010:	029b      	lsls	r3, r3, #10
 8003012:	4013      	ands	r3, r2
 8003014:	d1f0      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x588>
 8003016:	e000      	b.n	800301a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003018:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800301e:	2b00      	cmp	r3, #0
 8003020:	d100      	bne.n	8003024 <HAL_RCC_OscConfig+0x5b4>
 8003022:	e0a4      	b.n	800316e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003024:	4b31      	ldr	r3, [pc, #196]	@ (80030ec <HAL_RCC_OscConfig+0x67c>)
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	220c      	movs	r2, #12
 800302a:	4013      	ands	r3, r2
 800302c:	2b08      	cmp	r3, #8
 800302e:	d100      	bne.n	8003032 <HAL_RCC_OscConfig+0x5c2>
 8003030:	e078      	b.n	8003124 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003036:	2b02      	cmp	r3, #2
 8003038:	d14c      	bne.n	80030d4 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800303a:	4b2c      	ldr	r3, [pc, #176]	@ (80030ec <HAL_RCC_OscConfig+0x67c>)
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	4b2b      	ldr	r3, [pc, #172]	@ (80030ec <HAL_RCC_OscConfig+0x67c>)
 8003040:	492e      	ldr	r1, [pc, #184]	@ (80030fc <HAL_RCC_OscConfig+0x68c>)
 8003042:	400a      	ands	r2, r1
 8003044:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003046:	f7fe fa29 	bl	800149c <HAL_GetTick>
 800304a:	0003      	movs	r3, r0
 800304c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800304e:	e008      	b.n	8003062 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003050:	f7fe fa24 	bl	800149c <HAL_GetTick>
 8003054:	0002      	movs	r2, r0
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	2b02      	cmp	r3, #2
 800305c:	d901      	bls.n	8003062 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e086      	b.n	8003170 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003062:	4b22      	ldr	r3, [pc, #136]	@ (80030ec <HAL_RCC_OscConfig+0x67c>)
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	2380      	movs	r3, #128	@ 0x80
 8003068:	049b      	lsls	r3, r3, #18
 800306a:	4013      	ands	r3, r2
 800306c:	d1f0      	bne.n	8003050 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800306e:	4b1f      	ldr	r3, [pc, #124]	@ (80030ec <HAL_RCC_OscConfig+0x67c>)
 8003070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003072:	220f      	movs	r2, #15
 8003074:	4393      	bics	r3, r2
 8003076:	0019      	movs	r1, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800307c:	4b1b      	ldr	r3, [pc, #108]	@ (80030ec <HAL_RCC_OscConfig+0x67c>)
 800307e:	430a      	orrs	r2, r1
 8003080:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003082:	4b1a      	ldr	r3, [pc, #104]	@ (80030ec <HAL_RCC_OscConfig+0x67c>)
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	4a1e      	ldr	r2, [pc, #120]	@ (8003100 <HAL_RCC_OscConfig+0x690>)
 8003088:	4013      	ands	r3, r2
 800308a:	0019      	movs	r1, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003094:	431a      	orrs	r2, r3
 8003096:	4b15      	ldr	r3, [pc, #84]	@ (80030ec <HAL_RCC_OscConfig+0x67c>)
 8003098:	430a      	orrs	r2, r1
 800309a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800309c:	4b13      	ldr	r3, [pc, #76]	@ (80030ec <HAL_RCC_OscConfig+0x67c>)
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	4b12      	ldr	r3, [pc, #72]	@ (80030ec <HAL_RCC_OscConfig+0x67c>)
 80030a2:	2180      	movs	r1, #128	@ 0x80
 80030a4:	0449      	lsls	r1, r1, #17
 80030a6:	430a      	orrs	r2, r1
 80030a8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030aa:	f7fe f9f7 	bl	800149c <HAL_GetTick>
 80030ae:	0003      	movs	r3, r0
 80030b0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030b2:	e008      	b.n	80030c6 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030b4:	f7fe f9f2 	bl	800149c <HAL_GetTick>
 80030b8:	0002      	movs	r2, r0
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e054      	b.n	8003170 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030c6:	4b09      	ldr	r3, [pc, #36]	@ (80030ec <HAL_RCC_OscConfig+0x67c>)
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	2380      	movs	r3, #128	@ 0x80
 80030cc:	049b      	lsls	r3, r3, #18
 80030ce:	4013      	ands	r3, r2
 80030d0:	d0f0      	beq.n	80030b4 <HAL_RCC_OscConfig+0x644>
 80030d2:	e04c      	b.n	800316e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030d4:	4b05      	ldr	r3, [pc, #20]	@ (80030ec <HAL_RCC_OscConfig+0x67c>)
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	4b04      	ldr	r3, [pc, #16]	@ (80030ec <HAL_RCC_OscConfig+0x67c>)
 80030da:	4908      	ldr	r1, [pc, #32]	@ (80030fc <HAL_RCC_OscConfig+0x68c>)
 80030dc:	400a      	ands	r2, r1
 80030de:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e0:	f7fe f9dc 	bl	800149c <HAL_GetTick>
 80030e4:	0003      	movs	r3, r0
 80030e6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030e8:	e015      	b.n	8003116 <HAL_RCC_OscConfig+0x6a6>
 80030ea:	46c0      	nop			@ (mov r8, r8)
 80030ec:	40021000 	.word	0x40021000
 80030f0:	00001388 	.word	0x00001388
 80030f4:	efffffff 	.word	0xefffffff
 80030f8:	fffeffff 	.word	0xfffeffff
 80030fc:	feffffff 	.word	0xfeffffff
 8003100:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003104:	f7fe f9ca 	bl	800149c <HAL_GetTick>
 8003108:	0002      	movs	r2, r0
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b02      	cmp	r3, #2
 8003110:	d901      	bls.n	8003116 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e02c      	b.n	8003170 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003116:	4b18      	ldr	r3, [pc, #96]	@ (8003178 <HAL_RCC_OscConfig+0x708>)
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	2380      	movs	r3, #128	@ 0x80
 800311c:	049b      	lsls	r3, r3, #18
 800311e:	4013      	ands	r3, r2
 8003120:	d1f0      	bne.n	8003104 <HAL_RCC_OscConfig+0x694>
 8003122:	e024      	b.n	800316e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003128:	2b01      	cmp	r3, #1
 800312a:	d101      	bne.n	8003130 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e01f      	b.n	8003170 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003130:	4b11      	ldr	r3, [pc, #68]	@ (8003178 <HAL_RCC_OscConfig+0x708>)
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003136:	4b10      	ldr	r3, [pc, #64]	@ (8003178 <HAL_RCC_OscConfig+0x708>)
 8003138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800313a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800313c:	697a      	ldr	r2, [r7, #20]
 800313e:	23c0      	movs	r3, #192	@ 0xc0
 8003140:	025b      	lsls	r3, r3, #9
 8003142:	401a      	ands	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003148:	429a      	cmp	r2, r3
 800314a:	d10e      	bne.n	800316a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	220f      	movs	r2, #15
 8003150:	401a      	ands	r2, r3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003156:	429a      	cmp	r2, r3
 8003158:	d107      	bne.n	800316a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800315a:	697a      	ldr	r2, [r7, #20]
 800315c:	23f0      	movs	r3, #240	@ 0xf0
 800315e:	039b      	lsls	r3, r3, #14
 8003160:	401a      	ands	r2, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003166:	429a      	cmp	r2, r3
 8003168:	d001      	beq.n	800316e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e000      	b.n	8003170 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800316e:	2300      	movs	r3, #0
}
 8003170:	0018      	movs	r0, r3
 8003172:	46bd      	mov	sp, r7
 8003174:	b008      	add	sp, #32
 8003176:	bd80      	pop	{r7, pc}
 8003178:	40021000 	.word	0x40021000

0800317c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d101      	bne.n	8003190 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e0bf      	b.n	8003310 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003190:	4b61      	ldr	r3, [pc, #388]	@ (8003318 <HAL_RCC_ClockConfig+0x19c>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2201      	movs	r2, #1
 8003196:	4013      	ands	r3, r2
 8003198:	683a      	ldr	r2, [r7, #0]
 800319a:	429a      	cmp	r2, r3
 800319c:	d911      	bls.n	80031c2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800319e:	4b5e      	ldr	r3, [pc, #376]	@ (8003318 <HAL_RCC_ClockConfig+0x19c>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2201      	movs	r2, #1
 80031a4:	4393      	bics	r3, r2
 80031a6:	0019      	movs	r1, r3
 80031a8:	4b5b      	ldr	r3, [pc, #364]	@ (8003318 <HAL_RCC_ClockConfig+0x19c>)
 80031aa:	683a      	ldr	r2, [r7, #0]
 80031ac:	430a      	orrs	r2, r1
 80031ae:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031b0:	4b59      	ldr	r3, [pc, #356]	@ (8003318 <HAL_RCC_ClockConfig+0x19c>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2201      	movs	r2, #1
 80031b6:	4013      	ands	r3, r2
 80031b8:	683a      	ldr	r2, [r7, #0]
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d001      	beq.n	80031c2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e0a6      	b.n	8003310 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2202      	movs	r2, #2
 80031c8:	4013      	ands	r3, r2
 80031ca:	d015      	beq.n	80031f8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2204      	movs	r2, #4
 80031d2:	4013      	ands	r3, r2
 80031d4:	d006      	beq.n	80031e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80031d6:	4b51      	ldr	r3, [pc, #324]	@ (800331c <HAL_RCC_ClockConfig+0x1a0>)
 80031d8:	685a      	ldr	r2, [r3, #4]
 80031da:	4b50      	ldr	r3, [pc, #320]	@ (800331c <HAL_RCC_ClockConfig+0x1a0>)
 80031dc:	21e0      	movs	r1, #224	@ 0xe0
 80031de:	00c9      	lsls	r1, r1, #3
 80031e0:	430a      	orrs	r2, r1
 80031e2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031e4:	4b4d      	ldr	r3, [pc, #308]	@ (800331c <HAL_RCC_ClockConfig+0x1a0>)
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	22f0      	movs	r2, #240	@ 0xf0
 80031ea:	4393      	bics	r3, r2
 80031ec:	0019      	movs	r1, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	689a      	ldr	r2, [r3, #8]
 80031f2:	4b4a      	ldr	r3, [pc, #296]	@ (800331c <HAL_RCC_ClockConfig+0x1a0>)
 80031f4:	430a      	orrs	r2, r1
 80031f6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2201      	movs	r2, #1
 80031fe:	4013      	ands	r3, r2
 8003200:	d04c      	beq.n	800329c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	2b01      	cmp	r3, #1
 8003208:	d107      	bne.n	800321a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800320a:	4b44      	ldr	r3, [pc, #272]	@ (800331c <HAL_RCC_ClockConfig+0x1a0>)
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	2380      	movs	r3, #128	@ 0x80
 8003210:	029b      	lsls	r3, r3, #10
 8003212:	4013      	ands	r3, r2
 8003214:	d120      	bne.n	8003258 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e07a      	b.n	8003310 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	2b02      	cmp	r3, #2
 8003220:	d107      	bne.n	8003232 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003222:	4b3e      	ldr	r3, [pc, #248]	@ (800331c <HAL_RCC_ClockConfig+0x1a0>)
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	2380      	movs	r3, #128	@ 0x80
 8003228:	049b      	lsls	r3, r3, #18
 800322a:	4013      	ands	r3, r2
 800322c:	d114      	bne.n	8003258 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e06e      	b.n	8003310 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	2b03      	cmp	r3, #3
 8003238:	d107      	bne.n	800324a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800323a:	4b38      	ldr	r3, [pc, #224]	@ (800331c <HAL_RCC_ClockConfig+0x1a0>)
 800323c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800323e:	2380      	movs	r3, #128	@ 0x80
 8003240:	029b      	lsls	r3, r3, #10
 8003242:	4013      	ands	r3, r2
 8003244:	d108      	bne.n	8003258 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e062      	b.n	8003310 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800324a:	4b34      	ldr	r3, [pc, #208]	@ (800331c <HAL_RCC_ClockConfig+0x1a0>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2202      	movs	r2, #2
 8003250:	4013      	ands	r3, r2
 8003252:	d101      	bne.n	8003258 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e05b      	b.n	8003310 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003258:	4b30      	ldr	r3, [pc, #192]	@ (800331c <HAL_RCC_ClockConfig+0x1a0>)
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	2203      	movs	r2, #3
 800325e:	4393      	bics	r3, r2
 8003260:	0019      	movs	r1, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685a      	ldr	r2, [r3, #4]
 8003266:	4b2d      	ldr	r3, [pc, #180]	@ (800331c <HAL_RCC_ClockConfig+0x1a0>)
 8003268:	430a      	orrs	r2, r1
 800326a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800326c:	f7fe f916 	bl	800149c <HAL_GetTick>
 8003270:	0003      	movs	r3, r0
 8003272:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003274:	e009      	b.n	800328a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003276:	f7fe f911 	bl	800149c <HAL_GetTick>
 800327a:	0002      	movs	r2, r0
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	4a27      	ldr	r2, [pc, #156]	@ (8003320 <HAL_RCC_ClockConfig+0x1a4>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d901      	bls.n	800328a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e042      	b.n	8003310 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800328a:	4b24      	ldr	r3, [pc, #144]	@ (800331c <HAL_RCC_ClockConfig+0x1a0>)
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	220c      	movs	r2, #12
 8003290:	401a      	ands	r2, r3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	429a      	cmp	r2, r3
 800329a:	d1ec      	bne.n	8003276 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800329c:	4b1e      	ldr	r3, [pc, #120]	@ (8003318 <HAL_RCC_ClockConfig+0x19c>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2201      	movs	r2, #1
 80032a2:	4013      	ands	r3, r2
 80032a4:	683a      	ldr	r2, [r7, #0]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d211      	bcs.n	80032ce <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032aa:	4b1b      	ldr	r3, [pc, #108]	@ (8003318 <HAL_RCC_ClockConfig+0x19c>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2201      	movs	r2, #1
 80032b0:	4393      	bics	r3, r2
 80032b2:	0019      	movs	r1, r3
 80032b4:	4b18      	ldr	r3, [pc, #96]	@ (8003318 <HAL_RCC_ClockConfig+0x19c>)
 80032b6:	683a      	ldr	r2, [r7, #0]
 80032b8:	430a      	orrs	r2, r1
 80032ba:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032bc:	4b16      	ldr	r3, [pc, #88]	@ (8003318 <HAL_RCC_ClockConfig+0x19c>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2201      	movs	r2, #1
 80032c2:	4013      	ands	r3, r2
 80032c4:	683a      	ldr	r2, [r7, #0]
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d001      	beq.n	80032ce <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e020      	b.n	8003310 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2204      	movs	r2, #4
 80032d4:	4013      	ands	r3, r2
 80032d6:	d009      	beq.n	80032ec <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80032d8:	4b10      	ldr	r3, [pc, #64]	@ (800331c <HAL_RCC_ClockConfig+0x1a0>)
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	4a11      	ldr	r2, [pc, #68]	@ (8003324 <HAL_RCC_ClockConfig+0x1a8>)
 80032de:	4013      	ands	r3, r2
 80032e0:	0019      	movs	r1, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	68da      	ldr	r2, [r3, #12]
 80032e6:	4b0d      	ldr	r3, [pc, #52]	@ (800331c <HAL_RCC_ClockConfig+0x1a0>)
 80032e8:	430a      	orrs	r2, r1
 80032ea:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80032ec:	f000 f820 	bl	8003330 <HAL_RCC_GetSysClockFreq>
 80032f0:	0001      	movs	r1, r0
 80032f2:	4b0a      	ldr	r3, [pc, #40]	@ (800331c <HAL_RCC_ClockConfig+0x1a0>)
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	091b      	lsrs	r3, r3, #4
 80032f8:	220f      	movs	r2, #15
 80032fa:	4013      	ands	r3, r2
 80032fc:	4a0a      	ldr	r2, [pc, #40]	@ (8003328 <HAL_RCC_ClockConfig+0x1ac>)
 80032fe:	5cd3      	ldrb	r3, [r2, r3]
 8003300:	000a      	movs	r2, r1
 8003302:	40da      	lsrs	r2, r3
 8003304:	4b09      	ldr	r3, [pc, #36]	@ (800332c <HAL_RCC_ClockConfig+0x1b0>)
 8003306:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003308:	2003      	movs	r0, #3
 800330a:	f7fe f881 	bl	8001410 <HAL_InitTick>
  
  return HAL_OK;
 800330e:	2300      	movs	r3, #0
}
 8003310:	0018      	movs	r0, r3
 8003312:	46bd      	mov	sp, r7
 8003314:	b004      	add	sp, #16
 8003316:	bd80      	pop	{r7, pc}
 8003318:	40022000 	.word	0x40022000
 800331c:	40021000 	.word	0x40021000
 8003320:	00001388 	.word	0x00001388
 8003324:	fffff8ff 	.word	0xfffff8ff
 8003328:	080065d4 	.word	0x080065d4
 800332c:	20000008 	.word	0x20000008

08003330 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b086      	sub	sp, #24
 8003334:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003336:	2300      	movs	r3, #0
 8003338:	60fb      	str	r3, [r7, #12]
 800333a:	2300      	movs	r3, #0
 800333c:	60bb      	str	r3, [r7, #8]
 800333e:	2300      	movs	r3, #0
 8003340:	617b      	str	r3, [r7, #20]
 8003342:	2300      	movs	r3, #0
 8003344:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003346:	2300      	movs	r3, #0
 8003348:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800334a:	4b2d      	ldr	r3, [pc, #180]	@ (8003400 <HAL_RCC_GetSysClockFreq+0xd0>)
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	220c      	movs	r2, #12
 8003354:	4013      	ands	r3, r2
 8003356:	2b0c      	cmp	r3, #12
 8003358:	d046      	beq.n	80033e8 <HAL_RCC_GetSysClockFreq+0xb8>
 800335a:	d848      	bhi.n	80033ee <HAL_RCC_GetSysClockFreq+0xbe>
 800335c:	2b04      	cmp	r3, #4
 800335e:	d002      	beq.n	8003366 <HAL_RCC_GetSysClockFreq+0x36>
 8003360:	2b08      	cmp	r3, #8
 8003362:	d003      	beq.n	800336c <HAL_RCC_GetSysClockFreq+0x3c>
 8003364:	e043      	b.n	80033ee <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003366:	4b27      	ldr	r3, [pc, #156]	@ (8003404 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003368:	613b      	str	r3, [r7, #16]
      break;
 800336a:	e043      	b.n	80033f4 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	0c9b      	lsrs	r3, r3, #18
 8003370:	220f      	movs	r2, #15
 8003372:	4013      	ands	r3, r2
 8003374:	4a24      	ldr	r2, [pc, #144]	@ (8003408 <HAL_RCC_GetSysClockFreq+0xd8>)
 8003376:	5cd3      	ldrb	r3, [r2, r3]
 8003378:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800337a:	4b21      	ldr	r3, [pc, #132]	@ (8003400 <HAL_RCC_GetSysClockFreq+0xd0>)
 800337c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800337e:	220f      	movs	r2, #15
 8003380:	4013      	ands	r3, r2
 8003382:	4a22      	ldr	r2, [pc, #136]	@ (800340c <HAL_RCC_GetSysClockFreq+0xdc>)
 8003384:	5cd3      	ldrb	r3, [r2, r3]
 8003386:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003388:	68fa      	ldr	r2, [r7, #12]
 800338a:	23c0      	movs	r3, #192	@ 0xc0
 800338c:	025b      	lsls	r3, r3, #9
 800338e:	401a      	ands	r2, r3
 8003390:	2380      	movs	r3, #128	@ 0x80
 8003392:	025b      	lsls	r3, r3, #9
 8003394:	429a      	cmp	r2, r3
 8003396:	d109      	bne.n	80033ac <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003398:	68b9      	ldr	r1, [r7, #8]
 800339a:	481a      	ldr	r0, [pc, #104]	@ (8003404 <HAL_RCC_GetSysClockFreq+0xd4>)
 800339c:	f7fc fec6 	bl	800012c <__udivsi3>
 80033a0:	0003      	movs	r3, r0
 80033a2:	001a      	movs	r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4353      	muls	r3, r2
 80033a8:	617b      	str	r3, [r7, #20]
 80033aa:	e01a      	b.n	80033e2 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80033ac:	68fa      	ldr	r2, [r7, #12]
 80033ae:	23c0      	movs	r3, #192	@ 0xc0
 80033b0:	025b      	lsls	r3, r3, #9
 80033b2:	401a      	ands	r2, r3
 80033b4:	23c0      	movs	r3, #192	@ 0xc0
 80033b6:	025b      	lsls	r3, r3, #9
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d109      	bne.n	80033d0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80033bc:	68b9      	ldr	r1, [r7, #8]
 80033be:	4814      	ldr	r0, [pc, #80]	@ (8003410 <HAL_RCC_GetSysClockFreq+0xe0>)
 80033c0:	f7fc feb4 	bl	800012c <__udivsi3>
 80033c4:	0003      	movs	r3, r0
 80033c6:	001a      	movs	r2, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4353      	muls	r3, r2
 80033cc:	617b      	str	r3, [r7, #20]
 80033ce:	e008      	b.n	80033e2 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80033d0:	68b9      	ldr	r1, [r7, #8]
 80033d2:	480c      	ldr	r0, [pc, #48]	@ (8003404 <HAL_RCC_GetSysClockFreq+0xd4>)
 80033d4:	f7fc feaa 	bl	800012c <__udivsi3>
 80033d8:	0003      	movs	r3, r0
 80033da:	001a      	movs	r2, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4353      	muls	r3, r2
 80033e0:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	613b      	str	r3, [r7, #16]
      break;
 80033e6:	e005      	b.n	80033f4 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80033e8:	4b09      	ldr	r3, [pc, #36]	@ (8003410 <HAL_RCC_GetSysClockFreq+0xe0>)
 80033ea:	613b      	str	r3, [r7, #16]
      break;
 80033ec:	e002      	b.n	80033f4 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80033ee:	4b05      	ldr	r3, [pc, #20]	@ (8003404 <HAL_RCC_GetSysClockFreq+0xd4>)
 80033f0:	613b      	str	r3, [r7, #16]
      break;
 80033f2:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80033f4:	693b      	ldr	r3, [r7, #16]
}
 80033f6:	0018      	movs	r0, r3
 80033f8:	46bd      	mov	sp, r7
 80033fa:	b006      	add	sp, #24
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	46c0      	nop			@ (mov r8, r8)
 8003400:	40021000 	.word	0x40021000
 8003404:	007a1200 	.word	0x007a1200
 8003408:	080065ec 	.word	0x080065ec
 800340c:	080065fc 	.word	0x080065fc
 8003410:	02dc6c00 	.word	0x02dc6c00

08003414 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003418:	4b02      	ldr	r3, [pc, #8]	@ (8003424 <HAL_RCC_GetHCLKFreq+0x10>)
 800341a:	681b      	ldr	r3, [r3, #0]
}
 800341c:	0018      	movs	r0, r3
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	46c0      	nop			@ (mov r8, r8)
 8003424:	20000008 	.word	0x20000008

08003428 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800342c:	f7ff fff2 	bl	8003414 <HAL_RCC_GetHCLKFreq>
 8003430:	0001      	movs	r1, r0
 8003432:	4b06      	ldr	r3, [pc, #24]	@ (800344c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	0a1b      	lsrs	r3, r3, #8
 8003438:	2207      	movs	r2, #7
 800343a:	4013      	ands	r3, r2
 800343c:	4a04      	ldr	r2, [pc, #16]	@ (8003450 <HAL_RCC_GetPCLK1Freq+0x28>)
 800343e:	5cd3      	ldrb	r3, [r2, r3]
 8003440:	40d9      	lsrs	r1, r3
 8003442:	000b      	movs	r3, r1
}    
 8003444:	0018      	movs	r0, r3
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	46c0      	nop			@ (mov r8, r8)
 800344c:	40021000 	.word	0x40021000
 8003450:	080065e4 	.word	0x080065e4

08003454 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b086      	sub	sp, #24
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800345c:	2300      	movs	r3, #0
 800345e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003460:	2300      	movs	r3, #0
 8003462:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	2380      	movs	r3, #128	@ 0x80
 800346a:	025b      	lsls	r3, r3, #9
 800346c:	4013      	ands	r3, r2
 800346e:	d100      	bne.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003470:	e08e      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003472:	2017      	movs	r0, #23
 8003474:	183b      	adds	r3, r7, r0
 8003476:	2200      	movs	r2, #0
 8003478:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800347a:	4b67      	ldr	r3, [pc, #412]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800347c:	69da      	ldr	r2, [r3, #28]
 800347e:	2380      	movs	r3, #128	@ 0x80
 8003480:	055b      	lsls	r3, r3, #21
 8003482:	4013      	ands	r3, r2
 8003484:	d110      	bne.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003486:	4b64      	ldr	r3, [pc, #400]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003488:	69da      	ldr	r2, [r3, #28]
 800348a:	4b63      	ldr	r3, [pc, #396]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800348c:	2180      	movs	r1, #128	@ 0x80
 800348e:	0549      	lsls	r1, r1, #21
 8003490:	430a      	orrs	r2, r1
 8003492:	61da      	str	r2, [r3, #28]
 8003494:	4b60      	ldr	r3, [pc, #384]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003496:	69da      	ldr	r2, [r3, #28]
 8003498:	2380      	movs	r3, #128	@ 0x80
 800349a:	055b      	lsls	r3, r3, #21
 800349c:	4013      	ands	r3, r2
 800349e:	60bb      	str	r3, [r7, #8]
 80034a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034a2:	183b      	adds	r3, r7, r0
 80034a4:	2201      	movs	r2, #1
 80034a6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034a8:	4b5c      	ldr	r3, [pc, #368]	@ (800361c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	2380      	movs	r3, #128	@ 0x80
 80034ae:	005b      	lsls	r3, r3, #1
 80034b0:	4013      	ands	r3, r2
 80034b2:	d11a      	bne.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034b4:	4b59      	ldr	r3, [pc, #356]	@ (800361c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	4b58      	ldr	r3, [pc, #352]	@ (800361c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80034ba:	2180      	movs	r1, #128	@ 0x80
 80034bc:	0049      	lsls	r1, r1, #1
 80034be:	430a      	orrs	r2, r1
 80034c0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034c2:	f7fd ffeb 	bl	800149c <HAL_GetTick>
 80034c6:	0003      	movs	r3, r0
 80034c8:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ca:	e008      	b.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034cc:	f7fd ffe6 	bl	800149c <HAL_GetTick>
 80034d0:	0002      	movs	r2, r0
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b64      	cmp	r3, #100	@ 0x64
 80034d8:	d901      	bls.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e097      	b.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034de:	4b4f      	ldr	r3, [pc, #316]	@ (800361c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	2380      	movs	r3, #128	@ 0x80
 80034e4:	005b      	lsls	r3, r3, #1
 80034e6:	4013      	ands	r3, r2
 80034e8:	d0f0      	beq.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80034ea:	4b4b      	ldr	r3, [pc, #300]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80034ec:	6a1a      	ldr	r2, [r3, #32]
 80034ee:	23c0      	movs	r3, #192	@ 0xc0
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	4013      	ands	r3, r2
 80034f4:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d034      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685a      	ldr	r2, [r3, #4]
 8003500:	23c0      	movs	r3, #192	@ 0xc0
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	4013      	ands	r3, r2
 8003506:	68fa      	ldr	r2, [r7, #12]
 8003508:	429a      	cmp	r2, r3
 800350a:	d02c      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800350c:	4b42      	ldr	r3, [pc, #264]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800350e:	6a1b      	ldr	r3, [r3, #32]
 8003510:	4a43      	ldr	r2, [pc, #268]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003512:	4013      	ands	r3, r2
 8003514:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003516:	4b40      	ldr	r3, [pc, #256]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003518:	6a1a      	ldr	r2, [r3, #32]
 800351a:	4b3f      	ldr	r3, [pc, #252]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800351c:	2180      	movs	r1, #128	@ 0x80
 800351e:	0249      	lsls	r1, r1, #9
 8003520:	430a      	orrs	r2, r1
 8003522:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003524:	4b3c      	ldr	r3, [pc, #240]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003526:	6a1a      	ldr	r2, [r3, #32]
 8003528:	4b3b      	ldr	r3, [pc, #236]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800352a:	493e      	ldr	r1, [pc, #248]	@ (8003624 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800352c:	400a      	ands	r2, r1
 800352e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003530:	4b39      	ldr	r3, [pc, #228]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003532:	68fa      	ldr	r2, [r7, #12]
 8003534:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2201      	movs	r2, #1
 800353a:	4013      	ands	r3, r2
 800353c:	d013      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800353e:	f7fd ffad 	bl	800149c <HAL_GetTick>
 8003542:	0003      	movs	r3, r0
 8003544:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003546:	e009      	b.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003548:	f7fd ffa8 	bl	800149c <HAL_GetTick>
 800354c:	0002      	movs	r2, r0
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	4a35      	ldr	r2, [pc, #212]	@ (8003628 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d901      	bls.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	e058      	b.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800355c:	4b2e      	ldr	r3, [pc, #184]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800355e:	6a1b      	ldr	r3, [r3, #32]
 8003560:	2202      	movs	r2, #2
 8003562:	4013      	ands	r3, r2
 8003564:	d0f0      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003566:	4b2c      	ldr	r3, [pc, #176]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	4a2d      	ldr	r2, [pc, #180]	@ (8003620 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800356c:	4013      	ands	r3, r2
 800356e:	0019      	movs	r1, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685a      	ldr	r2, [r3, #4]
 8003574:	4b28      	ldr	r3, [pc, #160]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003576:	430a      	orrs	r2, r1
 8003578:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800357a:	2317      	movs	r3, #23
 800357c:	18fb      	adds	r3, r7, r3
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	2b01      	cmp	r3, #1
 8003582:	d105      	bne.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003584:	4b24      	ldr	r3, [pc, #144]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003586:	69da      	ldr	r2, [r3, #28]
 8003588:	4b23      	ldr	r3, [pc, #140]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800358a:	4928      	ldr	r1, [pc, #160]	@ (800362c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800358c:	400a      	ands	r2, r1
 800358e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2201      	movs	r2, #1
 8003596:	4013      	ands	r3, r2
 8003598:	d009      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800359a:	4b1f      	ldr	r3, [pc, #124]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800359c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800359e:	2203      	movs	r2, #3
 80035a0:	4393      	bics	r3, r2
 80035a2:	0019      	movs	r1, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	689a      	ldr	r2, [r3, #8]
 80035a8:	4b1b      	ldr	r3, [pc, #108]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80035aa:	430a      	orrs	r2, r1
 80035ac:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2220      	movs	r2, #32
 80035b4:	4013      	ands	r3, r2
 80035b6:	d009      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035b8:	4b17      	ldr	r3, [pc, #92]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80035ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035bc:	2210      	movs	r2, #16
 80035be:	4393      	bics	r3, r2
 80035c0:	0019      	movs	r1, r3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	68da      	ldr	r2, [r3, #12]
 80035c6:	4b14      	ldr	r3, [pc, #80]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80035c8:	430a      	orrs	r2, r1
 80035ca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	2380      	movs	r3, #128	@ 0x80
 80035d2:	029b      	lsls	r3, r3, #10
 80035d4:	4013      	ands	r3, r2
 80035d6:	d009      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035d8:	4b0f      	ldr	r3, [pc, #60]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80035da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035dc:	2280      	movs	r2, #128	@ 0x80
 80035de:	4393      	bics	r3, r2
 80035e0:	0019      	movs	r1, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	695a      	ldr	r2, [r3, #20]
 80035e6:	4b0c      	ldr	r3, [pc, #48]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80035e8:	430a      	orrs	r2, r1
 80035ea:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	2380      	movs	r3, #128	@ 0x80
 80035f2:	00db      	lsls	r3, r3, #3
 80035f4:	4013      	ands	r3, r2
 80035f6:	d009      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80035f8:	4b07      	ldr	r3, [pc, #28]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80035fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035fc:	2240      	movs	r2, #64	@ 0x40
 80035fe:	4393      	bics	r3, r2
 8003600:	0019      	movs	r1, r3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	691a      	ldr	r2, [r3, #16]
 8003606:	4b04      	ldr	r3, [pc, #16]	@ (8003618 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003608:	430a      	orrs	r2, r1
 800360a:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800360c:	2300      	movs	r3, #0
}
 800360e:	0018      	movs	r0, r3
 8003610:	46bd      	mov	sp, r7
 8003612:	b006      	add	sp, #24
 8003614:	bd80      	pop	{r7, pc}
 8003616:	46c0      	nop			@ (mov r8, r8)
 8003618:	40021000 	.word	0x40021000
 800361c:	40007000 	.word	0x40007000
 8003620:	fffffcff 	.word	0xfffffcff
 8003624:	fffeffff 	.word	0xfffeffff
 8003628:	00001388 	.word	0x00001388
 800362c:	efffffff 	.word	0xefffffff

08003630 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d101      	bne.n	8003642 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e0a8      	b.n	8003794 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003646:	2b00      	cmp	r3, #0
 8003648:	d109      	bne.n	800365e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685a      	ldr	r2, [r3, #4]
 800364e:	2382      	movs	r3, #130	@ 0x82
 8003650:	005b      	lsls	r3, r3, #1
 8003652:	429a      	cmp	r2, r3
 8003654:	d009      	beq.n	800366a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	61da      	str	r2, [r3, #28]
 800365c:	e005      	b.n	800366a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	225d      	movs	r2, #93	@ 0x5d
 8003674:	5c9b      	ldrb	r3, [r3, r2]
 8003676:	b2db      	uxtb	r3, r3
 8003678:	2b00      	cmp	r3, #0
 800367a:	d107      	bne.n	800368c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	225c      	movs	r2, #92	@ 0x5c
 8003680:	2100      	movs	r1, #0
 8003682:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	0018      	movs	r0, r3
 8003688:	f7fd fa38 	bl	8000afc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	225d      	movs	r2, #93	@ 0x5d
 8003690:	2102      	movs	r1, #2
 8003692:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2140      	movs	r1, #64	@ 0x40
 80036a0:	438a      	bics	r2, r1
 80036a2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	68da      	ldr	r2, [r3, #12]
 80036a8:	23e0      	movs	r3, #224	@ 0xe0
 80036aa:	00db      	lsls	r3, r3, #3
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d902      	bls.n	80036b6 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80036b0:	2300      	movs	r3, #0
 80036b2:	60fb      	str	r3, [r7, #12]
 80036b4:	e002      	b.n	80036bc <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80036b6:	2380      	movs	r3, #128	@ 0x80
 80036b8:	015b      	lsls	r3, r3, #5
 80036ba:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	68da      	ldr	r2, [r3, #12]
 80036c0:	23f0      	movs	r3, #240	@ 0xf0
 80036c2:	011b      	lsls	r3, r3, #4
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d008      	beq.n	80036da <HAL_SPI_Init+0xaa>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	68da      	ldr	r2, [r3, #12]
 80036cc:	23e0      	movs	r3, #224	@ 0xe0
 80036ce:	00db      	lsls	r3, r3, #3
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d002      	beq.n	80036da <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685a      	ldr	r2, [r3, #4]
 80036de:	2382      	movs	r3, #130	@ 0x82
 80036e0:	005b      	lsls	r3, r3, #1
 80036e2:	401a      	ands	r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6899      	ldr	r1, [r3, #8]
 80036e8:	2384      	movs	r3, #132	@ 0x84
 80036ea:	021b      	lsls	r3, r3, #8
 80036ec:	400b      	ands	r3, r1
 80036ee:	431a      	orrs	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	2102      	movs	r1, #2
 80036f6:	400b      	ands	r3, r1
 80036f8:	431a      	orrs	r2, r3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	2101      	movs	r1, #1
 8003700:	400b      	ands	r3, r1
 8003702:	431a      	orrs	r2, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6999      	ldr	r1, [r3, #24]
 8003708:	2380      	movs	r3, #128	@ 0x80
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	400b      	ands	r3, r1
 800370e:	431a      	orrs	r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	69db      	ldr	r3, [r3, #28]
 8003714:	2138      	movs	r1, #56	@ 0x38
 8003716:	400b      	ands	r3, r1
 8003718:	431a      	orrs	r2, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a1b      	ldr	r3, [r3, #32]
 800371e:	2180      	movs	r1, #128	@ 0x80
 8003720:	400b      	ands	r3, r1
 8003722:	431a      	orrs	r2, r3
 8003724:	0011      	movs	r1, r2
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800372a:	2380      	movs	r3, #128	@ 0x80
 800372c:	019b      	lsls	r3, r3, #6
 800372e:	401a      	ands	r2, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	430a      	orrs	r2, r1
 8003736:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	699b      	ldr	r3, [r3, #24]
 800373c:	0c1b      	lsrs	r3, r3, #16
 800373e:	2204      	movs	r2, #4
 8003740:	401a      	ands	r2, r3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003746:	2110      	movs	r1, #16
 8003748:	400b      	ands	r3, r1
 800374a:	431a      	orrs	r2, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003750:	2108      	movs	r1, #8
 8003752:	400b      	ands	r3, r1
 8003754:	431a      	orrs	r2, r3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	68d9      	ldr	r1, [r3, #12]
 800375a:	23f0      	movs	r3, #240	@ 0xf0
 800375c:	011b      	lsls	r3, r3, #4
 800375e:	400b      	ands	r3, r1
 8003760:	431a      	orrs	r2, r3
 8003762:	0011      	movs	r1, r2
 8003764:	68fa      	ldr	r2, [r7, #12]
 8003766:	2380      	movs	r3, #128	@ 0x80
 8003768:	015b      	lsls	r3, r3, #5
 800376a:	401a      	ands	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	430a      	orrs	r2, r1
 8003772:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	69da      	ldr	r2, [r3, #28]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4907      	ldr	r1, [pc, #28]	@ (800379c <HAL_SPI_Init+0x16c>)
 8003780:	400a      	ands	r2, r1
 8003782:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	225d      	movs	r2, #93	@ 0x5d
 800378e:	2101      	movs	r1, #1
 8003790:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003792:	2300      	movs	r3, #0
}
 8003794:	0018      	movs	r0, r3
 8003796:	46bd      	mov	sp, r7
 8003798:	b004      	add	sp, #16
 800379a:	bd80      	pop	{r7, pc}
 800379c:	fffff7ff 	.word	0xfffff7ff

080037a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d101      	bne.n	80037b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e042      	b.n	8003838 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	223d      	movs	r2, #61	@ 0x3d
 80037b6:	5c9b      	ldrb	r3, [r3, r2]
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d107      	bne.n	80037ce <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	223c      	movs	r2, #60	@ 0x3c
 80037c2:	2100      	movs	r1, #0
 80037c4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	0018      	movs	r0, r3
 80037ca:	f7fd fb6f 	bl	8000eac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	223d      	movs	r2, #61	@ 0x3d
 80037d2:	2102      	movs	r1, #2
 80037d4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	3304      	adds	r3, #4
 80037de:	0019      	movs	r1, r3
 80037e0:	0010      	movs	r0, r2
 80037e2:	f000 fb91 	bl	8003f08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2246      	movs	r2, #70	@ 0x46
 80037ea:	2101      	movs	r1, #1
 80037ec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	223e      	movs	r2, #62	@ 0x3e
 80037f2:	2101      	movs	r1, #1
 80037f4:	5499      	strb	r1, [r3, r2]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	223f      	movs	r2, #63	@ 0x3f
 80037fa:	2101      	movs	r1, #1
 80037fc:	5499      	strb	r1, [r3, r2]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2240      	movs	r2, #64	@ 0x40
 8003802:	2101      	movs	r1, #1
 8003804:	5499      	strb	r1, [r3, r2]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2241      	movs	r2, #65	@ 0x41
 800380a:	2101      	movs	r1, #1
 800380c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2242      	movs	r2, #66	@ 0x42
 8003812:	2101      	movs	r1, #1
 8003814:	5499      	strb	r1, [r3, r2]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2243      	movs	r2, #67	@ 0x43
 800381a:	2101      	movs	r1, #1
 800381c:	5499      	strb	r1, [r3, r2]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2244      	movs	r2, #68	@ 0x44
 8003822:	2101      	movs	r1, #1
 8003824:	5499      	strb	r1, [r3, r2]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2245      	movs	r2, #69	@ 0x45
 800382a:	2101      	movs	r1, #1
 800382c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	223d      	movs	r2, #61	@ 0x3d
 8003832:	2101      	movs	r1, #1
 8003834:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003836:	2300      	movs	r3, #0
}
 8003838:	0018      	movs	r0, r3
 800383a:	46bd      	mov	sp, r7
 800383c:	b002      	add	sp, #8
 800383e:	bd80      	pop	{r7, pc}

08003840 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	223d      	movs	r2, #61	@ 0x3d
 800384c:	5c9b      	ldrb	r3, [r3, r2]
 800384e:	b2db      	uxtb	r3, r3
 8003850:	2b01      	cmp	r3, #1
 8003852:	d001      	beq.n	8003858 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e036      	b.n	80038c6 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	223d      	movs	r2, #61	@ 0x3d
 800385c:	2102      	movs	r1, #2
 800385e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68da      	ldr	r2, [r3, #12]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2101      	movs	r1, #1
 800386c:	430a      	orrs	r2, r1
 800386e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a16      	ldr	r2, [pc, #88]	@ (80038d0 <HAL_TIM_Base_Start_IT+0x90>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d00a      	beq.n	8003890 <HAL_TIM_Base_Start_IT+0x50>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	2380      	movs	r3, #128	@ 0x80
 8003880:	05db      	lsls	r3, r3, #23
 8003882:	429a      	cmp	r2, r3
 8003884:	d004      	beq.n	8003890 <HAL_TIM_Base_Start_IT+0x50>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a12      	ldr	r2, [pc, #72]	@ (80038d4 <HAL_TIM_Base_Start_IT+0x94>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d111      	bne.n	80038b4 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	2207      	movs	r2, #7
 8003898:	4013      	ands	r3, r2
 800389a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2b06      	cmp	r3, #6
 80038a0:	d010      	beq.n	80038c4 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2101      	movs	r1, #1
 80038ae:	430a      	orrs	r2, r1
 80038b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038b2:	e007      	b.n	80038c4 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2101      	movs	r1, #1
 80038c0:	430a      	orrs	r2, r1
 80038c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	0018      	movs	r0, r3
 80038c8:	46bd      	mov	sp, r7
 80038ca:	b004      	add	sp, #16
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	46c0      	nop			@ (mov r8, r8)
 80038d0:	40012c00 	.word	0x40012c00
 80038d4:	40000400 	.word	0x40000400

080038d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d101      	bne.n	80038ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e042      	b.n	8003970 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	223d      	movs	r2, #61	@ 0x3d
 80038ee:	5c9b      	ldrb	r3, [r3, r2]
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d107      	bne.n	8003906 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	223c      	movs	r2, #60	@ 0x3c
 80038fa:	2100      	movs	r1, #0
 80038fc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	0018      	movs	r0, r3
 8003902:	f7fd faaf 	bl	8000e64 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	223d      	movs	r2, #61	@ 0x3d
 800390a:	2102      	movs	r1, #2
 800390c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	3304      	adds	r3, #4
 8003916:	0019      	movs	r1, r3
 8003918:	0010      	movs	r0, r2
 800391a:	f000 faf5 	bl	8003f08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2246      	movs	r2, #70	@ 0x46
 8003922:	2101      	movs	r1, #1
 8003924:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	223e      	movs	r2, #62	@ 0x3e
 800392a:	2101      	movs	r1, #1
 800392c:	5499      	strb	r1, [r3, r2]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	223f      	movs	r2, #63	@ 0x3f
 8003932:	2101      	movs	r1, #1
 8003934:	5499      	strb	r1, [r3, r2]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2240      	movs	r2, #64	@ 0x40
 800393a:	2101      	movs	r1, #1
 800393c:	5499      	strb	r1, [r3, r2]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2241      	movs	r2, #65	@ 0x41
 8003942:	2101      	movs	r1, #1
 8003944:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2242      	movs	r2, #66	@ 0x42
 800394a:	2101      	movs	r1, #1
 800394c:	5499      	strb	r1, [r3, r2]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2243      	movs	r2, #67	@ 0x43
 8003952:	2101      	movs	r1, #1
 8003954:	5499      	strb	r1, [r3, r2]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2244      	movs	r2, #68	@ 0x44
 800395a:	2101      	movs	r1, #1
 800395c:	5499      	strb	r1, [r3, r2]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2245      	movs	r2, #69	@ 0x45
 8003962:	2101      	movs	r1, #1
 8003964:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	223d      	movs	r2, #61	@ 0x3d
 800396a:	2101      	movs	r1, #1
 800396c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800396e:	2300      	movs	r3, #0
}
 8003970:	0018      	movs	r0, r3
 8003972:	46bd      	mov	sp, r7
 8003974:	b002      	add	sp, #8
 8003976:	bd80      	pop	{r7, pc}

08003978 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003982:	230f      	movs	r3, #15
 8003984:	18fb      	adds	r3, r7, r3
 8003986:	2200      	movs	r2, #0
 8003988:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d108      	bne.n	80039a2 <HAL_TIM_PWM_Start_IT+0x2a>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	223e      	movs	r2, #62	@ 0x3e
 8003994:	5c9b      	ldrb	r3, [r3, r2]
 8003996:	b2db      	uxtb	r3, r3
 8003998:	3b01      	subs	r3, #1
 800399a:	1e5a      	subs	r2, r3, #1
 800399c:	4193      	sbcs	r3, r2
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	e01f      	b.n	80039e2 <HAL_TIM_PWM_Start_IT+0x6a>
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	2b04      	cmp	r3, #4
 80039a6:	d108      	bne.n	80039ba <HAL_TIM_PWM_Start_IT+0x42>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	223f      	movs	r2, #63	@ 0x3f
 80039ac:	5c9b      	ldrb	r3, [r3, r2]
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	3b01      	subs	r3, #1
 80039b2:	1e5a      	subs	r2, r3, #1
 80039b4:	4193      	sbcs	r3, r2
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	e013      	b.n	80039e2 <HAL_TIM_PWM_Start_IT+0x6a>
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	2b08      	cmp	r3, #8
 80039be:	d108      	bne.n	80039d2 <HAL_TIM_PWM_Start_IT+0x5a>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2240      	movs	r2, #64	@ 0x40
 80039c4:	5c9b      	ldrb	r3, [r3, r2]
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	3b01      	subs	r3, #1
 80039ca:	1e5a      	subs	r2, r3, #1
 80039cc:	4193      	sbcs	r3, r2
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	e007      	b.n	80039e2 <HAL_TIM_PWM_Start_IT+0x6a>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2241      	movs	r2, #65	@ 0x41
 80039d6:	5c9b      	ldrb	r3, [r3, r2]
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	3b01      	subs	r3, #1
 80039dc:	1e5a      	subs	r2, r3, #1
 80039de:	4193      	sbcs	r3, r2
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d001      	beq.n	80039ea <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e0ad      	b.n	8003b46 <HAL_TIM_PWM_Start_IT+0x1ce>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d104      	bne.n	80039fa <HAL_TIM_PWM_Start_IT+0x82>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	223e      	movs	r2, #62	@ 0x3e
 80039f4:	2102      	movs	r1, #2
 80039f6:	5499      	strb	r1, [r3, r2]
 80039f8:	e013      	b.n	8003a22 <HAL_TIM_PWM_Start_IT+0xaa>
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	2b04      	cmp	r3, #4
 80039fe:	d104      	bne.n	8003a0a <HAL_TIM_PWM_Start_IT+0x92>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	223f      	movs	r2, #63	@ 0x3f
 8003a04:	2102      	movs	r1, #2
 8003a06:	5499      	strb	r1, [r3, r2]
 8003a08:	e00b      	b.n	8003a22 <HAL_TIM_PWM_Start_IT+0xaa>
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	2b08      	cmp	r3, #8
 8003a0e:	d104      	bne.n	8003a1a <HAL_TIM_PWM_Start_IT+0xa2>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2240      	movs	r2, #64	@ 0x40
 8003a14:	2102      	movs	r1, #2
 8003a16:	5499      	strb	r1, [r3, r2]
 8003a18:	e003      	b.n	8003a22 <HAL_TIM_PWM_Start_IT+0xaa>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2241      	movs	r2, #65	@ 0x41
 8003a1e:	2102      	movs	r1, #2
 8003a20:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	2b0c      	cmp	r3, #12
 8003a26:	d02a      	beq.n	8003a7e <HAL_TIM_PWM_Start_IT+0x106>
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	2b0c      	cmp	r3, #12
 8003a2c:	d830      	bhi.n	8003a90 <HAL_TIM_PWM_Start_IT+0x118>
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	2b08      	cmp	r3, #8
 8003a32:	d01b      	beq.n	8003a6c <HAL_TIM_PWM_Start_IT+0xf4>
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	2b08      	cmp	r3, #8
 8003a38:	d82a      	bhi.n	8003a90 <HAL_TIM_PWM_Start_IT+0x118>
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d003      	beq.n	8003a48 <HAL_TIM_PWM_Start_IT+0xd0>
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	2b04      	cmp	r3, #4
 8003a44:	d009      	beq.n	8003a5a <HAL_TIM_PWM_Start_IT+0xe2>
 8003a46:	e023      	b.n	8003a90 <HAL_TIM_PWM_Start_IT+0x118>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68da      	ldr	r2, [r3, #12]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2102      	movs	r1, #2
 8003a54:	430a      	orrs	r2, r1
 8003a56:	60da      	str	r2, [r3, #12]
      break;
 8003a58:	e01f      	b.n	8003a9a <HAL_TIM_PWM_Start_IT+0x122>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	68da      	ldr	r2, [r3, #12]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2104      	movs	r1, #4
 8003a66:	430a      	orrs	r2, r1
 8003a68:	60da      	str	r2, [r3, #12]
      break;
 8003a6a:	e016      	b.n	8003a9a <HAL_TIM_PWM_Start_IT+0x122>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68da      	ldr	r2, [r3, #12]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	2108      	movs	r1, #8
 8003a78:	430a      	orrs	r2, r1
 8003a7a:	60da      	str	r2, [r3, #12]
      break;
 8003a7c:	e00d      	b.n	8003a9a <HAL_TIM_PWM_Start_IT+0x122>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	68da      	ldr	r2, [r3, #12]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2110      	movs	r1, #16
 8003a8a:	430a      	orrs	r2, r1
 8003a8c:	60da      	str	r2, [r3, #12]
      break;
 8003a8e:	e004      	b.n	8003a9a <HAL_TIM_PWM_Start_IT+0x122>
    }

    default:
      status = HAL_ERROR;
 8003a90:	230f      	movs	r3, #15
 8003a92:	18fb      	adds	r3, r7, r3
 8003a94:	2201      	movs	r2, #1
 8003a96:	701a      	strb	r2, [r3, #0]
      break;
 8003a98:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8003a9a:	230f      	movs	r3, #15
 8003a9c:	18fb      	adds	r3, r7, r3
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d14d      	bne.n	8003b40 <HAL_TIM_PWM_Start_IT+0x1c8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	6839      	ldr	r1, [r7, #0]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	0018      	movs	r0, r3
 8003aae:	f000 fc8f 	bl	80043d0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a26      	ldr	r2, [pc, #152]	@ (8003b50 <HAL_TIM_PWM_Start_IT+0x1d8>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d009      	beq.n	8003ad0 <HAL_TIM_PWM_Start_IT+0x158>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a24      	ldr	r2, [pc, #144]	@ (8003b54 <HAL_TIM_PWM_Start_IT+0x1dc>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d004      	beq.n	8003ad0 <HAL_TIM_PWM_Start_IT+0x158>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a23      	ldr	r2, [pc, #140]	@ (8003b58 <HAL_TIM_PWM_Start_IT+0x1e0>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d101      	bne.n	8003ad4 <HAL_TIM_PWM_Start_IT+0x15c>
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e000      	b.n	8003ad6 <HAL_TIM_PWM_Start_IT+0x15e>
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d008      	beq.n	8003aec <HAL_TIM_PWM_Start_IT+0x174>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2180      	movs	r1, #128	@ 0x80
 8003ae6:	0209      	lsls	r1, r1, #8
 8003ae8:	430a      	orrs	r2, r1
 8003aea:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a17      	ldr	r2, [pc, #92]	@ (8003b50 <HAL_TIM_PWM_Start_IT+0x1d8>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d00a      	beq.n	8003b0c <HAL_TIM_PWM_Start_IT+0x194>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	2380      	movs	r3, #128	@ 0x80
 8003afc:	05db      	lsls	r3, r3, #23
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d004      	beq.n	8003b0c <HAL_TIM_PWM_Start_IT+0x194>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a15      	ldr	r2, [pc, #84]	@ (8003b5c <HAL_TIM_PWM_Start_IT+0x1e4>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d111      	bne.n	8003b30 <HAL_TIM_PWM_Start_IT+0x1b8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	2207      	movs	r2, #7
 8003b14:	4013      	ands	r3, r2
 8003b16:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	2b06      	cmp	r3, #6
 8003b1c:	d010      	beq.n	8003b40 <HAL_TIM_PWM_Start_IT+0x1c8>
      {
        __HAL_TIM_ENABLE(htim);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2101      	movs	r1, #1
 8003b2a:	430a      	orrs	r2, r1
 8003b2c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b2e:	e007      	b.n	8003b40 <HAL_TIM_PWM_Start_IT+0x1c8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2101      	movs	r1, #1
 8003b3c:	430a      	orrs	r2, r1
 8003b3e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003b40:	230f      	movs	r3, #15
 8003b42:	18fb      	adds	r3, r7, r3
 8003b44:	781b      	ldrb	r3, [r3, #0]
}
 8003b46:	0018      	movs	r0, r3
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	b004      	add	sp, #16
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	46c0      	nop			@ (mov r8, r8)
 8003b50:	40012c00 	.word	0x40012c00
 8003b54:	40014400 	.word	0x40014400
 8003b58:	40014800 	.word	0x40014800
 8003b5c:	40000400 	.word	0x40000400

08003b60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	2202      	movs	r2, #2
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	d021      	beq.n	8003bc4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2202      	movs	r2, #2
 8003b84:	4013      	ands	r3, r2
 8003b86:	d01d      	beq.n	8003bc4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2203      	movs	r2, #3
 8003b8e:	4252      	negs	r2, r2
 8003b90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2201      	movs	r2, #1
 8003b96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	2203      	movs	r2, #3
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	d004      	beq.n	8003bae <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	0018      	movs	r0, r3
 8003ba8:	f000 f996 	bl	8003ed8 <HAL_TIM_IC_CaptureCallback>
 8003bac:	e007      	b.n	8003bbe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	0018      	movs	r0, r3
 8003bb2:	f000 f989 	bl	8003ec8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	0018      	movs	r0, r3
 8003bba:	f000 f995 	bl	8003ee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	2204      	movs	r2, #4
 8003bc8:	4013      	ands	r3, r2
 8003bca:	d022      	beq.n	8003c12 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2204      	movs	r2, #4
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	d01e      	beq.n	8003c12 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2205      	movs	r2, #5
 8003bda:	4252      	negs	r2, r2
 8003bdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2202      	movs	r2, #2
 8003be2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	699a      	ldr	r2, [r3, #24]
 8003bea:	23c0      	movs	r3, #192	@ 0xc0
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	4013      	ands	r3, r2
 8003bf0:	d004      	beq.n	8003bfc <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	0018      	movs	r0, r3
 8003bf6:	f000 f96f 	bl	8003ed8 <HAL_TIM_IC_CaptureCallback>
 8003bfa:	e007      	b.n	8003c0c <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	0018      	movs	r0, r3
 8003c00:	f000 f962 	bl	8003ec8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	0018      	movs	r0, r3
 8003c08:	f000 f96e 	bl	8003ee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	2208      	movs	r2, #8
 8003c16:	4013      	ands	r3, r2
 8003c18:	d021      	beq.n	8003c5e <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2208      	movs	r2, #8
 8003c1e:	4013      	ands	r3, r2
 8003c20:	d01d      	beq.n	8003c5e <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	2209      	movs	r2, #9
 8003c28:	4252      	negs	r2, r2
 8003c2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2204      	movs	r2, #4
 8003c30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	69db      	ldr	r3, [r3, #28]
 8003c38:	2203      	movs	r2, #3
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	d004      	beq.n	8003c48 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	0018      	movs	r0, r3
 8003c42:	f000 f949 	bl	8003ed8 <HAL_TIM_IC_CaptureCallback>
 8003c46:	e007      	b.n	8003c58 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	0018      	movs	r0, r3
 8003c4c:	f000 f93c 	bl	8003ec8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	0018      	movs	r0, r3
 8003c54:	f000 f948 	bl	8003ee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	2210      	movs	r2, #16
 8003c62:	4013      	ands	r3, r2
 8003c64:	d022      	beq.n	8003cac <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2210      	movs	r2, #16
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	d01e      	beq.n	8003cac <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2211      	movs	r2, #17
 8003c74:	4252      	negs	r2, r2
 8003c76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2208      	movs	r2, #8
 8003c7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	69da      	ldr	r2, [r3, #28]
 8003c84:	23c0      	movs	r3, #192	@ 0xc0
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	4013      	ands	r3, r2
 8003c8a:	d004      	beq.n	8003c96 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	0018      	movs	r0, r3
 8003c90:	f000 f922 	bl	8003ed8 <HAL_TIM_IC_CaptureCallback>
 8003c94:	e007      	b.n	8003ca6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	0018      	movs	r0, r3
 8003c9a:	f000 f915 	bl	8003ec8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	0018      	movs	r0, r3
 8003ca2:	f000 f921 	bl	8003ee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	d00c      	beq.n	8003cce <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	4013      	ands	r3, r2
 8003cba:	d008      	beq.n	8003cce <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2202      	movs	r2, #2
 8003cc2:	4252      	negs	r2, r2
 8003cc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	0018      	movs	r0, r3
 8003cca:	f7fc ffe9 	bl	8000ca0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	2280      	movs	r2, #128	@ 0x80
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	d00c      	beq.n	8003cf0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2280      	movs	r2, #128	@ 0x80
 8003cda:	4013      	ands	r3, r2
 8003cdc:	d008      	beq.n	8003cf0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2281      	movs	r2, #129	@ 0x81
 8003ce4:	4252      	negs	r2, r2
 8003ce6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	0018      	movs	r0, r3
 8003cec:	f000 fbf4 	bl	80044d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	2240      	movs	r2, #64	@ 0x40
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	d00c      	beq.n	8003d12 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2240      	movs	r2, #64	@ 0x40
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	d008      	beq.n	8003d12 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2241      	movs	r2, #65	@ 0x41
 8003d06:	4252      	negs	r2, r2
 8003d08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	0018      	movs	r0, r3
 8003d0e:	f000 f8f3 	bl	8003ef8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	2220      	movs	r2, #32
 8003d16:	4013      	ands	r3, r2
 8003d18:	d00c      	beq.n	8003d34 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2220      	movs	r2, #32
 8003d1e:	4013      	ands	r3, r2
 8003d20:	d008      	beq.n	8003d34 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2221      	movs	r2, #33	@ 0x21
 8003d28:	4252      	negs	r2, r2
 8003d2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	0018      	movs	r0, r3
 8003d30:	f000 fbca 	bl	80044c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d34:	46c0      	nop			@ (mov r8, r8)
 8003d36:	46bd      	mov	sp, r7
 8003d38:	b004      	add	sp, #16
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b086      	sub	sp, #24
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d48:	2317      	movs	r3, #23
 8003d4a:	18fb      	adds	r3, r7, r3
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	223c      	movs	r2, #60	@ 0x3c
 8003d54:	5c9b      	ldrb	r3, [r3, r2]
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d101      	bne.n	8003d5e <HAL_TIM_PWM_ConfigChannel+0x22>
 8003d5a:	2302      	movs	r3, #2
 8003d5c:	e0ad      	b.n	8003eba <HAL_TIM_PWM_ConfigChannel+0x17e>
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	223c      	movs	r2, #60	@ 0x3c
 8003d62:	2101      	movs	r1, #1
 8003d64:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2b0c      	cmp	r3, #12
 8003d6a:	d100      	bne.n	8003d6e <HAL_TIM_PWM_ConfigChannel+0x32>
 8003d6c:	e076      	b.n	8003e5c <HAL_TIM_PWM_ConfigChannel+0x120>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2b0c      	cmp	r3, #12
 8003d72:	d900      	bls.n	8003d76 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8003d74:	e095      	b.n	8003ea2 <HAL_TIM_PWM_ConfigChannel+0x166>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2b08      	cmp	r3, #8
 8003d7a:	d04e      	beq.n	8003e1a <HAL_TIM_PWM_ConfigChannel+0xde>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2b08      	cmp	r3, #8
 8003d80:	d900      	bls.n	8003d84 <HAL_TIM_PWM_ConfigChannel+0x48>
 8003d82:	e08e      	b.n	8003ea2 <HAL_TIM_PWM_ConfigChannel+0x166>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d003      	beq.n	8003d92 <HAL_TIM_PWM_ConfigChannel+0x56>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2b04      	cmp	r3, #4
 8003d8e:	d021      	beq.n	8003dd4 <HAL_TIM_PWM_ConfigChannel+0x98>
 8003d90:	e087      	b.n	8003ea2 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68ba      	ldr	r2, [r7, #8]
 8003d98:	0011      	movs	r1, r2
 8003d9a:	0018      	movs	r0, r3
 8003d9c:	f000 f938 	bl	8004010 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	699a      	ldr	r2, [r3, #24]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2108      	movs	r1, #8
 8003dac:	430a      	orrs	r2, r1
 8003dae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	699a      	ldr	r2, [r3, #24]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2104      	movs	r1, #4
 8003dbc:	438a      	bics	r2, r1
 8003dbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	6999      	ldr	r1, [r3, #24]
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	691a      	ldr	r2, [r3, #16]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	430a      	orrs	r2, r1
 8003dd0:	619a      	str	r2, [r3, #24]
      break;
 8003dd2:	e06b      	b.n	8003eac <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	68ba      	ldr	r2, [r7, #8]
 8003dda:	0011      	movs	r1, r2
 8003ddc:	0018      	movs	r0, r3
 8003dde:	f000 f995 	bl	800410c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	699a      	ldr	r2, [r3, #24]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2180      	movs	r1, #128	@ 0x80
 8003dee:	0109      	lsls	r1, r1, #4
 8003df0:	430a      	orrs	r2, r1
 8003df2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	699a      	ldr	r2, [r3, #24]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4931      	ldr	r1, [pc, #196]	@ (8003ec4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003e00:	400a      	ands	r2, r1
 8003e02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	6999      	ldr	r1, [r3, #24]
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	021a      	lsls	r2, r3, #8
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	430a      	orrs	r2, r1
 8003e16:	619a      	str	r2, [r3, #24]
      break;
 8003e18:	e048      	b.n	8003eac <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	68ba      	ldr	r2, [r7, #8]
 8003e20:	0011      	movs	r1, r2
 8003e22:	0018      	movs	r0, r3
 8003e24:	f000 f9f0 	bl	8004208 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	69da      	ldr	r2, [r3, #28]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	2108      	movs	r1, #8
 8003e34:	430a      	orrs	r2, r1
 8003e36:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	69da      	ldr	r2, [r3, #28]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	2104      	movs	r1, #4
 8003e44:	438a      	bics	r2, r1
 8003e46:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	69d9      	ldr	r1, [r3, #28]
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	691a      	ldr	r2, [r3, #16]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	430a      	orrs	r2, r1
 8003e58:	61da      	str	r2, [r3, #28]
      break;
 8003e5a:	e027      	b.n	8003eac <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	68ba      	ldr	r2, [r7, #8]
 8003e62:	0011      	movs	r1, r2
 8003e64:	0018      	movs	r0, r3
 8003e66:	f000 fa4f 	bl	8004308 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	69da      	ldr	r2, [r3, #28]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2180      	movs	r1, #128	@ 0x80
 8003e76:	0109      	lsls	r1, r1, #4
 8003e78:	430a      	orrs	r2, r1
 8003e7a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	69da      	ldr	r2, [r3, #28]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	490f      	ldr	r1, [pc, #60]	@ (8003ec4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003e88:	400a      	ands	r2, r1
 8003e8a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	69d9      	ldr	r1, [r3, #28]
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	021a      	lsls	r2, r3, #8
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	430a      	orrs	r2, r1
 8003e9e:	61da      	str	r2, [r3, #28]
      break;
 8003ea0:	e004      	b.n	8003eac <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8003ea2:	2317      	movs	r3, #23
 8003ea4:	18fb      	adds	r3, r7, r3
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	701a      	strb	r2, [r3, #0]
      break;
 8003eaa:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	223c      	movs	r2, #60	@ 0x3c
 8003eb0:	2100      	movs	r1, #0
 8003eb2:	5499      	strb	r1, [r3, r2]

  return status;
 8003eb4:	2317      	movs	r3, #23
 8003eb6:	18fb      	adds	r3, r7, r3
 8003eb8:	781b      	ldrb	r3, [r3, #0]
}
 8003eba:	0018      	movs	r0, r3
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	b006      	add	sp, #24
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	46c0      	nop			@ (mov r8, r8)
 8003ec4:	fffffbff 	.word	0xfffffbff

08003ec8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ed0:	46c0      	nop			@ (mov r8, r8)
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	b002      	add	sp, #8
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ee0:	46c0      	nop			@ (mov r8, r8)
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	b002      	add	sp, #8
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ef0:	46c0      	nop			@ (mov r8, r8)
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	b002      	add	sp, #8
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f00:	46c0      	nop			@ (mov r8, r8)
 8003f02:	46bd      	mov	sp, r7
 8003f04:	b002      	add	sp, #8
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	4a37      	ldr	r2, [pc, #220]	@ (8003ff8 <TIM_Base_SetConfig+0xf0>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d008      	beq.n	8003f32 <TIM_Base_SetConfig+0x2a>
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	2380      	movs	r3, #128	@ 0x80
 8003f24:	05db      	lsls	r3, r3, #23
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d003      	beq.n	8003f32 <TIM_Base_SetConfig+0x2a>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a33      	ldr	r2, [pc, #204]	@ (8003ffc <TIM_Base_SetConfig+0xf4>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d108      	bne.n	8003f44 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2270      	movs	r2, #112	@ 0x70
 8003f36:	4393      	bics	r3, r2
 8003f38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	68fa      	ldr	r2, [r7, #12]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	4a2c      	ldr	r2, [pc, #176]	@ (8003ff8 <TIM_Base_SetConfig+0xf0>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d014      	beq.n	8003f76 <TIM_Base_SetConfig+0x6e>
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	2380      	movs	r3, #128	@ 0x80
 8003f50:	05db      	lsls	r3, r3, #23
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d00f      	beq.n	8003f76 <TIM_Base_SetConfig+0x6e>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a28      	ldr	r2, [pc, #160]	@ (8003ffc <TIM_Base_SetConfig+0xf4>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d00b      	beq.n	8003f76 <TIM_Base_SetConfig+0x6e>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a27      	ldr	r2, [pc, #156]	@ (8004000 <TIM_Base_SetConfig+0xf8>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d007      	beq.n	8003f76 <TIM_Base_SetConfig+0x6e>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4a26      	ldr	r2, [pc, #152]	@ (8004004 <TIM_Base_SetConfig+0xfc>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d003      	beq.n	8003f76 <TIM_Base_SetConfig+0x6e>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a25      	ldr	r2, [pc, #148]	@ (8004008 <TIM_Base_SetConfig+0x100>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d108      	bne.n	8003f88 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	4a24      	ldr	r2, [pc, #144]	@ (800400c <TIM_Base_SetConfig+0x104>)
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	68fa      	ldr	r2, [r7, #12]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2280      	movs	r2, #128	@ 0x80
 8003f8c:	4393      	bics	r3, r2
 8003f8e:	001a      	movs	r2, r3
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	695b      	ldr	r3, [r3, #20]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	68fa      	ldr	r2, [r7, #12]
 8003f9c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	689a      	ldr	r2, [r3, #8]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a11      	ldr	r2, [pc, #68]	@ (8003ff8 <TIM_Base_SetConfig+0xf0>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d007      	beq.n	8003fc6 <TIM_Base_SetConfig+0xbe>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a12      	ldr	r2, [pc, #72]	@ (8004004 <TIM_Base_SetConfig+0xfc>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d003      	beq.n	8003fc6 <TIM_Base_SetConfig+0xbe>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a11      	ldr	r2, [pc, #68]	@ (8004008 <TIM_Base_SetConfig+0x100>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d103      	bne.n	8003fce <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	691a      	ldr	r2, [r3, #16]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	4013      	ands	r3, r2
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d106      	bne.n	8003fee <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	691b      	ldr	r3, [r3, #16]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	4393      	bics	r3, r2
 8003fe8:	001a      	movs	r2, r3
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	611a      	str	r2, [r3, #16]
  }
}
 8003fee:	46c0      	nop			@ (mov r8, r8)
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	b004      	add	sp, #16
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	46c0      	nop			@ (mov r8, r8)
 8003ff8:	40012c00 	.word	0x40012c00
 8003ffc:	40000400 	.word	0x40000400
 8004000:	40002000 	.word	0x40002000
 8004004:	40014400 	.word	0x40014400
 8004008:	40014800 	.word	0x40014800
 800400c:	fffffcff 	.word	0xfffffcff

08004010 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b086      	sub	sp, #24
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a1b      	ldr	r3, [r3, #32]
 800401e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a1b      	ldr	r3, [r3, #32]
 8004024:	2201      	movs	r2, #1
 8004026:	4393      	bics	r3, r2
 8004028:	001a      	movs	r2, r3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	699b      	ldr	r3, [r3, #24]
 8004038:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2270      	movs	r2, #112	@ 0x70
 800403e:	4393      	bics	r3, r2
 8004040:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2203      	movs	r2, #3
 8004046:	4393      	bics	r3, r2
 8004048:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68fa      	ldr	r2, [r7, #12]
 8004050:	4313      	orrs	r3, r2
 8004052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	2202      	movs	r2, #2
 8004058:	4393      	bics	r3, r2
 800405a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	697a      	ldr	r2, [r7, #20]
 8004062:	4313      	orrs	r3, r2
 8004064:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a23      	ldr	r2, [pc, #140]	@ (80040f8 <TIM_OC1_SetConfig+0xe8>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d007      	beq.n	800407e <TIM_OC1_SetConfig+0x6e>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a22      	ldr	r2, [pc, #136]	@ (80040fc <TIM_OC1_SetConfig+0xec>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d003      	beq.n	800407e <TIM_OC1_SetConfig+0x6e>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a21      	ldr	r2, [pc, #132]	@ (8004100 <TIM_OC1_SetConfig+0xf0>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d10c      	bne.n	8004098 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	2208      	movs	r2, #8
 8004082:	4393      	bics	r3, r2
 8004084:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	697a      	ldr	r2, [r7, #20]
 800408c:	4313      	orrs	r3, r2
 800408e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	2204      	movs	r2, #4
 8004094:	4393      	bics	r3, r2
 8004096:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4a17      	ldr	r2, [pc, #92]	@ (80040f8 <TIM_OC1_SetConfig+0xe8>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d007      	beq.n	80040b0 <TIM_OC1_SetConfig+0xa0>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4a16      	ldr	r2, [pc, #88]	@ (80040fc <TIM_OC1_SetConfig+0xec>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d003      	beq.n	80040b0 <TIM_OC1_SetConfig+0xa0>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4a15      	ldr	r2, [pc, #84]	@ (8004100 <TIM_OC1_SetConfig+0xf0>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d111      	bne.n	80040d4 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	4a14      	ldr	r2, [pc, #80]	@ (8004104 <TIM_OC1_SetConfig+0xf4>)
 80040b4:	4013      	ands	r3, r2
 80040b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	4a13      	ldr	r2, [pc, #76]	@ (8004108 <TIM_OC1_SetConfig+0xf8>)
 80040bc:	4013      	ands	r3, r2
 80040be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	695b      	ldr	r3, [r3, #20]
 80040c4:	693a      	ldr	r2, [r7, #16]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	699b      	ldr	r3, [r3, #24]
 80040ce:	693a      	ldr	r2, [r7, #16]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	693a      	ldr	r2, [r7, #16]
 80040d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	68fa      	ldr	r2, [r7, #12]
 80040de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	685a      	ldr	r2, [r3, #4]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	697a      	ldr	r2, [r7, #20]
 80040ec:	621a      	str	r2, [r3, #32]
}
 80040ee:	46c0      	nop			@ (mov r8, r8)
 80040f0:	46bd      	mov	sp, r7
 80040f2:	b006      	add	sp, #24
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	46c0      	nop			@ (mov r8, r8)
 80040f8:	40012c00 	.word	0x40012c00
 80040fc:	40014400 	.word	0x40014400
 8004100:	40014800 	.word	0x40014800
 8004104:	fffffeff 	.word	0xfffffeff
 8004108:	fffffdff 	.word	0xfffffdff

0800410c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b086      	sub	sp, #24
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a1b      	ldr	r3, [r3, #32]
 800411a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a1b      	ldr	r3, [r3, #32]
 8004120:	2210      	movs	r2, #16
 8004122:	4393      	bics	r3, r2
 8004124:	001a      	movs	r2, r3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	699b      	ldr	r3, [r3, #24]
 8004134:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	4a2c      	ldr	r2, [pc, #176]	@ (80041ec <TIM_OC2_SetConfig+0xe0>)
 800413a:	4013      	ands	r3, r2
 800413c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	4a2b      	ldr	r2, [pc, #172]	@ (80041f0 <TIM_OC2_SetConfig+0xe4>)
 8004142:	4013      	ands	r3, r2
 8004144:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	021b      	lsls	r3, r3, #8
 800414c:	68fa      	ldr	r2, [r7, #12]
 800414e:	4313      	orrs	r3, r2
 8004150:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	2220      	movs	r2, #32
 8004156:	4393      	bics	r3, r2
 8004158:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	011b      	lsls	r3, r3, #4
 8004160:	697a      	ldr	r2, [r7, #20]
 8004162:	4313      	orrs	r3, r2
 8004164:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a22      	ldr	r2, [pc, #136]	@ (80041f4 <TIM_OC2_SetConfig+0xe8>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d10d      	bne.n	800418a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	2280      	movs	r2, #128	@ 0x80
 8004172:	4393      	bics	r3, r2
 8004174:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	011b      	lsls	r3, r3, #4
 800417c:	697a      	ldr	r2, [r7, #20]
 800417e:	4313      	orrs	r3, r2
 8004180:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	2240      	movs	r2, #64	@ 0x40
 8004186:	4393      	bics	r3, r2
 8004188:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a19      	ldr	r2, [pc, #100]	@ (80041f4 <TIM_OC2_SetConfig+0xe8>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d007      	beq.n	80041a2 <TIM_OC2_SetConfig+0x96>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a18      	ldr	r2, [pc, #96]	@ (80041f8 <TIM_OC2_SetConfig+0xec>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d003      	beq.n	80041a2 <TIM_OC2_SetConfig+0x96>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a17      	ldr	r2, [pc, #92]	@ (80041fc <TIM_OC2_SetConfig+0xf0>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d113      	bne.n	80041ca <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	4a16      	ldr	r2, [pc, #88]	@ (8004200 <TIM_OC2_SetConfig+0xf4>)
 80041a6:	4013      	ands	r3, r2
 80041a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	4a15      	ldr	r2, [pc, #84]	@ (8004204 <TIM_OC2_SetConfig+0xf8>)
 80041ae:	4013      	ands	r3, r2
 80041b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	695b      	ldr	r3, [r3, #20]
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	693a      	ldr	r2, [r7, #16]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	693a      	ldr	r2, [r7, #16]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	693a      	ldr	r2, [r7, #16]
 80041ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	685a      	ldr	r2, [r3, #4]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	697a      	ldr	r2, [r7, #20]
 80041e2:	621a      	str	r2, [r3, #32]
}
 80041e4:	46c0      	nop			@ (mov r8, r8)
 80041e6:	46bd      	mov	sp, r7
 80041e8:	b006      	add	sp, #24
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	ffff8fff 	.word	0xffff8fff
 80041f0:	fffffcff 	.word	0xfffffcff
 80041f4:	40012c00 	.word	0x40012c00
 80041f8:	40014400 	.word	0x40014400
 80041fc:	40014800 	.word	0x40014800
 8004200:	fffffbff 	.word	0xfffffbff
 8004204:	fffff7ff 	.word	0xfffff7ff

08004208 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b086      	sub	sp, #24
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a1b      	ldr	r3, [r3, #32]
 8004216:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a1b      	ldr	r3, [r3, #32]
 800421c:	4a31      	ldr	r2, [pc, #196]	@ (80042e4 <TIM_OC3_SetConfig+0xdc>)
 800421e:	401a      	ands	r2, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	69db      	ldr	r3, [r3, #28]
 800422e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2270      	movs	r2, #112	@ 0x70
 8004234:	4393      	bics	r3, r2
 8004236:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2203      	movs	r2, #3
 800423c:	4393      	bics	r3, r2
 800423e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	68fa      	ldr	r2, [r7, #12]
 8004246:	4313      	orrs	r3, r2
 8004248:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	4a26      	ldr	r2, [pc, #152]	@ (80042e8 <TIM_OC3_SetConfig+0xe0>)
 800424e:	4013      	ands	r3, r2
 8004250:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	021b      	lsls	r3, r3, #8
 8004258:	697a      	ldr	r2, [r7, #20]
 800425a:	4313      	orrs	r3, r2
 800425c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a22      	ldr	r2, [pc, #136]	@ (80042ec <TIM_OC3_SetConfig+0xe4>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d10d      	bne.n	8004282 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	4a21      	ldr	r2, [pc, #132]	@ (80042f0 <TIM_OC3_SetConfig+0xe8>)
 800426a:	4013      	ands	r3, r2
 800426c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	021b      	lsls	r3, r3, #8
 8004274:	697a      	ldr	r2, [r7, #20]
 8004276:	4313      	orrs	r3, r2
 8004278:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	4a1d      	ldr	r2, [pc, #116]	@ (80042f4 <TIM_OC3_SetConfig+0xec>)
 800427e:	4013      	ands	r3, r2
 8004280:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a19      	ldr	r2, [pc, #100]	@ (80042ec <TIM_OC3_SetConfig+0xe4>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d007      	beq.n	800429a <TIM_OC3_SetConfig+0x92>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a1a      	ldr	r2, [pc, #104]	@ (80042f8 <TIM_OC3_SetConfig+0xf0>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d003      	beq.n	800429a <TIM_OC3_SetConfig+0x92>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a19      	ldr	r2, [pc, #100]	@ (80042fc <TIM_OC3_SetConfig+0xf4>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d113      	bne.n	80042c2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	4a18      	ldr	r2, [pc, #96]	@ (8004300 <TIM_OC3_SetConfig+0xf8>)
 800429e:	4013      	ands	r3, r2
 80042a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	4a17      	ldr	r2, [pc, #92]	@ (8004304 <TIM_OC3_SetConfig+0xfc>)
 80042a6:	4013      	ands	r3, r2
 80042a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	695b      	ldr	r3, [r3, #20]
 80042ae:	011b      	lsls	r3, r3, #4
 80042b0:	693a      	ldr	r2, [r7, #16]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	699b      	ldr	r3, [r3, #24]
 80042ba:	011b      	lsls	r3, r3, #4
 80042bc:	693a      	ldr	r2, [r7, #16]
 80042be:	4313      	orrs	r3, r2
 80042c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	693a      	ldr	r2, [r7, #16]
 80042c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	685a      	ldr	r2, [r3, #4]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	697a      	ldr	r2, [r7, #20]
 80042da:	621a      	str	r2, [r3, #32]
}
 80042dc:	46c0      	nop			@ (mov r8, r8)
 80042de:	46bd      	mov	sp, r7
 80042e0:	b006      	add	sp, #24
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	fffffeff 	.word	0xfffffeff
 80042e8:	fffffdff 	.word	0xfffffdff
 80042ec:	40012c00 	.word	0x40012c00
 80042f0:	fffff7ff 	.word	0xfffff7ff
 80042f4:	fffffbff 	.word	0xfffffbff
 80042f8:	40014400 	.word	0x40014400
 80042fc:	40014800 	.word	0x40014800
 8004300:	ffffefff 	.word	0xffffefff
 8004304:	ffffdfff 	.word	0xffffdfff

08004308 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b086      	sub	sp, #24
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a1b      	ldr	r3, [r3, #32]
 8004316:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6a1b      	ldr	r3, [r3, #32]
 800431c:	4a24      	ldr	r2, [pc, #144]	@ (80043b0 <TIM_OC4_SetConfig+0xa8>)
 800431e:	401a      	ands	r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	69db      	ldr	r3, [r3, #28]
 800432e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	4a20      	ldr	r2, [pc, #128]	@ (80043b4 <TIM_OC4_SetConfig+0xac>)
 8004334:	4013      	ands	r3, r2
 8004336:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	4a1f      	ldr	r2, [pc, #124]	@ (80043b8 <TIM_OC4_SetConfig+0xb0>)
 800433c:	4013      	ands	r3, r2
 800433e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	021b      	lsls	r3, r3, #8
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	4313      	orrs	r3, r2
 800434a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	4a1b      	ldr	r2, [pc, #108]	@ (80043bc <TIM_OC4_SetConfig+0xb4>)
 8004350:	4013      	ands	r3, r2
 8004352:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	031b      	lsls	r3, r3, #12
 800435a:	693a      	ldr	r2, [r7, #16]
 800435c:	4313      	orrs	r3, r2
 800435e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4a17      	ldr	r2, [pc, #92]	@ (80043c0 <TIM_OC4_SetConfig+0xb8>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d007      	beq.n	8004378 <TIM_OC4_SetConfig+0x70>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4a16      	ldr	r2, [pc, #88]	@ (80043c4 <TIM_OC4_SetConfig+0xbc>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d003      	beq.n	8004378 <TIM_OC4_SetConfig+0x70>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4a15      	ldr	r2, [pc, #84]	@ (80043c8 <TIM_OC4_SetConfig+0xc0>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d109      	bne.n	800438c <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	4a14      	ldr	r2, [pc, #80]	@ (80043cc <TIM_OC4_SetConfig+0xc4>)
 800437c:	4013      	ands	r3, r2
 800437e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	695b      	ldr	r3, [r3, #20]
 8004384:	019b      	lsls	r3, r3, #6
 8004386:	697a      	ldr	r2, [r7, #20]
 8004388:	4313      	orrs	r3, r2
 800438a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	697a      	ldr	r2, [r7, #20]
 8004390:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	68fa      	ldr	r2, [r7, #12]
 8004396:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	685a      	ldr	r2, [r3, #4]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	693a      	ldr	r2, [r7, #16]
 80043a4:	621a      	str	r2, [r3, #32]
}
 80043a6:	46c0      	nop			@ (mov r8, r8)
 80043a8:	46bd      	mov	sp, r7
 80043aa:	b006      	add	sp, #24
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	46c0      	nop			@ (mov r8, r8)
 80043b0:	ffffefff 	.word	0xffffefff
 80043b4:	ffff8fff 	.word	0xffff8fff
 80043b8:	fffffcff 	.word	0xfffffcff
 80043bc:	ffffdfff 	.word	0xffffdfff
 80043c0:	40012c00 	.word	0x40012c00
 80043c4:	40014400 	.word	0x40014400
 80043c8:	40014800 	.word	0x40014800
 80043cc:	ffffbfff 	.word	0xffffbfff

080043d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b086      	sub	sp, #24
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	221f      	movs	r2, #31
 80043e0:	4013      	ands	r3, r2
 80043e2:	2201      	movs	r2, #1
 80043e4:	409a      	lsls	r2, r3
 80043e6:	0013      	movs	r3, r2
 80043e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6a1b      	ldr	r3, [r3, #32]
 80043ee:	697a      	ldr	r2, [r7, #20]
 80043f0:	43d2      	mvns	r2, r2
 80043f2:	401a      	ands	r2, r3
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6a1a      	ldr	r2, [r3, #32]
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	211f      	movs	r1, #31
 8004400:	400b      	ands	r3, r1
 8004402:	6879      	ldr	r1, [r7, #4]
 8004404:	4099      	lsls	r1, r3
 8004406:	000b      	movs	r3, r1
 8004408:	431a      	orrs	r2, r3
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	621a      	str	r2, [r3, #32]
}
 800440e:	46c0      	nop			@ (mov r8, r8)
 8004410:	46bd      	mov	sp, r7
 8004412:	b006      	add	sp, #24
 8004414:	bd80      	pop	{r7, pc}
	...

08004418 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	223c      	movs	r2, #60	@ 0x3c
 8004426:	5c9b      	ldrb	r3, [r3, r2]
 8004428:	2b01      	cmp	r3, #1
 800442a:	d101      	bne.n	8004430 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800442c:	2302      	movs	r3, #2
 800442e:	e042      	b.n	80044b6 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	223c      	movs	r2, #60	@ 0x3c
 8004434:	2101      	movs	r1, #1
 8004436:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	223d      	movs	r2, #61	@ 0x3d
 800443c:	2102      	movs	r1, #2
 800443e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2270      	movs	r2, #112	@ 0x70
 8004454:	4393      	bics	r3, r2
 8004456:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	68fa      	ldr	r2, [r7, #12]
 800445e:	4313      	orrs	r3, r2
 8004460:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a14      	ldr	r2, [pc, #80]	@ (80044c0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d00a      	beq.n	800448a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	2380      	movs	r3, #128	@ 0x80
 800447a:	05db      	lsls	r3, r3, #23
 800447c:	429a      	cmp	r2, r3
 800447e:	d004      	beq.n	800448a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a0f      	ldr	r2, [pc, #60]	@ (80044c4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d10c      	bne.n	80044a4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	2280      	movs	r2, #128	@ 0x80
 800448e:	4393      	bics	r3, r2
 8004490:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	68ba      	ldr	r2, [r7, #8]
 8004498:	4313      	orrs	r3, r2
 800449a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68ba      	ldr	r2, [r7, #8]
 80044a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	223d      	movs	r2, #61	@ 0x3d
 80044a8:	2101      	movs	r1, #1
 80044aa:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	223c      	movs	r2, #60	@ 0x3c
 80044b0:	2100      	movs	r1, #0
 80044b2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	0018      	movs	r0, r3
 80044b8:	46bd      	mov	sp, r7
 80044ba:	b004      	add	sp, #16
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	46c0      	nop			@ (mov r8, r8)
 80044c0:	40012c00 	.word	0x40012c00
 80044c4:	40000400 	.word	0x40000400

080044c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044d0:	46c0      	nop			@ (mov r8, r8)
 80044d2:	46bd      	mov	sp, r7
 80044d4:	b002      	add	sp, #8
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044e0:	46c0      	nop			@ (mov r8, r8)
 80044e2:	46bd      	mov	sp, r7
 80044e4:	b002      	add	sp, #8
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d101      	bne.n	80044fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e044      	b.n	8004584 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d107      	bne.n	8004512 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2278      	movs	r2, #120	@ 0x78
 8004506:	2100      	movs	r1, #0
 8004508:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	0018      	movs	r0, r3
 800450e:	f7fc fe8d 	bl	800122c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2224      	movs	r2, #36	@ 0x24
 8004516:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2101      	movs	r1, #1
 8004524:	438a      	bics	r2, r1
 8004526:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800452c:	2b00      	cmp	r3, #0
 800452e:	d003      	beq.n	8004538 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	0018      	movs	r0, r3
 8004534:	f000 fd28 	bl	8004f88 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	0018      	movs	r0, r3
 800453c:	f000 fbe4 	bl	8004d08 <UART_SetConfig>
 8004540:	0003      	movs	r3, r0
 8004542:	2b01      	cmp	r3, #1
 8004544:	d101      	bne.n	800454a <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e01c      	b.n	8004584 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	685a      	ldr	r2, [r3, #4]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	490d      	ldr	r1, [pc, #52]	@ (800458c <HAL_UART_Init+0xa4>)
 8004556:	400a      	ands	r2, r1
 8004558:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	689a      	ldr	r2, [r3, #8]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	212a      	movs	r1, #42	@ 0x2a
 8004566:	438a      	bics	r2, r1
 8004568:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	2101      	movs	r1, #1
 8004576:	430a      	orrs	r2, r1
 8004578:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	0018      	movs	r0, r3
 800457e:	f000 fdb7 	bl	80050f0 <UART_CheckIdleState>
 8004582:	0003      	movs	r3, r0
}
 8004584:	0018      	movs	r0, r3
 8004586:	46bd      	mov	sp, r7
 8004588:	b002      	add	sp, #8
 800458a:	bd80      	pop	{r7, pc}
 800458c:	ffffb7ff 	.word	0xffffb7ff

08004590 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b088      	sub	sp, #32
 8004594:	af00      	add	r7, sp, #0
 8004596:	60f8      	str	r0, [r7, #12]
 8004598:	60b9      	str	r1, [r7, #8]
 800459a:	1dbb      	adds	r3, r7, #6
 800459c:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80045a2:	2b20      	cmp	r3, #32
 80045a4:	d15b      	bne.n	800465e <HAL_UART_Transmit_IT+0xce>
  {
    if ((pData == NULL) || (Size == 0U))
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d003      	beq.n	80045b4 <HAL_UART_Transmit_IT+0x24>
 80045ac:	1dbb      	adds	r3, r7, #6
 80045ae:	881b      	ldrh	r3, [r3, #0]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d101      	bne.n	80045b8 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e053      	b.n	8004660 <HAL_UART_Transmit_IT+0xd0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	689a      	ldr	r2, [r3, #8]
 80045bc:	2380      	movs	r3, #128	@ 0x80
 80045be:	015b      	lsls	r3, r3, #5
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d109      	bne.n	80045d8 <HAL_UART_Transmit_IT+0x48>
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	691b      	ldr	r3, [r3, #16]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d105      	bne.n	80045d8 <HAL_UART_Transmit_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	2201      	movs	r2, #1
 80045d0:	4013      	ands	r3, r2
 80045d2:	d001      	beq.n	80045d8 <HAL_UART_Transmit_IT+0x48>
      {
        return  HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	e043      	b.n	8004660 <HAL_UART_Transmit_IT+0xd0>
      }
    }

    huart->pTxBuffPtr  = pData;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	68ba      	ldr	r2, [r7, #8]
 80045dc:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	1dba      	adds	r2, r7, #6
 80045e2:	2150      	movs	r1, #80	@ 0x50
 80045e4:	8812      	ldrh	r2, [r2, #0]
 80045e6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	1dba      	adds	r2, r7, #6
 80045ec:	2152      	movs	r1, #82	@ 0x52
 80045ee:	8812      	ldrh	r2, [r2, #0]
 80045f0:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2200      	movs	r2, #0
 80045f6:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2284      	movs	r2, #132	@ 0x84
 80045fc:	2100      	movs	r1, #0
 80045fe:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2221      	movs	r2, #33	@ 0x21
 8004604:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	689a      	ldr	r2, [r3, #8]
 800460a:	2380      	movs	r3, #128	@ 0x80
 800460c:	015b      	lsls	r3, r3, #5
 800460e:	429a      	cmp	r2, r3
 8004610:	d107      	bne.n	8004622 <HAL_UART_Transmit_IT+0x92>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d103      	bne.n	8004622 <HAL_UART_Transmit_IT+0x92>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	4a12      	ldr	r2, [pc, #72]	@ (8004668 <HAL_UART_Transmit_IT+0xd8>)
 800461e:	66da      	str	r2, [r3, #108]	@ 0x6c
 8004620:	e002      	b.n	8004628 <HAL_UART_Transmit_IT+0x98>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	4a11      	ldr	r2, [pc, #68]	@ (800466c <HAL_UART_Transmit_IT+0xdc>)
 8004626:	66da      	str	r2, [r3, #108]	@ 0x6c
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004628:	f3ef 8310 	mrs	r3, PRIMASK
 800462c:	613b      	str	r3, [r7, #16]
  return(result);
 800462e:	693b      	ldr	r3, [r7, #16]
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004630:	61fb      	str	r3, [r7, #28]
 8004632:	2301      	movs	r3, #1
 8004634:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	f383 8810 	msr	PRIMASK, r3
}
 800463c:	46c0      	nop			@ (mov r8, r8)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2180      	movs	r1, #128	@ 0x80
 800464a:	430a      	orrs	r2, r1
 800464c:	601a      	str	r2, [r3, #0]
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004652:	69bb      	ldr	r3, [r7, #24]
 8004654:	f383 8810 	msr	PRIMASK, r3
}
 8004658:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 800465a:	2300      	movs	r3, #0
 800465c:	e000      	b.n	8004660 <HAL_UART_Transmit_IT+0xd0>
  }
  else
  {
    return HAL_BUSY;
 800465e:	2302      	movs	r3, #2
  }
}
 8004660:	0018      	movs	r0, r3
 8004662:	46bd      	mov	sp, r7
 8004664:	b008      	add	sp, #32
 8004666:	bd80      	pop	{r7, pc}
 8004668:	0800565d 	.word	0x0800565d
 800466c:	080055ab 	.word	0x080055ab

08004670 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b088      	sub	sp, #32
 8004674:	af00      	add	r7, sp, #0
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	60b9      	str	r1, [r7, #8]
 800467a:	1dbb      	adds	r3, r7, #6
 800467c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2280      	movs	r2, #128	@ 0x80
 8004682:	589b      	ldr	r3, [r3, r2]
 8004684:	2b20      	cmp	r3, #32
 8004686:	d145      	bne.n	8004714 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d003      	beq.n	8004696 <HAL_UART_Receive_IT+0x26>
 800468e:	1dbb      	adds	r3, r7, #6
 8004690:	881b      	ldrh	r3, [r3, #0]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d101      	bne.n	800469a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e03d      	b.n	8004716 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	689a      	ldr	r2, [r3, #8]
 800469e:	2380      	movs	r3, #128	@ 0x80
 80046a0:	015b      	lsls	r3, r3, #5
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d109      	bne.n	80046ba <HAL_UART_Receive_IT+0x4a>
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d105      	bne.n	80046ba <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	2201      	movs	r2, #1
 80046b2:	4013      	ands	r3, r2
 80046b4:	d001      	beq.n	80046ba <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e02d      	b.n	8004716 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2200      	movs	r2, #0
 80046be:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	685a      	ldr	r2, [r3, #4]
 80046c6:	2380      	movs	r3, #128	@ 0x80
 80046c8:	041b      	lsls	r3, r3, #16
 80046ca:	4013      	ands	r3, r2
 80046cc:	d019      	beq.n	8004702 <HAL_UART_Receive_IT+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046ce:	f3ef 8310 	mrs	r3, PRIMASK
 80046d2:	613b      	str	r3, [r7, #16]
  return(result);
 80046d4:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80046d6:	61fb      	str	r3, [r7, #28]
 80046d8:	2301      	movs	r3, #1
 80046da:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	f383 8810 	msr	PRIMASK, r3
}
 80046e2:	46c0      	nop			@ (mov r8, r8)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	2180      	movs	r1, #128	@ 0x80
 80046f0:	04c9      	lsls	r1, r1, #19
 80046f2:	430a      	orrs	r2, r1
 80046f4:	601a      	str	r2, [r3, #0]
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	f383 8810 	msr	PRIMASK, r3
}
 8004700:	46c0      	nop			@ (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004702:	1dbb      	adds	r3, r7, #6
 8004704:	881a      	ldrh	r2, [r3, #0]
 8004706:	68b9      	ldr	r1, [r7, #8]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	0018      	movs	r0, r3
 800470c:	f000 fe08 	bl	8005320 <UART_Start_Receive_IT>
 8004710:	0003      	movs	r3, r0
 8004712:	e000      	b.n	8004716 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8004714:	2302      	movs	r3, #2
  }
}
 8004716:	0018      	movs	r0, r3
 8004718:	46bd      	mov	sp, r7
 800471a:	b008      	add	sp, #32
 800471c:	bd80      	pop	{r7, pc}
	...

08004720 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004720:	b590      	push	{r4, r7, lr}
 8004722:	b0ab      	sub	sp, #172	@ 0xac
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	69db      	ldr	r3, [r3, #28]
 800472e:	22a4      	movs	r2, #164	@ 0xa4
 8004730:	18b9      	adds	r1, r7, r2
 8004732:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	20a0      	movs	r0, #160	@ 0xa0
 800473c:	1839      	adds	r1, r7, r0
 800473e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	219c      	movs	r1, #156	@ 0x9c
 8004748:	1879      	adds	r1, r7, r1
 800474a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800474c:	0011      	movs	r1, r2
 800474e:	18bb      	adds	r3, r7, r2
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a99      	ldr	r2, [pc, #612]	@ (80049b8 <HAL_UART_IRQHandler+0x298>)
 8004754:	4013      	ands	r3, r2
 8004756:	2298      	movs	r2, #152	@ 0x98
 8004758:	18bc      	adds	r4, r7, r2
 800475a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 800475c:	18bb      	adds	r3, r7, r2
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d114      	bne.n	800478e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004764:	187b      	adds	r3, r7, r1
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2220      	movs	r2, #32
 800476a:	4013      	ands	r3, r2
 800476c:	d00f      	beq.n	800478e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800476e:	183b      	adds	r3, r7, r0
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	2220      	movs	r2, #32
 8004774:	4013      	ands	r3, r2
 8004776:	d00a      	beq.n	800478e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800477c:	2b00      	cmp	r3, #0
 800477e:	d100      	bne.n	8004782 <HAL_UART_IRQHandler+0x62>
 8004780:	e29e      	b.n	8004cc0 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	0010      	movs	r0, r2
 800478a:	4798      	blx	r3
      }
      return;
 800478c:	e298      	b.n	8004cc0 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800478e:	2398      	movs	r3, #152	@ 0x98
 8004790:	18fb      	adds	r3, r7, r3
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d100      	bne.n	800479a <HAL_UART_IRQHandler+0x7a>
 8004798:	e114      	b.n	80049c4 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800479a:	239c      	movs	r3, #156	@ 0x9c
 800479c:	18fb      	adds	r3, r7, r3
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2201      	movs	r2, #1
 80047a2:	4013      	ands	r3, r2
 80047a4:	d106      	bne.n	80047b4 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80047a6:	23a0      	movs	r3, #160	@ 0xa0
 80047a8:	18fb      	adds	r3, r7, r3
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a83      	ldr	r2, [pc, #524]	@ (80049bc <HAL_UART_IRQHandler+0x29c>)
 80047ae:	4013      	ands	r3, r2
 80047b0:	d100      	bne.n	80047b4 <HAL_UART_IRQHandler+0x94>
 80047b2:	e107      	b.n	80049c4 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80047b4:	23a4      	movs	r3, #164	@ 0xa4
 80047b6:	18fb      	adds	r3, r7, r3
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	2201      	movs	r2, #1
 80047bc:	4013      	ands	r3, r2
 80047be:	d012      	beq.n	80047e6 <HAL_UART_IRQHandler+0xc6>
 80047c0:	23a0      	movs	r3, #160	@ 0xa0
 80047c2:	18fb      	adds	r3, r7, r3
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	2380      	movs	r3, #128	@ 0x80
 80047c8:	005b      	lsls	r3, r3, #1
 80047ca:	4013      	ands	r3, r2
 80047cc:	d00b      	beq.n	80047e6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	2201      	movs	r2, #1
 80047d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2284      	movs	r2, #132	@ 0x84
 80047da:	589b      	ldr	r3, [r3, r2]
 80047dc:	2201      	movs	r2, #1
 80047de:	431a      	orrs	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2184      	movs	r1, #132	@ 0x84
 80047e4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80047e6:	23a4      	movs	r3, #164	@ 0xa4
 80047e8:	18fb      	adds	r3, r7, r3
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2202      	movs	r2, #2
 80047ee:	4013      	ands	r3, r2
 80047f0:	d011      	beq.n	8004816 <HAL_UART_IRQHandler+0xf6>
 80047f2:	239c      	movs	r3, #156	@ 0x9c
 80047f4:	18fb      	adds	r3, r7, r3
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	2201      	movs	r2, #1
 80047fa:	4013      	ands	r3, r2
 80047fc:	d00b      	beq.n	8004816 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2202      	movs	r2, #2
 8004804:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2284      	movs	r2, #132	@ 0x84
 800480a:	589b      	ldr	r3, [r3, r2]
 800480c:	2204      	movs	r2, #4
 800480e:	431a      	orrs	r2, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2184      	movs	r1, #132	@ 0x84
 8004814:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004816:	23a4      	movs	r3, #164	@ 0xa4
 8004818:	18fb      	adds	r3, r7, r3
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2204      	movs	r2, #4
 800481e:	4013      	ands	r3, r2
 8004820:	d011      	beq.n	8004846 <HAL_UART_IRQHandler+0x126>
 8004822:	239c      	movs	r3, #156	@ 0x9c
 8004824:	18fb      	adds	r3, r7, r3
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2201      	movs	r2, #1
 800482a:	4013      	ands	r3, r2
 800482c:	d00b      	beq.n	8004846 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	2204      	movs	r2, #4
 8004834:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2284      	movs	r2, #132	@ 0x84
 800483a:	589b      	ldr	r3, [r3, r2]
 800483c:	2202      	movs	r2, #2
 800483e:	431a      	orrs	r2, r3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2184      	movs	r1, #132	@ 0x84
 8004844:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004846:	23a4      	movs	r3, #164	@ 0xa4
 8004848:	18fb      	adds	r3, r7, r3
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2208      	movs	r2, #8
 800484e:	4013      	ands	r3, r2
 8004850:	d017      	beq.n	8004882 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004852:	23a0      	movs	r3, #160	@ 0xa0
 8004854:	18fb      	adds	r3, r7, r3
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	2220      	movs	r2, #32
 800485a:	4013      	ands	r3, r2
 800485c:	d105      	bne.n	800486a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800485e:	239c      	movs	r3, #156	@ 0x9c
 8004860:	18fb      	adds	r3, r7, r3
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2201      	movs	r2, #1
 8004866:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004868:	d00b      	beq.n	8004882 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	2208      	movs	r2, #8
 8004870:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2284      	movs	r2, #132	@ 0x84
 8004876:	589b      	ldr	r3, [r3, r2]
 8004878:	2208      	movs	r2, #8
 800487a:	431a      	orrs	r2, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2184      	movs	r1, #132	@ 0x84
 8004880:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004882:	23a4      	movs	r3, #164	@ 0xa4
 8004884:	18fb      	adds	r3, r7, r3
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	2380      	movs	r3, #128	@ 0x80
 800488a:	011b      	lsls	r3, r3, #4
 800488c:	4013      	ands	r3, r2
 800488e:	d013      	beq.n	80048b8 <HAL_UART_IRQHandler+0x198>
 8004890:	23a0      	movs	r3, #160	@ 0xa0
 8004892:	18fb      	adds	r3, r7, r3
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	2380      	movs	r3, #128	@ 0x80
 8004898:	04db      	lsls	r3, r3, #19
 800489a:	4013      	ands	r3, r2
 800489c:	d00c      	beq.n	80048b8 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2280      	movs	r2, #128	@ 0x80
 80048a4:	0112      	lsls	r2, r2, #4
 80048a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2284      	movs	r2, #132	@ 0x84
 80048ac:	589b      	ldr	r3, [r3, r2]
 80048ae:	2220      	movs	r2, #32
 80048b0:	431a      	orrs	r2, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2184      	movs	r1, #132	@ 0x84
 80048b6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2284      	movs	r2, #132	@ 0x84
 80048bc:	589b      	ldr	r3, [r3, r2]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d100      	bne.n	80048c4 <HAL_UART_IRQHandler+0x1a4>
 80048c2:	e1ff      	b.n	8004cc4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80048c4:	23a4      	movs	r3, #164	@ 0xa4
 80048c6:	18fb      	adds	r3, r7, r3
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2220      	movs	r2, #32
 80048cc:	4013      	ands	r3, r2
 80048ce:	d00e      	beq.n	80048ee <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80048d0:	23a0      	movs	r3, #160	@ 0xa0
 80048d2:	18fb      	adds	r3, r7, r3
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	2220      	movs	r2, #32
 80048d8:	4013      	ands	r3, r2
 80048da:	d008      	beq.n	80048ee <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d004      	beq.n	80048ee <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	0010      	movs	r0, r2
 80048ec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2284      	movs	r2, #132	@ 0x84
 80048f2:	589b      	ldr	r3, [r3, r2]
 80048f4:	2194      	movs	r1, #148	@ 0x94
 80048f6:	187a      	adds	r2, r7, r1
 80048f8:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	2240      	movs	r2, #64	@ 0x40
 8004902:	4013      	ands	r3, r2
 8004904:	2b40      	cmp	r3, #64	@ 0x40
 8004906:	d004      	beq.n	8004912 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004908:	187b      	adds	r3, r7, r1
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2228      	movs	r2, #40	@ 0x28
 800490e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004910:	d047      	beq.n	80049a2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	0018      	movs	r0, r3
 8004916:	f000 fdcd 	bl	80054b4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	2240      	movs	r2, #64	@ 0x40
 8004922:	4013      	ands	r3, r2
 8004924:	2b40      	cmp	r3, #64	@ 0x40
 8004926:	d137      	bne.n	8004998 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004928:	f3ef 8310 	mrs	r3, PRIMASK
 800492c:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 800492e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004930:	2090      	movs	r0, #144	@ 0x90
 8004932:	183a      	adds	r2, r7, r0
 8004934:	6013      	str	r3, [r2, #0]
 8004936:	2301      	movs	r3, #1
 8004938:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800493a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800493c:	f383 8810 	msr	PRIMASK, r3
}
 8004940:	46c0      	nop			@ (mov r8, r8)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	689a      	ldr	r2, [r3, #8]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	2140      	movs	r1, #64	@ 0x40
 800494e:	438a      	bics	r2, r1
 8004950:	609a      	str	r2, [r3, #8]
 8004952:	183b      	adds	r3, r7, r0
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004958:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800495a:	f383 8810 	msr	PRIMASK, r3
}
 800495e:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004964:	2b00      	cmp	r3, #0
 8004966:	d012      	beq.n	800498e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800496c:	4a14      	ldr	r2, [pc, #80]	@ (80049c0 <HAL_UART_IRQHandler+0x2a0>)
 800496e:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004974:	0018      	movs	r0, r3
 8004976:	f7fd fb4f 	bl	8002018 <HAL_DMA_Abort_IT>
 800497a:	1e03      	subs	r3, r0, #0
 800497c:	d01a      	beq.n	80049b4 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004982:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004988:	0018      	movs	r0, r3
 800498a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800498c:	e012      	b.n	80049b4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	0018      	movs	r0, r3
 8004992:	f000 f9a5 	bl	8004ce0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004996:	e00d      	b.n	80049b4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	0018      	movs	r0, r3
 800499c:	f000 f9a0 	bl	8004ce0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049a0:	e008      	b.n	80049b4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	0018      	movs	r0, r3
 80049a6:	f000 f99b 	bl	8004ce0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2284      	movs	r2, #132	@ 0x84
 80049ae:	2100      	movs	r1, #0
 80049b0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80049b2:	e187      	b.n	8004cc4 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049b4:	46c0      	nop			@ (mov r8, r8)
    return;
 80049b6:	e185      	b.n	8004cc4 <HAL_UART_IRQHandler+0x5a4>
 80049b8:	0000080f 	.word	0x0000080f
 80049bc:	04000120 	.word	0x04000120
 80049c0:	0800557d 	.word	0x0800557d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d000      	beq.n	80049ce <HAL_UART_IRQHandler+0x2ae>
 80049cc:	e139      	b.n	8004c42 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80049ce:	23a4      	movs	r3, #164	@ 0xa4
 80049d0:	18fb      	adds	r3, r7, r3
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2210      	movs	r2, #16
 80049d6:	4013      	ands	r3, r2
 80049d8:	d100      	bne.n	80049dc <HAL_UART_IRQHandler+0x2bc>
 80049da:	e132      	b.n	8004c42 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80049dc:	23a0      	movs	r3, #160	@ 0xa0
 80049de:	18fb      	adds	r3, r7, r3
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	2210      	movs	r2, #16
 80049e4:	4013      	ands	r3, r2
 80049e6:	d100      	bne.n	80049ea <HAL_UART_IRQHandler+0x2ca>
 80049e8:	e12b      	b.n	8004c42 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	2210      	movs	r2, #16
 80049f0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	2240      	movs	r2, #64	@ 0x40
 80049fa:	4013      	ands	r3, r2
 80049fc:	2b40      	cmp	r3, #64	@ 0x40
 80049fe:	d000      	beq.n	8004a02 <HAL_UART_IRQHandler+0x2e2>
 8004a00:	e09f      	b.n	8004b42 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	685a      	ldr	r2, [r3, #4]
 8004a0a:	217e      	movs	r1, #126	@ 0x7e
 8004a0c:	187b      	adds	r3, r7, r1
 8004a0e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004a10:	187b      	adds	r3, r7, r1
 8004a12:	881b      	ldrh	r3, [r3, #0]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d100      	bne.n	8004a1a <HAL_UART_IRQHandler+0x2fa>
 8004a18:	e156      	b.n	8004cc8 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2258      	movs	r2, #88	@ 0x58
 8004a1e:	5a9b      	ldrh	r3, [r3, r2]
 8004a20:	187a      	adds	r2, r7, r1
 8004a22:	8812      	ldrh	r2, [r2, #0]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d300      	bcc.n	8004a2a <HAL_UART_IRQHandler+0x30a>
 8004a28:	e14e      	b.n	8004cc8 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	187a      	adds	r2, r7, r1
 8004a2e:	215a      	movs	r1, #90	@ 0x5a
 8004a30:	8812      	ldrh	r2, [r2, #0]
 8004a32:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a38:	699b      	ldr	r3, [r3, #24]
 8004a3a:	2b20      	cmp	r3, #32
 8004a3c:	d06f      	beq.n	8004b1e <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a3e:	f3ef 8310 	mrs	r3, PRIMASK
 8004a42:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8004a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a46:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004a48:	2301      	movs	r3, #1
 8004a4a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a4e:	f383 8810 	msr	PRIMASK, r3
}
 8004a52:	46c0      	nop			@ (mov r8, r8)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	499e      	ldr	r1, [pc, #632]	@ (8004cd8 <HAL_UART_IRQHandler+0x5b8>)
 8004a60:	400a      	ands	r2, r1
 8004a62:	601a      	str	r2, [r3, #0]
 8004a64:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004a66:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a6a:	f383 8810 	msr	PRIMASK, r3
}
 8004a6e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a70:	f3ef 8310 	mrs	r3, PRIMASK
 8004a74:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8004a76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a78:	677b      	str	r3, [r7, #116]	@ 0x74
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a80:	f383 8810 	msr	PRIMASK, r3
}
 8004a84:	46c0      	nop			@ (mov r8, r8)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	689a      	ldr	r2, [r3, #8]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2101      	movs	r1, #1
 8004a92:	438a      	bics	r2, r1
 8004a94:	609a      	str	r2, [r3, #8]
 8004a96:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a98:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a9c:	f383 8810 	msr	PRIMASK, r3
}
 8004aa0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004aa2:	f3ef 8310 	mrs	r3, PRIMASK
 8004aa6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8004aa8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004aaa:	673b      	str	r3, [r7, #112]	@ 0x70
 8004aac:	2301      	movs	r3, #1
 8004aae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ab0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ab2:	f383 8810 	msr	PRIMASK, r3
}
 8004ab6:	46c0      	nop			@ (mov r8, r8)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	689a      	ldr	r2, [r3, #8]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2140      	movs	r1, #64	@ 0x40
 8004ac4:	438a      	bics	r2, r1
 8004ac6:	609a      	str	r2, [r3, #8]
 8004ac8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004aca:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004acc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ace:	f383 8810 	msr	PRIMASK, r3
}
 8004ad2:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2280      	movs	r2, #128	@ 0x80
 8004ad8:	2120      	movs	r1, #32
 8004ada:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ae2:	f3ef 8310 	mrs	r3, PRIMASK
 8004ae6:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8004ae8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004aea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004aec:	2301      	movs	r3, #1
 8004aee:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004af0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004af2:	f383 8810 	msr	PRIMASK, r3
}
 8004af6:	46c0      	nop			@ (mov r8, r8)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	2110      	movs	r1, #16
 8004b04:	438a      	bics	r2, r1
 8004b06:	601a      	str	r2, [r3, #0]
 8004b08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b0a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b0c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b0e:	f383 8810 	msr	PRIMASK, r3
}
 8004b12:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b18:	0018      	movs	r0, r3
 8004b1a:	f7fd fa45 	bl	8001fa8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2202      	movs	r2, #2
 8004b22:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2258      	movs	r2, #88	@ 0x58
 8004b28:	5a9a      	ldrh	r2, [r3, r2]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	215a      	movs	r1, #90	@ 0x5a
 8004b2e:	5a5b      	ldrh	r3, [r3, r1]
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	b29a      	uxth	r2, r3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	0011      	movs	r1, r2
 8004b3a:	0018      	movs	r0, r3
 8004b3c:	f000 f8d8 	bl	8004cf0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004b40:	e0c2      	b.n	8004cc8 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2258      	movs	r2, #88	@ 0x58
 8004b46:	5a99      	ldrh	r1, [r3, r2]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	225a      	movs	r2, #90	@ 0x5a
 8004b4c:	5a9b      	ldrh	r3, [r3, r2]
 8004b4e:	b29a      	uxth	r2, r3
 8004b50:	208e      	movs	r0, #142	@ 0x8e
 8004b52:	183b      	adds	r3, r7, r0
 8004b54:	1a8a      	subs	r2, r1, r2
 8004b56:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	225a      	movs	r2, #90	@ 0x5a
 8004b5c:	5a9b      	ldrh	r3, [r3, r2]
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d100      	bne.n	8004b66 <HAL_UART_IRQHandler+0x446>
 8004b64:	e0b2      	b.n	8004ccc <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 8004b66:	183b      	adds	r3, r7, r0
 8004b68:	881b      	ldrh	r3, [r3, #0]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d100      	bne.n	8004b70 <HAL_UART_IRQHandler+0x450>
 8004b6e:	e0ad      	b.n	8004ccc <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b70:	f3ef 8310 	mrs	r3, PRIMASK
 8004b74:	60fb      	str	r3, [r7, #12]
  return(result);
 8004b76:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b78:	2488      	movs	r4, #136	@ 0x88
 8004b7a:	193a      	adds	r2, r7, r4
 8004b7c:	6013      	str	r3, [r2, #0]
 8004b7e:	2301      	movs	r3, #1
 8004b80:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	f383 8810 	msr	PRIMASK, r3
}
 8004b88:	46c0      	nop			@ (mov r8, r8)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4951      	ldr	r1, [pc, #324]	@ (8004cdc <HAL_UART_IRQHandler+0x5bc>)
 8004b96:	400a      	ands	r2, r1
 8004b98:	601a      	str	r2, [r3, #0]
 8004b9a:	193b      	adds	r3, r7, r4
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	f383 8810 	msr	PRIMASK, r3
}
 8004ba6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ba8:	f3ef 8310 	mrs	r3, PRIMASK
 8004bac:	61bb      	str	r3, [r7, #24]
  return(result);
 8004bae:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bb0:	2484      	movs	r4, #132	@ 0x84
 8004bb2:	193a      	adds	r2, r7, r4
 8004bb4:	6013      	str	r3, [r2, #0]
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	f383 8810 	msr	PRIMASK, r3
}
 8004bc0:	46c0      	nop			@ (mov r8, r8)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	689a      	ldr	r2, [r3, #8]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2101      	movs	r1, #1
 8004bce:	438a      	bics	r2, r1
 8004bd0:	609a      	str	r2, [r3, #8]
 8004bd2:	193b      	adds	r3, r7, r4
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bd8:	6a3b      	ldr	r3, [r7, #32]
 8004bda:	f383 8810 	msr	PRIMASK, r3
}
 8004bde:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2280      	movs	r2, #128	@ 0x80
 8004be4:	2120      	movs	r1, #32
 8004be6:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bf4:	f3ef 8310 	mrs	r3, PRIMASK
 8004bf8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bfc:	2480      	movs	r4, #128	@ 0x80
 8004bfe:	193a      	adds	r2, r7, r4
 8004c00:	6013      	str	r3, [r2, #0]
 8004c02:	2301      	movs	r3, #1
 8004c04:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c08:	f383 8810 	msr	PRIMASK, r3
}
 8004c0c:	46c0      	nop			@ (mov r8, r8)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2110      	movs	r1, #16
 8004c1a:	438a      	bics	r2, r1
 8004c1c:	601a      	str	r2, [r3, #0]
 8004c1e:	193b      	adds	r3, r7, r4
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c26:	f383 8810 	msr	PRIMASK, r3
}
 8004c2a:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2202      	movs	r2, #2
 8004c30:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004c32:	183b      	adds	r3, r7, r0
 8004c34:	881a      	ldrh	r2, [r3, #0]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	0011      	movs	r1, r2
 8004c3a:	0018      	movs	r0, r3
 8004c3c:	f000 f858 	bl	8004cf0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004c40:	e044      	b.n	8004ccc <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004c42:	23a4      	movs	r3, #164	@ 0xa4
 8004c44:	18fb      	adds	r3, r7, r3
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	2380      	movs	r3, #128	@ 0x80
 8004c4a:	035b      	lsls	r3, r3, #13
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	d010      	beq.n	8004c72 <HAL_UART_IRQHandler+0x552>
 8004c50:	239c      	movs	r3, #156	@ 0x9c
 8004c52:	18fb      	adds	r3, r7, r3
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	2380      	movs	r3, #128	@ 0x80
 8004c58:	03db      	lsls	r3, r3, #15
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	d009      	beq.n	8004c72 <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	2280      	movs	r2, #128	@ 0x80
 8004c64:	0352      	lsls	r2, r2, #13
 8004c66:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	0018      	movs	r0, r3
 8004c6c:	f000 ff38 	bl	8005ae0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004c70:	e02f      	b.n	8004cd2 <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004c72:	23a4      	movs	r3, #164	@ 0xa4
 8004c74:	18fb      	adds	r3, r7, r3
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2280      	movs	r2, #128	@ 0x80
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	d00f      	beq.n	8004c9e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004c7e:	23a0      	movs	r3, #160	@ 0xa0
 8004c80:	18fb      	adds	r3, r7, r3
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2280      	movs	r2, #128	@ 0x80
 8004c86:	4013      	ands	r3, r2
 8004c88:	d009      	beq.n	8004c9e <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d01e      	beq.n	8004cd0 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	0010      	movs	r0, r2
 8004c9a:	4798      	blx	r3
    }
    return;
 8004c9c:	e018      	b.n	8004cd0 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004c9e:	23a4      	movs	r3, #164	@ 0xa4
 8004ca0:	18fb      	adds	r3, r7, r3
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2240      	movs	r2, #64	@ 0x40
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	d013      	beq.n	8004cd2 <HAL_UART_IRQHandler+0x5b2>
 8004caa:	23a0      	movs	r3, #160	@ 0xa0
 8004cac:	18fb      	adds	r3, r7, r3
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2240      	movs	r2, #64	@ 0x40
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	d00d      	beq.n	8004cd2 <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	0018      	movs	r0, r3
 8004cba:	f000 fd2d 	bl	8005718 <UART_EndTransmit_IT>
    return;
 8004cbe:	e008      	b.n	8004cd2 <HAL_UART_IRQHandler+0x5b2>
      return;
 8004cc0:	46c0      	nop			@ (mov r8, r8)
 8004cc2:	e006      	b.n	8004cd2 <HAL_UART_IRQHandler+0x5b2>
    return;
 8004cc4:	46c0      	nop			@ (mov r8, r8)
 8004cc6:	e004      	b.n	8004cd2 <HAL_UART_IRQHandler+0x5b2>
      return;
 8004cc8:	46c0      	nop			@ (mov r8, r8)
 8004cca:	e002      	b.n	8004cd2 <HAL_UART_IRQHandler+0x5b2>
      return;
 8004ccc:	46c0      	nop			@ (mov r8, r8)
 8004cce:	e000      	b.n	8004cd2 <HAL_UART_IRQHandler+0x5b2>
    return;
 8004cd0:	46c0      	nop			@ (mov r8, r8)
  }

}
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	b02b      	add	sp, #172	@ 0xac
 8004cd6:	bd90      	pop	{r4, r7, pc}
 8004cd8:	fffffeff 	.word	0xfffffeff
 8004cdc:	fffffedf 	.word	0xfffffedf

08004ce0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b082      	sub	sp, #8
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004ce8:	46c0      	nop			@ (mov r8, r8)
 8004cea:	46bd      	mov	sp, r7
 8004cec:	b002      	add	sp, #8
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b082      	sub	sp, #8
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	000a      	movs	r2, r1
 8004cfa:	1cbb      	adds	r3, r7, #2
 8004cfc:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004cfe:	46c0      	nop			@ (mov r8, r8)
 8004d00:	46bd      	mov	sp, r7
 8004d02:	b002      	add	sp, #8
 8004d04:	bd80      	pop	{r7, pc}
	...

08004d08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b088      	sub	sp, #32
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d10:	231e      	movs	r3, #30
 8004d12:	18fb      	adds	r3, r7, r3
 8004d14:	2200      	movs	r2, #0
 8004d16:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	689a      	ldr	r2, [r3, #8]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	691b      	ldr	r3, [r3, #16]
 8004d20:	431a      	orrs	r2, r3
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	695b      	ldr	r3, [r3, #20]
 8004d26:	431a      	orrs	r2, r3
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	69db      	ldr	r3, [r3, #28]
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a8d      	ldr	r2, [pc, #564]	@ (8004f6c <UART_SetConfig+0x264>)
 8004d38:	4013      	ands	r3, r2
 8004d3a:	0019      	movs	r1, r3
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	697a      	ldr	r2, [r7, #20]
 8004d42:	430a      	orrs	r2, r1
 8004d44:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	4a88      	ldr	r2, [pc, #544]	@ (8004f70 <UART_SetConfig+0x268>)
 8004d4e:	4013      	ands	r3, r2
 8004d50:	0019      	movs	r1, r3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	68da      	ldr	r2, [r3, #12]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	430a      	orrs	r2, r1
 8004d5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	699b      	ldr	r3, [r3, #24]
 8004d62:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a1b      	ldr	r3, [r3, #32]
 8004d68:	697a      	ldr	r2, [r7, #20]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	4a7f      	ldr	r2, [pc, #508]	@ (8004f74 <UART_SetConfig+0x26c>)
 8004d76:	4013      	ands	r3, r2
 8004d78:	0019      	movs	r1, r3
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	697a      	ldr	r2, [r7, #20]
 8004d80:	430a      	orrs	r2, r1
 8004d82:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a7b      	ldr	r2, [pc, #492]	@ (8004f78 <UART_SetConfig+0x270>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d127      	bne.n	8004dde <UART_SetConfig+0xd6>
 8004d8e:	4b7b      	ldr	r3, [pc, #492]	@ (8004f7c <UART_SetConfig+0x274>)
 8004d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d92:	2203      	movs	r2, #3
 8004d94:	4013      	ands	r3, r2
 8004d96:	2b03      	cmp	r3, #3
 8004d98:	d00d      	beq.n	8004db6 <UART_SetConfig+0xae>
 8004d9a:	d81b      	bhi.n	8004dd4 <UART_SetConfig+0xcc>
 8004d9c:	2b02      	cmp	r3, #2
 8004d9e:	d014      	beq.n	8004dca <UART_SetConfig+0xc2>
 8004da0:	d818      	bhi.n	8004dd4 <UART_SetConfig+0xcc>
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d002      	beq.n	8004dac <UART_SetConfig+0xa4>
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d00a      	beq.n	8004dc0 <UART_SetConfig+0xb8>
 8004daa:	e013      	b.n	8004dd4 <UART_SetConfig+0xcc>
 8004dac:	231f      	movs	r3, #31
 8004dae:	18fb      	adds	r3, r7, r3
 8004db0:	2200      	movs	r2, #0
 8004db2:	701a      	strb	r2, [r3, #0]
 8004db4:	e021      	b.n	8004dfa <UART_SetConfig+0xf2>
 8004db6:	231f      	movs	r3, #31
 8004db8:	18fb      	adds	r3, r7, r3
 8004dba:	2202      	movs	r2, #2
 8004dbc:	701a      	strb	r2, [r3, #0]
 8004dbe:	e01c      	b.n	8004dfa <UART_SetConfig+0xf2>
 8004dc0:	231f      	movs	r3, #31
 8004dc2:	18fb      	adds	r3, r7, r3
 8004dc4:	2204      	movs	r2, #4
 8004dc6:	701a      	strb	r2, [r3, #0]
 8004dc8:	e017      	b.n	8004dfa <UART_SetConfig+0xf2>
 8004dca:	231f      	movs	r3, #31
 8004dcc:	18fb      	adds	r3, r7, r3
 8004dce:	2208      	movs	r2, #8
 8004dd0:	701a      	strb	r2, [r3, #0]
 8004dd2:	e012      	b.n	8004dfa <UART_SetConfig+0xf2>
 8004dd4:	231f      	movs	r3, #31
 8004dd6:	18fb      	adds	r3, r7, r3
 8004dd8:	2210      	movs	r2, #16
 8004dda:	701a      	strb	r2, [r3, #0]
 8004ddc:	e00d      	b.n	8004dfa <UART_SetConfig+0xf2>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a67      	ldr	r2, [pc, #412]	@ (8004f80 <UART_SetConfig+0x278>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d104      	bne.n	8004df2 <UART_SetConfig+0xea>
 8004de8:	231f      	movs	r3, #31
 8004dea:	18fb      	adds	r3, r7, r3
 8004dec:	2200      	movs	r2, #0
 8004dee:	701a      	strb	r2, [r3, #0]
 8004df0:	e003      	b.n	8004dfa <UART_SetConfig+0xf2>
 8004df2:	231f      	movs	r3, #31
 8004df4:	18fb      	adds	r3, r7, r3
 8004df6:	2210      	movs	r2, #16
 8004df8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	69da      	ldr	r2, [r3, #28]
 8004dfe:	2380      	movs	r3, #128	@ 0x80
 8004e00:	021b      	lsls	r3, r3, #8
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d15c      	bne.n	8004ec0 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8004e06:	231f      	movs	r3, #31
 8004e08:	18fb      	adds	r3, r7, r3
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	2b08      	cmp	r3, #8
 8004e0e:	d015      	beq.n	8004e3c <UART_SetConfig+0x134>
 8004e10:	dc18      	bgt.n	8004e44 <UART_SetConfig+0x13c>
 8004e12:	2b04      	cmp	r3, #4
 8004e14:	d00d      	beq.n	8004e32 <UART_SetConfig+0x12a>
 8004e16:	dc15      	bgt.n	8004e44 <UART_SetConfig+0x13c>
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d002      	beq.n	8004e22 <UART_SetConfig+0x11a>
 8004e1c:	2b02      	cmp	r3, #2
 8004e1e:	d005      	beq.n	8004e2c <UART_SetConfig+0x124>
 8004e20:	e010      	b.n	8004e44 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e22:	f7fe fb01 	bl	8003428 <HAL_RCC_GetPCLK1Freq>
 8004e26:	0003      	movs	r3, r0
 8004e28:	61bb      	str	r3, [r7, #24]
        break;
 8004e2a:	e012      	b.n	8004e52 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e2c:	4b55      	ldr	r3, [pc, #340]	@ (8004f84 <UART_SetConfig+0x27c>)
 8004e2e:	61bb      	str	r3, [r7, #24]
        break;
 8004e30:	e00f      	b.n	8004e52 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e32:	f7fe fa7d 	bl	8003330 <HAL_RCC_GetSysClockFreq>
 8004e36:	0003      	movs	r3, r0
 8004e38:	61bb      	str	r3, [r7, #24]
        break;
 8004e3a:	e00a      	b.n	8004e52 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e3c:	2380      	movs	r3, #128	@ 0x80
 8004e3e:	021b      	lsls	r3, r3, #8
 8004e40:	61bb      	str	r3, [r7, #24]
        break;
 8004e42:	e006      	b.n	8004e52 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8004e44:	2300      	movs	r3, #0
 8004e46:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004e48:	231e      	movs	r3, #30
 8004e4a:	18fb      	adds	r3, r7, r3
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	701a      	strb	r2, [r3, #0]
        break;
 8004e50:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d100      	bne.n	8004e5a <UART_SetConfig+0x152>
 8004e58:	e07a      	b.n	8004f50 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	005a      	lsls	r2, r3, #1
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	085b      	lsrs	r3, r3, #1
 8004e64:	18d2      	adds	r2, r2, r3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	0019      	movs	r1, r3
 8004e6c:	0010      	movs	r0, r2
 8004e6e:	f7fb f95d 	bl	800012c <__udivsi3>
 8004e72:	0003      	movs	r3, r0
 8004e74:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	2b0f      	cmp	r3, #15
 8004e7a:	d91c      	bls.n	8004eb6 <UART_SetConfig+0x1ae>
 8004e7c:	693a      	ldr	r2, [r7, #16]
 8004e7e:	2380      	movs	r3, #128	@ 0x80
 8004e80:	025b      	lsls	r3, r3, #9
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d217      	bcs.n	8004eb6 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	b29a      	uxth	r2, r3
 8004e8a:	200e      	movs	r0, #14
 8004e8c:	183b      	adds	r3, r7, r0
 8004e8e:	210f      	movs	r1, #15
 8004e90:	438a      	bics	r2, r1
 8004e92:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	085b      	lsrs	r3, r3, #1
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	2207      	movs	r2, #7
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	b299      	uxth	r1, r3
 8004ea0:	183b      	adds	r3, r7, r0
 8004ea2:	183a      	adds	r2, r7, r0
 8004ea4:	8812      	ldrh	r2, [r2, #0]
 8004ea6:	430a      	orrs	r2, r1
 8004ea8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	183a      	adds	r2, r7, r0
 8004eb0:	8812      	ldrh	r2, [r2, #0]
 8004eb2:	60da      	str	r2, [r3, #12]
 8004eb4:	e04c      	b.n	8004f50 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8004eb6:	231e      	movs	r3, #30
 8004eb8:	18fb      	adds	r3, r7, r3
 8004eba:	2201      	movs	r2, #1
 8004ebc:	701a      	strb	r2, [r3, #0]
 8004ebe:	e047      	b.n	8004f50 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ec0:	231f      	movs	r3, #31
 8004ec2:	18fb      	adds	r3, r7, r3
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	2b08      	cmp	r3, #8
 8004ec8:	d015      	beq.n	8004ef6 <UART_SetConfig+0x1ee>
 8004eca:	dc18      	bgt.n	8004efe <UART_SetConfig+0x1f6>
 8004ecc:	2b04      	cmp	r3, #4
 8004ece:	d00d      	beq.n	8004eec <UART_SetConfig+0x1e4>
 8004ed0:	dc15      	bgt.n	8004efe <UART_SetConfig+0x1f6>
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d002      	beq.n	8004edc <UART_SetConfig+0x1d4>
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d005      	beq.n	8004ee6 <UART_SetConfig+0x1de>
 8004eda:	e010      	b.n	8004efe <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004edc:	f7fe faa4 	bl	8003428 <HAL_RCC_GetPCLK1Freq>
 8004ee0:	0003      	movs	r3, r0
 8004ee2:	61bb      	str	r3, [r7, #24]
        break;
 8004ee4:	e012      	b.n	8004f0c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ee6:	4b27      	ldr	r3, [pc, #156]	@ (8004f84 <UART_SetConfig+0x27c>)
 8004ee8:	61bb      	str	r3, [r7, #24]
        break;
 8004eea:	e00f      	b.n	8004f0c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004eec:	f7fe fa20 	bl	8003330 <HAL_RCC_GetSysClockFreq>
 8004ef0:	0003      	movs	r3, r0
 8004ef2:	61bb      	str	r3, [r7, #24]
        break;
 8004ef4:	e00a      	b.n	8004f0c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ef6:	2380      	movs	r3, #128	@ 0x80
 8004ef8:	021b      	lsls	r3, r3, #8
 8004efa:	61bb      	str	r3, [r7, #24]
        break;
 8004efc:	e006      	b.n	8004f0c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004efe:	2300      	movs	r3, #0
 8004f00:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004f02:	231e      	movs	r3, #30
 8004f04:	18fb      	adds	r3, r7, r3
 8004f06:	2201      	movs	r2, #1
 8004f08:	701a      	strb	r2, [r3, #0]
        break;
 8004f0a:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d01e      	beq.n	8004f50 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	085a      	lsrs	r2, r3, #1
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	18d2      	adds	r2, r2, r3
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	0019      	movs	r1, r3
 8004f22:	0010      	movs	r0, r2
 8004f24:	f7fb f902 	bl	800012c <__udivsi3>
 8004f28:	0003      	movs	r3, r0
 8004f2a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	2b0f      	cmp	r3, #15
 8004f30:	d90a      	bls.n	8004f48 <UART_SetConfig+0x240>
 8004f32:	693a      	ldr	r2, [r7, #16]
 8004f34:	2380      	movs	r3, #128	@ 0x80
 8004f36:	025b      	lsls	r3, r3, #9
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d205      	bcs.n	8004f48 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	b29a      	uxth	r2, r3
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	60da      	str	r2, [r3, #12]
 8004f46:	e003      	b.n	8004f50 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8004f48:	231e      	movs	r3, #30
 8004f4a:	18fb      	adds	r3, r7, r3
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2200      	movs	r2, #0
 8004f54:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004f5c:	231e      	movs	r3, #30
 8004f5e:	18fb      	adds	r3, r7, r3
 8004f60:	781b      	ldrb	r3, [r3, #0]
}
 8004f62:	0018      	movs	r0, r3
 8004f64:	46bd      	mov	sp, r7
 8004f66:	b008      	add	sp, #32
 8004f68:	bd80      	pop	{r7, pc}
 8004f6a:	46c0      	nop			@ (mov r8, r8)
 8004f6c:	efff69f3 	.word	0xefff69f3
 8004f70:	ffffcfff 	.word	0xffffcfff
 8004f74:	fffff4ff 	.word	0xfffff4ff
 8004f78:	40013800 	.word	0x40013800
 8004f7c:	40021000 	.word	0x40021000
 8004f80:	40004400 	.word	0x40004400
 8004f84:	007a1200 	.word	0x007a1200

08004f88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b082      	sub	sp, #8
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f94:	2208      	movs	r2, #8
 8004f96:	4013      	ands	r3, r2
 8004f98:	d00b      	beq.n	8004fb2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	4a4a      	ldr	r2, [pc, #296]	@ (80050cc <UART_AdvFeatureConfig+0x144>)
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	0019      	movs	r1, r3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	430a      	orrs	r2, r1
 8004fb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	4013      	ands	r3, r2
 8004fba:	d00b      	beq.n	8004fd4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	4a43      	ldr	r2, [pc, #268]	@ (80050d0 <UART_AdvFeatureConfig+0x148>)
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	0019      	movs	r1, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	430a      	orrs	r2, r1
 8004fd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fd8:	2202      	movs	r2, #2
 8004fda:	4013      	ands	r3, r2
 8004fdc:	d00b      	beq.n	8004ff6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	4a3b      	ldr	r2, [pc, #236]	@ (80050d4 <UART_AdvFeatureConfig+0x14c>)
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	0019      	movs	r1, r3
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	430a      	orrs	r2, r1
 8004ff4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ffa:	2204      	movs	r2, #4
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	d00b      	beq.n	8005018 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	4a34      	ldr	r2, [pc, #208]	@ (80050d8 <UART_AdvFeatureConfig+0x150>)
 8005008:	4013      	ands	r3, r2
 800500a:	0019      	movs	r1, r3
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	430a      	orrs	r2, r1
 8005016:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800501c:	2210      	movs	r2, #16
 800501e:	4013      	ands	r3, r2
 8005020:	d00b      	beq.n	800503a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	4a2c      	ldr	r2, [pc, #176]	@ (80050dc <UART_AdvFeatureConfig+0x154>)
 800502a:	4013      	ands	r3, r2
 800502c:	0019      	movs	r1, r3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	430a      	orrs	r2, r1
 8005038:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800503e:	2220      	movs	r2, #32
 8005040:	4013      	ands	r3, r2
 8005042:	d00b      	beq.n	800505c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	4a25      	ldr	r2, [pc, #148]	@ (80050e0 <UART_AdvFeatureConfig+0x158>)
 800504c:	4013      	ands	r3, r2
 800504e:	0019      	movs	r1, r3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	430a      	orrs	r2, r1
 800505a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005060:	2240      	movs	r2, #64	@ 0x40
 8005062:	4013      	ands	r3, r2
 8005064:	d01d      	beq.n	80050a2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	4a1d      	ldr	r2, [pc, #116]	@ (80050e4 <UART_AdvFeatureConfig+0x15c>)
 800506e:	4013      	ands	r3, r2
 8005070:	0019      	movs	r1, r3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	430a      	orrs	r2, r1
 800507c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005082:	2380      	movs	r3, #128	@ 0x80
 8005084:	035b      	lsls	r3, r3, #13
 8005086:	429a      	cmp	r2, r3
 8005088:	d10b      	bne.n	80050a2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	4a15      	ldr	r2, [pc, #84]	@ (80050e8 <UART_AdvFeatureConfig+0x160>)
 8005092:	4013      	ands	r3, r2
 8005094:	0019      	movs	r1, r3
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	430a      	orrs	r2, r1
 80050a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050a6:	2280      	movs	r2, #128	@ 0x80
 80050a8:	4013      	ands	r3, r2
 80050aa:	d00b      	beq.n	80050c4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	4a0e      	ldr	r2, [pc, #56]	@ (80050ec <UART_AdvFeatureConfig+0x164>)
 80050b4:	4013      	ands	r3, r2
 80050b6:	0019      	movs	r1, r3
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	430a      	orrs	r2, r1
 80050c2:	605a      	str	r2, [r3, #4]
  }
}
 80050c4:	46c0      	nop			@ (mov r8, r8)
 80050c6:	46bd      	mov	sp, r7
 80050c8:	b002      	add	sp, #8
 80050ca:	bd80      	pop	{r7, pc}
 80050cc:	ffff7fff 	.word	0xffff7fff
 80050d0:	fffdffff 	.word	0xfffdffff
 80050d4:	fffeffff 	.word	0xfffeffff
 80050d8:	fffbffff 	.word	0xfffbffff
 80050dc:	ffffefff 	.word	0xffffefff
 80050e0:	ffffdfff 	.word	0xffffdfff
 80050e4:	ffefffff 	.word	0xffefffff
 80050e8:	ff9fffff 	.word	0xff9fffff
 80050ec:	fff7ffff 	.word	0xfff7ffff

080050f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b092      	sub	sp, #72	@ 0x48
 80050f4:	af02      	add	r7, sp, #8
 80050f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2284      	movs	r2, #132	@ 0x84
 80050fc:	2100      	movs	r1, #0
 80050fe:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005100:	f7fc f9cc 	bl	800149c <HAL_GetTick>
 8005104:	0003      	movs	r3, r0
 8005106:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	2208      	movs	r2, #8
 8005110:	4013      	ands	r3, r2
 8005112:	2b08      	cmp	r3, #8
 8005114:	d12c      	bne.n	8005170 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005116:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005118:	2280      	movs	r2, #128	@ 0x80
 800511a:	0391      	lsls	r1, r2, #14
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	4a46      	ldr	r2, [pc, #280]	@ (8005238 <UART_CheckIdleState+0x148>)
 8005120:	9200      	str	r2, [sp, #0]
 8005122:	2200      	movs	r2, #0
 8005124:	f000 f88c 	bl	8005240 <UART_WaitOnFlagUntilTimeout>
 8005128:	1e03      	subs	r3, r0, #0
 800512a:	d021      	beq.n	8005170 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800512c:	f3ef 8310 	mrs	r3, PRIMASK
 8005130:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005134:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005136:	2301      	movs	r3, #1
 8005138:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800513a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800513c:	f383 8810 	msr	PRIMASK, r3
}
 8005140:	46c0      	nop			@ (mov r8, r8)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2180      	movs	r1, #128	@ 0x80
 800514e:	438a      	bics	r2, r1
 8005150:	601a      	str	r2, [r3, #0]
 8005152:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005154:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005158:	f383 8810 	msr	PRIMASK, r3
}
 800515c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2220      	movs	r2, #32
 8005162:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2278      	movs	r2, #120	@ 0x78
 8005168:	2100      	movs	r1, #0
 800516a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800516c:	2303      	movs	r3, #3
 800516e:	e05f      	b.n	8005230 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	2204      	movs	r2, #4
 8005178:	4013      	ands	r3, r2
 800517a:	2b04      	cmp	r3, #4
 800517c:	d146      	bne.n	800520c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800517e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005180:	2280      	movs	r2, #128	@ 0x80
 8005182:	03d1      	lsls	r1, r2, #15
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	4a2c      	ldr	r2, [pc, #176]	@ (8005238 <UART_CheckIdleState+0x148>)
 8005188:	9200      	str	r2, [sp, #0]
 800518a:	2200      	movs	r2, #0
 800518c:	f000 f858 	bl	8005240 <UART_WaitOnFlagUntilTimeout>
 8005190:	1e03      	subs	r3, r0, #0
 8005192:	d03b      	beq.n	800520c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005194:	f3ef 8310 	mrs	r3, PRIMASK
 8005198:	60fb      	str	r3, [r7, #12]
  return(result);
 800519a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800519c:	637b      	str	r3, [r7, #52]	@ 0x34
 800519e:	2301      	movs	r3, #1
 80051a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	f383 8810 	msr	PRIMASK, r3
}
 80051a8:	46c0      	nop			@ (mov r8, r8)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4921      	ldr	r1, [pc, #132]	@ (800523c <UART_CheckIdleState+0x14c>)
 80051b6:	400a      	ands	r2, r1
 80051b8:	601a      	str	r2, [r3, #0]
 80051ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	f383 8810 	msr	PRIMASK, r3
}
 80051c4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051c6:	f3ef 8310 	mrs	r3, PRIMASK
 80051ca:	61bb      	str	r3, [r7, #24]
  return(result);
 80051cc:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80051d0:	2301      	movs	r3, #1
 80051d2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	f383 8810 	msr	PRIMASK, r3
}
 80051da:	46c0      	nop			@ (mov r8, r8)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	689a      	ldr	r2, [r3, #8]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	2101      	movs	r1, #1
 80051e8:	438a      	bics	r2, r1
 80051ea:	609a      	str	r2, [r3, #8]
 80051ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ee:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051f0:	6a3b      	ldr	r3, [r7, #32]
 80051f2:	f383 8810 	msr	PRIMASK, r3
}
 80051f6:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2280      	movs	r2, #128	@ 0x80
 80051fc:	2120      	movs	r1, #32
 80051fe:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2278      	movs	r2, #120	@ 0x78
 8005204:	2100      	movs	r1, #0
 8005206:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005208:	2303      	movs	r3, #3
 800520a:	e011      	b.n	8005230 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2220      	movs	r2, #32
 8005210:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2280      	movs	r2, #128	@ 0x80
 8005216:	2120      	movs	r1, #32
 8005218:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2278      	movs	r2, #120	@ 0x78
 800522a:	2100      	movs	r1, #0
 800522c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800522e:	2300      	movs	r3, #0
}
 8005230:	0018      	movs	r0, r3
 8005232:	46bd      	mov	sp, r7
 8005234:	b010      	add	sp, #64	@ 0x40
 8005236:	bd80      	pop	{r7, pc}
 8005238:	01ffffff 	.word	0x01ffffff
 800523c:	fffffedf 	.word	0xfffffedf

08005240 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b084      	sub	sp, #16
 8005244:	af00      	add	r7, sp, #0
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	60b9      	str	r1, [r7, #8]
 800524a:	603b      	str	r3, [r7, #0]
 800524c:	1dfb      	adds	r3, r7, #7
 800524e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005250:	e051      	b.n	80052f6 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	3301      	adds	r3, #1
 8005256:	d04e      	beq.n	80052f6 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005258:	f7fc f920 	bl	800149c <HAL_GetTick>
 800525c:	0002      	movs	r2, r0
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	1ad3      	subs	r3, r2, r3
 8005262:	69ba      	ldr	r2, [r7, #24]
 8005264:	429a      	cmp	r2, r3
 8005266:	d302      	bcc.n	800526e <UART_WaitOnFlagUntilTimeout+0x2e>
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d101      	bne.n	8005272 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800526e:	2303      	movs	r3, #3
 8005270:	e051      	b.n	8005316 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	2204      	movs	r2, #4
 800527a:	4013      	ands	r3, r2
 800527c:	d03b      	beq.n	80052f6 <UART_WaitOnFlagUntilTimeout+0xb6>
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	2b80      	cmp	r3, #128	@ 0x80
 8005282:	d038      	beq.n	80052f6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	2b40      	cmp	r3, #64	@ 0x40
 8005288:	d035      	beq.n	80052f6 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	69db      	ldr	r3, [r3, #28]
 8005290:	2208      	movs	r2, #8
 8005292:	4013      	ands	r3, r2
 8005294:	2b08      	cmp	r3, #8
 8005296:	d111      	bne.n	80052bc <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	2208      	movs	r2, #8
 800529e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	0018      	movs	r0, r3
 80052a4:	f000 f906 	bl	80054b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2284      	movs	r2, #132	@ 0x84
 80052ac:	2108      	movs	r1, #8
 80052ae:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2278      	movs	r2, #120	@ 0x78
 80052b4:	2100      	movs	r1, #0
 80052b6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	e02c      	b.n	8005316 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	69da      	ldr	r2, [r3, #28]
 80052c2:	2380      	movs	r3, #128	@ 0x80
 80052c4:	011b      	lsls	r3, r3, #4
 80052c6:	401a      	ands	r2, r3
 80052c8:	2380      	movs	r3, #128	@ 0x80
 80052ca:	011b      	lsls	r3, r3, #4
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d112      	bne.n	80052f6 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2280      	movs	r2, #128	@ 0x80
 80052d6:	0112      	lsls	r2, r2, #4
 80052d8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	0018      	movs	r0, r3
 80052de:	f000 f8e9 	bl	80054b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2284      	movs	r2, #132	@ 0x84
 80052e6:	2120      	movs	r1, #32
 80052e8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2278      	movs	r2, #120	@ 0x78
 80052ee:	2100      	movs	r1, #0
 80052f0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80052f2:	2303      	movs	r3, #3
 80052f4:	e00f      	b.n	8005316 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	69db      	ldr	r3, [r3, #28]
 80052fc:	68ba      	ldr	r2, [r7, #8]
 80052fe:	4013      	ands	r3, r2
 8005300:	68ba      	ldr	r2, [r7, #8]
 8005302:	1ad3      	subs	r3, r2, r3
 8005304:	425a      	negs	r2, r3
 8005306:	4153      	adcs	r3, r2
 8005308:	b2db      	uxtb	r3, r3
 800530a:	001a      	movs	r2, r3
 800530c:	1dfb      	adds	r3, r7, #7
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	429a      	cmp	r2, r3
 8005312:	d09e      	beq.n	8005252 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005314:	2300      	movs	r3, #0
}
 8005316:	0018      	movs	r0, r3
 8005318:	46bd      	mov	sp, r7
 800531a:	b004      	add	sp, #16
 800531c:	bd80      	pop	{r7, pc}
	...

08005320 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b090      	sub	sp, #64	@ 0x40
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	1dbb      	adds	r3, r7, #6
 800532c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	68ba      	ldr	r2, [r7, #8]
 8005332:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	1dba      	adds	r2, r7, #6
 8005338:	2158      	movs	r1, #88	@ 0x58
 800533a:	8812      	ldrh	r2, [r2, #0]
 800533c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	1dba      	adds	r2, r7, #6
 8005342:	215a      	movs	r1, #90	@ 0x5a
 8005344:	8812      	ldrh	r2, [r2, #0]
 8005346:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2200      	movs	r2, #0
 800534c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	689a      	ldr	r2, [r3, #8]
 8005352:	2380      	movs	r3, #128	@ 0x80
 8005354:	015b      	lsls	r3, r3, #5
 8005356:	429a      	cmp	r2, r3
 8005358:	d10d      	bne.n	8005376 <UART_Start_Receive_IT+0x56>
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d104      	bne.n	800536c <UART_Start_Receive_IT+0x4c>
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	225c      	movs	r2, #92	@ 0x5c
 8005366:	4950      	ldr	r1, [pc, #320]	@ (80054a8 <UART_Start_Receive_IT+0x188>)
 8005368:	5299      	strh	r1, [r3, r2]
 800536a:	e02e      	b.n	80053ca <UART_Start_Receive_IT+0xaa>
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	225c      	movs	r2, #92	@ 0x5c
 8005370:	21ff      	movs	r1, #255	@ 0xff
 8005372:	5299      	strh	r1, [r3, r2]
 8005374:	e029      	b.n	80053ca <UART_Start_Receive_IT+0xaa>
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d10d      	bne.n	800539a <UART_Start_Receive_IT+0x7a>
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	691b      	ldr	r3, [r3, #16]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d104      	bne.n	8005390 <UART_Start_Receive_IT+0x70>
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	225c      	movs	r2, #92	@ 0x5c
 800538a:	21ff      	movs	r1, #255	@ 0xff
 800538c:	5299      	strh	r1, [r3, r2]
 800538e:	e01c      	b.n	80053ca <UART_Start_Receive_IT+0xaa>
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	225c      	movs	r2, #92	@ 0x5c
 8005394:	217f      	movs	r1, #127	@ 0x7f
 8005396:	5299      	strh	r1, [r3, r2]
 8005398:	e017      	b.n	80053ca <UART_Start_Receive_IT+0xaa>
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	689a      	ldr	r2, [r3, #8]
 800539e:	2380      	movs	r3, #128	@ 0x80
 80053a0:	055b      	lsls	r3, r3, #21
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d10d      	bne.n	80053c2 <UART_Start_Receive_IT+0xa2>
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d104      	bne.n	80053b8 <UART_Start_Receive_IT+0x98>
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	225c      	movs	r2, #92	@ 0x5c
 80053b2:	217f      	movs	r1, #127	@ 0x7f
 80053b4:	5299      	strh	r1, [r3, r2]
 80053b6:	e008      	b.n	80053ca <UART_Start_Receive_IT+0xaa>
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	225c      	movs	r2, #92	@ 0x5c
 80053bc:	213f      	movs	r1, #63	@ 0x3f
 80053be:	5299      	strh	r1, [r3, r2]
 80053c0:	e003      	b.n	80053ca <UART_Start_Receive_IT+0xaa>
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	225c      	movs	r2, #92	@ 0x5c
 80053c6:	2100      	movs	r1, #0
 80053c8:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2284      	movs	r2, #132	@ 0x84
 80053ce:	2100      	movs	r1, #0
 80053d0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2280      	movs	r2, #128	@ 0x80
 80053d6:	2122      	movs	r1, #34	@ 0x22
 80053d8:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053da:	f3ef 8310 	mrs	r3, PRIMASK
 80053de:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 80053e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80053e4:	2301      	movs	r3, #1
 80053e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053ea:	f383 8810 	msr	PRIMASK, r3
}
 80053ee:	46c0      	nop			@ (mov r8, r8)
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	689a      	ldr	r2, [r3, #8]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	2101      	movs	r1, #1
 80053fc:	430a      	orrs	r2, r1
 80053fe:	609a      	str	r2, [r3, #8]
 8005400:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005402:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005406:	f383 8810 	msr	PRIMASK, r3
}
 800540a:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	689a      	ldr	r2, [r3, #8]
 8005410:	2380      	movs	r3, #128	@ 0x80
 8005412:	015b      	lsls	r3, r3, #5
 8005414:	429a      	cmp	r2, r3
 8005416:	d107      	bne.n	8005428 <UART_Start_Receive_IT+0x108>
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	691b      	ldr	r3, [r3, #16]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d103      	bne.n	8005428 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	4a22      	ldr	r2, [pc, #136]	@ (80054ac <UART_Start_Receive_IT+0x18c>)
 8005424:	669a      	str	r2, [r3, #104]	@ 0x68
 8005426:	e002      	b.n	800542e <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	4a21      	ldr	r2, [pc, #132]	@ (80054b0 <UART_Start_Receive_IT+0x190>)
 800542c:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d019      	beq.n	800546a <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005436:	f3ef 8310 	mrs	r3, PRIMASK
 800543a:	61fb      	str	r3, [r7, #28]
  return(result);
 800543c:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800543e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005440:	2301      	movs	r3, #1
 8005442:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005444:	6a3b      	ldr	r3, [r7, #32]
 8005446:	f383 8810 	msr	PRIMASK, r3
}
 800544a:	46c0      	nop			@ (mov r8, r8)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	2190      	movs	r1, #144	@ 0x90
 8005458:	0049      	lsls	r1, r1, #1
 800545a:	430a      	orrs	r2, r1
 800545c:	601a      	str	r2, [r3, #0]
 800545e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005460:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005464:	f383 8810 	msr	PRIMASK, r3
}
 8005468:	e018      	b.n	800549c <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800546a:	f3ef 8310 	mrs	r3, PRIMASK
 800546e:	613b      	str	r3, [r7, #16]
  return(result);
 8005470:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005472:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005474:	2301      	movs	r3, #1
 8005476:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	f383 8810 	msr	PRIMASK, r3
}
 800547e:	46c0      	nop			@ (mov r8, r8)
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	2120      	movs	r1, #32
 800548c:	430a      	orrs	r2, r1
 800548e:	601a      	str	r2, [r3, #0]
 8005490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005492:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005494:	69bb      	ldr	r3, [r7, #24]
 8005496:	f383 8810 	msr	PRIMASK, r3
}
 800549a:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 800549c:	2300      	movs	r3, #0
}
 800549e:	0018      	movs	r0, r3
 80054a0:	46bd      	mov	sp, r7
 80054a2:	b010      	add	sp, #64	@ 0x40
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	46c0      	nop			@ (mov r8, r8)
 80054a8:	000001ff 	.word	0x000001ff
 80054ac:	08005929 	.word	0x08005929
 80054b0:	08005771 	.word	0x08005771

080054b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b08e      	sub	sp, #56	@ 0x38
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054bc:	f3ef 8310 	mrs	r3, PRIMASK
 80054c0:	617b      	str	r3, [r7, #20]
  return(result);
 80054c2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80054c6:	2301      	movs	r3, #1
 80054c8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054ca:	69bb      	ldr	r3, [r7, #24]
 80054cc:	f383 8810 	msr	PRIMASK, r3
}
 80054d0:	46c0      	nop			@ (mov r8, r8)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4926      	ldr	r1, [pc, #152]	@ (8005578 <UART_EndRxTransfer+0xc4>)
 80054de:	400a      	ands	r2, r1
 80054e0:	601a      	str	r2, [r3, #0]
 80054e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054e6:	69fb      	ldr	r3, [r7, #28]
 80054e8:	f383 8810 	msr	PRIMASK, r3
}
 80054ec:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054ee:	f3ef 8310 	mrs	r3, PRIMASK
 80054f2:	623b      	str	r3, [r7, #32]
  return(result);
 80054f4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80054f8:	2301      	movs	r3, #1
 80054fa:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054fe:	f383 8810 	msr	PRIMASK, r3
}
 8005502:	46c0      	nop			@ (mov r8, r8)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	689a      	ldr	r2, [r3, #8]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	2101      	movs	r1, #1
 8005510:	438a      	bics	r2, r1
 8005512:	609a      	str	r2, [r3, #8]
 8005514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005516:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800551a:	f383 8810 	msr	PRIMASK, r3
}
 800551e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005524:	2b01      	cmp	r3, #1
 8005526:	d118      	bne.n	800555a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005528:	f3ef 8310 	mrs	r3, PRIMASK
 800552c:	60bb      	str	r3, [r7, #8]
  return(result);
 800552e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005530:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005532:	2301      	movs	r3, #1
 8005534:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f383 8810 	msr	PRIMASK, r3
}
 800553c:	46c0      	nop			@ (mov r8, r8)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2110      	movs	r1, #16
 800554a:	438a      	bics	r2, r1
 800554c:	601a      	str	r2, [r3, #0]
 800554e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005550:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	f383 8810 	msr	PRIMASK, r3
}
 8005558:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2280      	movs	r2, #128	@ 0x80
 800555e:	2120      	movs	r1, #32
 8005560:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800556e:	46c0      	nop			@ (mov r8, r8)
 8005570:	46bd      	mov	sp, r7
 8005572:	b00e      	add	sp, #56	@ 0x38
 8005574:	bd80      	pop	{r7, pc}
 8005576:	46c0      	nop			@ (mov r8, r8)
 8005578:	fffffedf 	.word	0xfffffedf

0800557c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b084      	sub	sp, #16
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005588:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	225a      	movs	r2, #90	@ 0x5a
 800558e:	2100      	movs	r1, #0
 8005590:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2252      	movs	r2, #82	@ 0x52
 8005596:	2100      	movs	r1, #0
 8005598:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	0018      	movs	r0, r3
 800559e:	f7ff fb9f 	bl	8004ce0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055a2:	46c0      	nop			@ (mov r8, r8)
 80055a4:	46bd      	mov	sp, r7
 80055a6:	b004      	add	sp, #16
 80055a8:	bd80      	pop	{r7, pc}

080055aa <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80055aa:	b580      	push	{r7, lr}
 80055ac:	b08a      	sub	sp, #40	@ 0x28
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80055b6:	2b21      	cmp	r3, #33	@ 0x21
 80055b8:	d14c      	bne.n	8005654 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2252      	movs	r2, #82	@ 0x52
 80055be:	5a9b      	ldrh	r3, [r3, r2]
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d132      	bne.n	800562c <UART_TxISR_8BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055c6:	f3ef 8310 	mrs	r3, PRIMASK
 80055ca:	60bb      	str	r3, [r7, #8]
  return(result);
 80055cc:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80055ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80055d0:	2301      	movs	r3, #1
 80055d2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f383 8810 	msr	PRIMASK, r3
}
 80055da:	46c0      	nop			@ (mov r8, r8)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	2180      	movs	r1, #128	@ 0x80
 80055e8:	438a      	bics	r2, r1
 80055ea:	601a      	str	r2, [r3, #0]
 80055ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	f383 8810 	msr	PRIMASK, r3
}
 80055f6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055f8:	f3ef 8310 	mrs	r3, PRIMASK
 80055fc:	617b      	str	r3, [r7, #20]
  return(result);
 80055fe:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005600:	623b      	str	r3, [r7, #32]
 8005602:	2301      	movs	r3, #1
 8005604:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	f383 8810 	msr	PRIMASK, r3
}
 800560c:	46c0      	nop			@ (mov r8, r8)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	2140      	movs	r1, #64	@ 0x40
 800561a:	430a      	orrs	r2, r1
 800561c:	601a      	str	r2, [r3, #0]
 800561e:	6a3b      	ldr	r3, [r7, #32]
 8005620:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005622:	69fb      	ldr	r3, [r7, #28]
 8005624:	f383 8810 	msr	PRIMASK, r3
}
 8005628:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800562a:	e013      	b.n	8005654 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005630:	781a      	ldrb	r2, [r3, #0]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800563c:	1c5a      	adds	r2, r3, #1
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2252      	movs	r2, #82	@ 0x52
 8005646:	5a9b      	ldrh	r3, [r3, r2]
 8005648:	b29b      	uxth	r3, r3
 800564a:	3b01      	subs	r3, #1
 800564c:	b299      	uxth	r1, r3
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2252      	movs	r2, #82	@ 0x52
 8005652:	5299      	strh	r1, [r3, r2]
}
 8005654:	46c0      	nop			@ (mov r8, r8)
 8005656:	46bd      	mov	sp, r7
 8005658:	b00a      	add	sp, #40	@ 0x28
 800565a:	bd80      	pop	{r7, pc}

0800565c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b08c      	sub	sp, #48	@ 0x30
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005668:	2b21      	cmp	r3, #33	@ 0x21
 800566a:	d151      	bne.n	8005710 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2252      	movs	r2, #82	@ 0x52
 8005670:	5a9b      	ldrh	r3, [r3, r2]
 8005672:	b29b      	uxth	r3, r3
 8005674:	2b00      	cmp	r3, #0
 8005676:	d132      	bne.n	80056de <UART_TxISR_16BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005678:	f3ef 8310 	mrs	r3, PRIMASK
 800567c:	60fb      	str	r3, [r7, #12]
  return(result);
 800567e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005680:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005682:	2301      	movs	r3, #1
 8005684:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	f383 8810 	msr	PRIMASK, r3
}
 800568c:	46c0      	nop			@ (mov r8, r8)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2180      	movs	r1, #128	@ 0x80
 800569a:	438a      	bics	r2, r1
 800569c:	601a      	str	r2, [r3, #0]
 800569e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056a0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	f383 8810 	msr	PRIMASK, r3
}
 80056a8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056aa:	f3ef 8310 	mrs	r3, PRIMASK
 80056ae:	61bb      	str	r3, [r7, #24]
  return(result);
 80056b0:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80056b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80056b4:	2301      	movs	r3, #1
 80056b6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	f383 8810 	msr	PRIMASK, r3
}
 80056be:	46c0      	nop			@ (mov r8, r8)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	2140      	movs	r1, #64	@ 0x40
 80056cc:	430a      	orrs	r2, r1
 80056ce:	601a      	str	r2, [r3, #0]
 80056d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056d4:	6a3b      	ldr	r3, [r7, #32]
 80056d6:	f383 8810 	msr	PRIMASK, r3
}
 80056da:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80056dc:	e018      	b.n	8005710 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80056e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056e6:	881a      	ldrh	r2, [r3, #0]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	05d2      	lsls	r2, r2, #23
 80056ee:	0dd2      	lsrs	r2, r2, #23
 80056f0:	b292      	uxth	r2, r2
 80056f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056f8:	1c9a      	adds	r2, r3, #2
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2252      	movs	r2, #82	@ 0x52
 8005702:	5a9b      	ldrh	r3, [r3, r2]
 8005704:	b29b      	uxth	r3, r3
 8005706:	3b01      	subs	r3, #1
 8005708:	b299      	uxth	r1, r3
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2252      	movs	r2, #82	@ 0x52
 800570e:	5299      	strh	r1, [r3, r2]
}
 8005710:	46c0      	nop			@ (mov r8, r8)
 8005712:	46bd      	mov	sp, r7
 8005714:	b00c      	add	sp, #48	@ 0x30
 8005716:	bd80      	pop	{r7, pc}

08005718 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b086      	sub	sp, #24
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005720:	f3ef 8310 	mrs	r3, PRIMASK
 8005724:	60bb      	str	r3, [r7, #8]
  return(result);
 8005726:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005728:	617b      	str	r3, [r7, #20]
 800572a:	2301      	movs	r3, #1
 800572c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f383 8810 	msr	PRIMASK, r3
}
 8005734:	46c0      	nop			@ (mov r8, r8)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	2140      	movs	r1, #64	@ 0x40
 8005742:	438a      	bics	r2, r1
 8005744:	601a      	str	r2, [r3, #0]
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	f383 8810 	msr	PRIMASK, r3
}
 8005750:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2220      	movs	r2, #32
 8005756:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	0018      	movs	r0, r3
 8005762:	f7fb fa91 	bl	8000c88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005766:	46c0      	nop			@ (mov r8, r8)
 8005768:	46bd      	mov	sp, r7
 800576a:	b006      	add	sp, #24
 800576c:	bd80      	pop	{r7, pc}
	...

08005770 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b094      	sub	sp, #80	@ 0x50
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005778:	204e      	movs	r0, #78	@ 0x4e
 800577a:	183b      	adds	r3, r7, r0
 800577c:	687a      	ldr	r2, [r7, #4]
 800577e:	215c      	movs	r1, #92	@ 0x5c
 8005780:	5a52      	ldrh	r2, [r2, r1]
 8005782:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2280      	movs	r2, #128	@ 0x80
 8005788:	589b      	ldr	r3, [r3, r2]
 800578a:	2b22      	cmp	r3, #34	@ 0x22
 800578c:	d000      	beq.n	8005790 <UART_RxISR_8BIT+0x20>
 800578e:	e0ba      	b.n	8005906 <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	214c      	movs	r1, #76	@ 0x4c
 8005796:	187b      	adds	r3, r7, r1
 8005798:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 800579a:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800579c:	187b      	adds	r3, r7, r1
 800579e:	881b      	ldrh	r3, [r3, #0]
 80057a0:	b2da      	uxtb	r2, r3
 80057a2:	183b      	adds	r3, r7, r0
 80057a4:	881b      	ldrh	r3, [r3, #0]
 80057a6:	b2d9      	uxtb	r1, r3
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057ac:	400a      	ands	r2, r1
 80057ae:	b2d2      	uxtb	r2, r2
 80057b0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057b6:	1c5a      	adds	r2, r3, #1
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	225a      	movs	r2, #90	@ 0x5a
 80057c0:	5a9b      	ldrh	r3, [r3, r2]
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	3b01      	subs	r3, #1
 80057c6:	b299      	uxth	r1, r3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	225a      	movs	r2, #90	@ 0x5a
 80057cc:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	225a      	movs	r2, #90	@ 0x5a
 80057d2:	5a9b      	ldrh	r3, [r3, r2]
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d000      	beq.n	80057dc <UART_RxISR_8BIT+0x6c>
 80057da:	e09c      	b.n	8005916 <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057dc:	f3ef 8310 	mrs	r3, PRIMASK
 80057e0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80057e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80057e6:	2301      	movs	r3, #1
 80057e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057ec:	f383 8810 	msr	PRIMASK, r3
}
 80057f0:	46c0      	nop			@ (mov r8, r8)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4948      	ldr	r1, [pc, #288]	@ (8005920 <UART_RxISR_8BIT+0x1b0>)
 80057fe:	400a      	ands	r2, r1
 8005800:	601a      	str	r2, [r3, #0]
 8005802:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005804:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005808:	f383 8810 	msr	PRIMASK, r3
}
 800580c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800580e:	f3ef 8310 	mrs	r3, PRIMASK
 8005812:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8005814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005816:	647b      	str	r3, [r7, #68]	@ 0x44
 8005818:	2301      	movs	r3, #1
 800581a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800581c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800581e:	f383 8810 	msr	PRIMASK, r3
}
 8005822:	46c0      	nop			@ (mov r8, r8)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	689a      	ldr	r2, [r3, #8]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	2101      	movs	r1, #1
 8005830:	438a      	bics	r2, r1
 8005832:	609a      	str	r2, [r3, #8]
 8005834:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005836:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800583a:	f383 8810 	msr	PRIMASK, r3
}
 800583e:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2280      	movs	r2, #128	@ 0x80
 8005844:	2120      	movs	r1, #32
 8005846:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	685a      	ldr	r2, [r3, #4]
 800585a:	2380      	movs	r3, #128	@ 0x80
 800585c:	041b      	lsls	r3, r3, #16
 800585e:	4013      	ands	r3, r2
 8005860:	d018      	beq.n	8005894 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005862:	f3ef 8310 	mrs	r3, PRIMASK
 8005866:	61bb      	str	r3, [r7, #24]
  return(result);
 8005868:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800586a:	643b      	str	r3, [r7, #64]	@ 0x40
 800586c:	2301      	movs	r3, #1
 800586e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	f383 8810 	msr	PRIMASK, r3
}
 8005876:	46c0      	nop			@ (mov r8, r8)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4928      	ldr	r1, [pc, #160]	@ (8005924 <UART_RxISR_8BIT+0x1b4>)
 8005884:	400a      	ands	r2, r1
 8005886:	601a      	str	r2, [r3, #0]
 8005888:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800588a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800588c:	6a3b      	ldr	r3, [r7, #32]
 800588e:	f383 8810 	msr	PRIMASK, r3
}
 8005892:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005898:	2b01      	cmp	r3, #1
 800589a:	d12f      	bne.n	80058fc <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058a2:	f3ef 8310 	mrs	r3, PRIMASK
 80058a6:	60fb      	str	r3, [r7, #12]
  return(result);
 80058a8:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80058ac:	2301      	movs	r3, #1
 80058ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	f383 8810 	msr	PRIMASK, r3
}
 80058b6:	46c0      	nop			@ (mov r8, r8)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2110      	movs	r1, #16
 80058c4:	438a      	bics	r2, r1
 80058c6:	601a      	str	r2, [r3, #0]
 80058c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058ca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	f383 8810 	msr	PRIMASK, r3
}
 80058d2:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	69db      	ldr	r3, [r3, #28]
 80058da:	2210      	movs	r2, #16
 80058dc:	4013      	ands	r3, r2
 80058de:	2b10      	cmp	r3, #16
 80058e0:	d103      	bne.n	80058ea <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	2210      	movs	r2, #16
 80058e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2258      	movs	r2, #88	@ 0x58
 80058ee:	5a9a      	ldrh	r2, [r3, r2]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	0011      	movs	r1, r2
 80058f4:	0018      	movs	r0, r3
 80058f6:	f7ff f9fb 	bl	8004cf0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80058fa:	e00c      	b.n	8005916 <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	0018      	movs	r0, r3
 8005900:	f7fb f9b6 	bl	8000c70 <HAL_UART_RxCpltCallback>
}
 8005904:	e007      	b.n	8005916 <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	699a      	ldr	r2, [r3, #24]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2108      	movs	r1, #8
 8005912:	430a      	orrs	r2, r1
 8005914:	619a      	str	r2, [r3, #24]
}
 8005916:	46c0      	nop			@ (mov r8, r8)
 8005918:	46bd      	mov	sp, r7
 800591a:	b014      	add	sp, #80	@ 0x50
 800591c:	bd80      	pop	{r7, pc}
 800591e:	46c0      	nop			@ (mov r8, r8)
 8005920:	fffffedf 	.word	0xfffffedf
 8005924:	fbffffff 	.word	0xfbffffff

08005928 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b094      	sub	sp, #80	@ 0x50
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005930:	204e      	movs	r0, #78	@ 0x4e
 8005932:	183b      	adds	r3, r7, r0
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	215c      	movs	r1, #92	@ 0x5c
 8005938:	5a52      	ldrh	r2, [r2, r1]
 800593a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2280      	movs	r2, #128	@ 0x80
 8005940:	589b      	ldr	r3, [r3, r2]
 8005942:	2b22      	cmp	r3, #34	@ 0x22
 8005944:	d000      	beq.n	8005948 <UART_RxISR_16BIT+0x20>
 8005946:	e0ba      	b.n	8005abe <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	214c      	movs	r1, #76	@ 0x4c
 800594e:	187b      	adds	r3, r7, r1
 8005950:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 8005952:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005958:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 800595a:	187b      	adds	r3, r7, r1
 800595c:	183a      	adds	r2, r7, r0
 800595e:	881b      	ldrh	r3, [r3, #0]
 8005960:	8812      	ldrh	r2, [r2, #0]
 8005962:	4013      	ands	r3, r2
 8005964:	b29a      	uxth	r2, r3
 8005966:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005968:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800596e:	1c9a      	adds	r2, r3, #2
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	225a      	movs	r2, #90	@ 0x5a
 8005978:	5a9b      	ldrh	r3, [r3, r2]
 800597a:	b29b      	uxth	r3, r3
 800597c:	3b01      	subs	r3, #1
 800597e:	b299      	uxth	r1, r3
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	225a      	movs	r2, #90	@ 0x5a
 8005984:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	225a      	movs	r2, #90	@ 0x5a
 800598a:	5a9b      	ldrh	r3, [r3, r2]
 800598c:	b29b      	uxth	r3, r3
 800598e:	2b00      	cmp	r3, #0
 8005990:	d000      	beq.n	8005994 <UART_RxISR_16BIT+0x6c>
 8005992:	e09c      	b.n	8005ace <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005994:	f3ef 8310 	mrs	r3, PRIMASK
 8005998:	623b      	str	r3, [r7, #32]
  return(result);
 800599a:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800599c:	647b      	str	r3, [r7, #68]	@ 0x44
 800599e:	2301      	movs	r3, #1
 80059a0:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059a4:	f383 8810 	msr	PRIMASK, r3
}
 80059a8:	46c0      	nop			@ (mov r8, r8)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4948      	ldr	r1, [pc, #288]	@ (8005ad8 <UART_RxISR_16BIT+0x1b0>)
 80059b6:	400a      	ands	r2, r1
 80059b8:	601a      	str	r2, [r3, #0]
 80059ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80059bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059c0:	f383 8810 	msr	PRIMASK, r3
}
 80059c4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059c6:	f3ef 8310 	mrs	r3, PRIMASK
 80059ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 80059cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059ce:	643b      	str	r3, [r7, #64]	@ 0x40
 80059d0:	2301      	movs	r3, #1
 80059d2:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059d6:	f383 8810 	msr	PRIMASK, r3
}
 80059da:	46c0      	nop			@ (mov r8, r8)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	689a      	ldr	r2, [r3, #8]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	2101      	movs	r1, #1
 80059e8:	438a      	bics	r2, r1
 80059ea:	609a      	str	r2, [r3, #8]
 80059ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059ee:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059f2:	f383 8810 	msr	PRIMASK, r3
}
 80059f6:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2280      	movs	r2, #128	@ 0x80
 80059fc:	2120      	movs	r1, #32
 80059fe:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	685a      	ldr	r2, [r3, #4]
 8005a12:	2380      	movs	r3, #128	@ 0x80
 8005a14:	041b      	lsls	r3, r3, #16
 8005a16:	4013      	ands	r3, r2
 8005a18:	d018      	beq.n	8005a4c <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a1a:	f3ef 8310 	mrs	r3, PRIMASK
 8005a1e:	617b      	str	r3, [r7, #20]
  return(result);
 8005a20:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a24:	2301      	movs	r3, #1
 8005a26:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a28:	69bb      	ldr	r3, [r7, #24]
 8005a2a:	f383 8810 	msr	PRIMASK, r3
}
 8005a2e:	46c0      	nop			@ (mov r8, r8)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4928      	ldr	r1, [pc, #160]	@ (8005adc <UART_RxISR_16BIT+0x1b4>)
 8005a3c:	400a      	ands	r2, r1
 8005a3e:	601a      	str	r2, [r3, #0]
 8005a40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a42:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	f383 8810 	msr	PRIMASK, r3
}
 8005a4a:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d12f      	bne.n	8005ab4 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a5a:	f3ef 8310 	mrs	r3, PRIMASK
 8005a5e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005a60:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a62:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005a64:	2301      	movs	r3, #1
 8005a66:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f383 8810 	msr	PRIMASK, r3
}
 8005a6e:	46c0      	nop			@ (mov r8, r8)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	2110      	movs	r1, #16
 8005a7c:	438a      	bics	r2, r1
 8005a7e:	601a      	str	r2, [r3, #0]
 8005a80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a82:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	f383 8810 	msr	PRIMASK, r3
}
 8005a8a:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	69db      	ldr	r3, [r3, #28]
 8005a92:	2210      	movs	r2, #16
 8005a94:	4013      	ands	r3, r2
 8005a96:	2b10      	cmp	r3, #16
 8005a98:	d103      	bne.n	8005aa2 <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	2210      	movs	r2, #16
 8005aa0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2258      	movs	r2, #88	@ 0x58
 8005aa6:	5a9a      	ldrh	r2, [r3, r2]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	0011      	movs	r1, r2
 8005aac:	0018      	movs	r0, r3
 8005aae:	f7ff f91f 	bl	8004cf0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005ab2:	e00c      	b.n	8005ace <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	0018      	movs	r0, r3
 8005ab8:	f7fb f8da 	bl	8000c70 <HAL_UART_RxCpltCallback>
}
 8005abc:	e007      	b.n	8005ace <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	699a      	ldr	r2, [r3, #24]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	2108      	movs	r1, #8
 8005aca:	430a      	orrs	r2, r1
 8005acc:	619a      	str	r2, [r3, #24]
}
 8005ace:	46c0      	nop			@ (mov r8, r8)
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	b014      	add	sp, #80	@ 0x50
 8005ad4:	bd80      	pop	{r7, pc}
 8005ad6:	46c0      	nop			@ (mov r8, r8)
 8005ad8:	fffffedf 	.word	0xfffffedf
 8005adc:	fbffffff 	.word	0xfbffffff

08005ae0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b082      	sub	sp, #8
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005ae8:	46c0      	nop			@ (mov r8, r8)
 8005aea:	46bd      	mov	sp, r7
 8005aec:	b002      	add	sp, #8
 8005aee:	bd80      	pop	{r7, pc}

08005af0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b084      	sub	sp, #16
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005af8:	4b09      	ldr	r3, [pc, #36]	@ (8005b20 <USB_DisableGlobalInt+0x30>)
 8005afa:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2240      	movs	r2, #64	@ 0x40
 8005b00:	5a9b      	ldrh	r3, [r3, r2]
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	68fa      	ldr	r2, [r7, #12]
 8005b06:	b292      	uxth	r2, r2
 8005b08:	43d2      	mvns	r2, r2
 8005b0a:	b292      	uxth	r2, r2
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	b299      	uxth	r1, r3
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2240      	movs	r2, #64	@ 0x40
 8005b14:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8005b16:	2300      	movs	r3, #0
}
 8005b18:	0018      	movs	r0, r3
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	b004      	add	sp, #16
 8005b1e:	bd80      	pop	{r7, pc}
 8005b20:	0000bf80 	.word	0x0000bf80

08005b24 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b084      	sub	sp, #16
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	60f8      	str	r0, [r7, #12]
 8005b2c:	1d3b      	adds	r3, r7, #4
 8005b2e:	6019      	str	r1, [r3, #0]
 8005b30:	605a      	str	r2, [r3, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2240      	movs	r2, #64	@ 0x40
 8005b36:	2101      	movs	r1, #1
 8005b38:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2240      	movs	r2, #64	@ 0x40
 8005b3e:	2100      	movs	r1, #0
 8005b40:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2244      	movs	r2, #68	@ 0x44
 8005b46:	2100      	movs	r1, #0
 8005b48:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2250      	movs	r2, #80	@ 0x50
 8005b4e:	2100      	movs	r1, #0
 8005b50:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8005b52:	2300      	movs	r3, #0
}
 8005b54:	0018      	movs	r0, r3
 8005b56:	46bd      	mov	sp, r7
 8005b58:	b004      	add	sp, #16
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <siprintf>:
 8005b5c:	b40e      	push	{r1, r2, r3}
 8005b5e:	b510      	push	{r4, lr}
 8005b60:	2400      	movs	r4, #0
 8005b62:	490c      	ldr	r1, [pc, #48]	@ (8005b94 <siprintf+0x38>)
 8005b64:	b09d      	sub	sp, #116	@ 0x74
 8005b66:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005b68:	9002      	str	r0, [sp, #8]
 8005b6a:	9006      	str	r0, [sp, #24]
 8005b6c:	9107      	str	r1, [sp, #28]
 8005b6e:	9104      	str	r1, [sp, #16]
 8005b70:	4809      	ldr	r0, [pc, #36]	@ (8005b98 <siprintf+0x3c>)
 8005b72:	490a      	ldr	r1, [pc, #40]	@ (8005b9c <siprintf+0x40>)
 8005b74:	cb04      	ldmia	r3!, {r2}
 8005b76:	9105      	str	r1, [sp, #20]
 8005b78:	6800      	ldr	r0, [r0, #0]
 8005b7a:	a902      	add	r1, sp, #8
 8005b7c:	9301      	str	r3, [sp, #4]
 8005b7e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005b80:	f000 f9c4 	bl	8005f0c <_svfiprintf_r>
 8005b84:	9b02      	ldr	r3, [sp, #8]
 8005b86:	701c      	strb	r4, [r3, #0]
 8005b88:	b01d      	add	sp, #116	@ 0x74
 8005b8a:	bc10      	pop	{r4}
 8005b8c:	bc08      	pop	{r3}
 8005b8e:	b003      	add	sp, #12
 8005b90:	4718      	bx	r3
 8005b92:	46c0      	nop			@ (mov r8, r8)
 8005b94:	7fffffff 	.word	0x7fffffff
 8005b98:	20000014 	.word	0x20000014
 8005b9c:	ffff0208 	.word	0xffff0208

08005ba0 <memset>:
 8005ba0:	0003      	movs	r3, r0
 8005ba2:	1882      	adds	r2, r0, r2
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d100      	bne.n	8005baa <memset+0xa>
 8005ba8:	4770      	bx	lr
 8005baa:	7019      	strb	r1, [r3, #0]
 8005bac:	3301      	adds	r3, #1
 8005bae:	e7f9      	b.n	8005ba4 <memset+0x4>

08005bb0 <strncmp>:
 8005bb0:	b530      	push	{r4, r5, lr}
 8005bb2:	0005      	movs	r5, r0
 8005bb4:	1e10      	subs	r0, r2, #0
 8005bb6:	d00b      	beq.n	8005bd0 <strncmp+0x20>
 8005bb8:	2400      	movs	r4, #0
 8005bba:	3a01      	subs	r2, #1
 8005bbc:	5d2b      	ldrb	r3, [r5, r4]
 8005bbe:	5d08      	ldrb	r0, [r1, r4]
 8005bc0:	4283      	cmp	r3, r0
 8005bc2:	d104      	bne.n	8005bce <strncmp+0x1e>
 8005bc4:	4294      	cmp	r4, r2
 8005bc6:	d002      	beq.n	8005bce <strncmp+0x1e>
 8005bc8:	3401      	adds	r4, #1
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d1f6      	bne.n	8005bbc <strncmp+0xc>
 8005bce:	1a18      	subs	r0, r3, r0
 8005bd0:	bd30      	pop	{r4, r5, pc}

08005bd2 <strncpy>:
 8005bd2:	0003      	movs	r3, r0
 8005bd4:	b530      	push	{r4, r5, lr}
 8005bd6:	001d      	movs	r5, r3
 8005bd8:	2a00      	cmp	r2, #0
 8005bda:	d006      	beq.n	8005bea <strncpy+0x18>
 8005bdc:	780c      	ldrb	r4, [r1, #0]
 8005bde:	3a01      	subs	r2, #1
 8005be0:	3301      	adds	r3, #1
 8005be2:	702c      	strb	r4, [r5, #0]
 8005be4:	3101      	adds	r1, #1
 8005be6:	2c00      	cmp	r4, #0
 8005be8:	d1f5      	bne.n	8005bd6 <strncpy+0x4>
 8005bea:	2100      	movs	r1, #0
 8005bec:	189a      	adds	r2, r3, r2
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d100      	bne.n	8005bf4 <strncpy+0x22>
 8005bf2:	bd30      	pop	{r4, r5, pc}
 8005bf4:	7019      	strb	r1, [r3, #0]
 8005bf6:	3301      	adds	r3, #1
 8005bf8:	e7f9      	b.n	8005bee <strncpy+0x1c>
	...

08005bfc <__errno>:
 8005bfc:	4b01      	ldr	r3, [pc, #4]	@ (8005c04 <__errno+0x8>)
 8005bfe:	6818      	ldr	r0, [r3, #0]
 8005c00:	4770      	bx	lr
 8005c02:	46c0      	nop			@ (mov r8, r8)
 8005c04:	20000014 	.word	0x20000014

08005c08 <__libc_init_array>:
 8005c08:	b570      	push	{r4, r5, r6, lr}
 8005c0a:	2600      	movs	r6, #0
 8005c0c:	4c0c      	ldr	r4, [pc, #48]	@ (8005c40 <__libc_init_array+0x38>)
 8005c0e:	4d0d      	ldr	r5, [pc, #52]	@ (8005c44 <__libc_init_array+0x3c>)
 8005c10:	1b64      	subs	r4, r4, r5
 8005c12:	10a4      	asrs	r4, r4, #2
 8005c14:	42a6      	cmp	r6, r4
 8005c16:	d109      	bne.n	8005c2c <__libc_init_array+0x24>
 8005c18:	2600      	movs	r6, #0
 8005c1a:	f000 fc61 	bl	80064e0 <_init>
 8005c1e:	4c0a      	ldr	r4, [pc, #40]	@ (8005c48 <__libc_init_array+0x40>)
 8005c20:	4d0a      	ldr	r5, [pc, #40]	@ (8005c4c <__libc_init_array+0x44>)
 8005c22:	1b64      	subs	r4, r4, r5
 8005c24:	10a4      	asrs	r4, r4, #2
 8005c26:	42a6      	cmp	r6, r4
 8005c28:	d105      	bne.n	8005c36 <__libc_init_array+0x2e>
 8005c2a:	bd70      	pop	{r4, r5, r6, pc}
 8005c2c:	00b3      	lsls	r3, r6, #2
 8005c2e:	58eb      	ldr	r3, [r5, r3]
 8005c30:	4798      	blx	r3
 8005c32:	3601      	adds	r6, #1
 8005c34:	e7ee      	b.n	8005c14 <__libc_init_array+0xc>
 8005c36:	00b3      	lsls	r3, r6, #2
 8005c38:	58eb      	ldr	r3, [r5, r3]
 8005c3a:	4798      	blx	r3
 8005c3c:	3601      	adds	r6, #1
 8005c3e:	e7f2      	b.n	8005c26 <__libc_init_array+0x1e>
 8005c40:	08006640 	.word	0x08006640
 8005c44:	08006640 	.word	0x08006640
 8005c48:	08006644 	.word	0x08006644
 8005c4c:	08006640 	.word	0x08006640

08005c50 <__retarget_lock_acquire_recursive>:
 8005c50:	4770      	bx	lr

08005c52 <__retarget_lock_release_recursive>:
 8005c52:	4770      	bx	lr

08005c54 <_free_r>:
 8005c54:	b570      	push	{r4, r5, r6, lr}
 8005c56:	0005      	movs	r5, r0
 8005c58:	1e0c      	subs	r4, r1, #0
 8005c5a:	d010      	beq.n	8005c7e <_free_r+0x2a>
 8005c5c:	3c04      	subs	r4, #4
 8005c5e:	6823      	ldr	r3, [r4, #0]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	da00      	bge.n	8005c66 <_free_r+0x12>
 8005c64:	18e4      	adds	r4, r4, r3
 8005c66:	0028      	movs	r0, r5
 8005c68:	f000 f8e0 	bl	8005e2c <__malloc_lock>
 8005c6c:	4a1d      	ldr	r2, [pc, #116]	@ (8005ce4 <_free_r+0x90>)
 8005c6e:	6813      	ldr	r3, [r2, #0]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d105      	bne.n	8005c80 <_free_r+0x2c>
 8005c74:	6063      	str	r3, [r4, #4]
 8005c76:	6014      	str	r4, [r2, #0]
 8005c78:	0028      	movs	r0, r5
 8005c7a:	f000 f8df 	bl	8005e3c <__malloc_unlock>
 8005c7e:	bd70      	pop	{r4, r5, r6, pc}
 8005c80:	42a3      	cmp	r3, r4
 8005c82:	d908      	bls.n	8005c96 <_free_r+0x42>
 8005c84:	6820      	ldr	r0, [r4, #0]
 8005c86:	1821      	adds	r1, r4, r0
 8005c88:	428b      	cmp	r3, r1
 8005c8a:	d1f3      	bne.n	8005c74 <_free_r+0x20>
 8005c8c:	6819      	ldr	r1, [r3, #0]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	1809      	adds	r1, r1, r0
 8005c92:	6021      	str	r1, [r4, #0]
 8005c94:	e7ee      	b.n	8005c74 <_free_r+0x20>
 8005c96:	001a      	movs	r2, r3
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d001      	beq.n	8005ca2 <_free_r+0x4e>
 8005c9e:	42a3      	cmp	r3, r4
 8005ca0:	d9f9      	bls.n	8005c96 <_free_r+0x42>
 8005ca2:	6811      	ldr	r1, [r2, #0]
 8005ca4:	1850      	adds	r0, r2, r1
 8005ca6:	42a0      	cmp	r0, r4
 8005ca8:	d10b      	bne.n	8005cc2 <_free_r+0x6e>
 8005caa:	6820      	ldr	r0, [r4, #0]
 8005cac:	1809      	adds	r1, r1, r0
 8005cae:	1850      	adds	r0, r2, r1
 8005cb0:	6011      	str	r1, [r2, #0]
 8005cb2:	4283      	cmp	r3, r0
 8005cb4:	d1e0      	bne.n	8005c78 <_free_r+0x24>
 8005cb6:	6818      	ldr	r0, [r3, #0]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	1841      	adds	r1, r0, r1
 8005cbc:	6011      	str	r1, [r2, #0]
 8005cbe:	6053      	str	r3, [r2, #4]
 8005cc0:	e7da      	b.n	8005c78 <_free_r+0x24>
 8005cc2:	42a0      	cmp	r0, r4
 8005cc4:	d902      	bls.n	8005ccc <_free_r+0x78>
 8005cc6:	230c      	movs	r3, #12
 8005cc8:	602b      	str	r3, [r5, #0]
 8005cca:	e7d5      	b.n	8005c78 <_free_r+0x24>
 8005ccc:	6820      	ldr	r0, [r4, #0]
 8005cce:	1821      	adds	r1, r4, r0
 8005cd0:	428b      	cmp	r3, r1
 8005cd2:	d103      	bne.n	8005cdc <_free_r+0x88>
 8005cd4:	6819      	ldr	r1, [r3, #0]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	1809      	adds	r1, r1, r0
 8005cda:	6021      	str	r1, [r4, #0]
 8005cdc:	6063      	str	r3, [r4, #4]
 8005cde:	6054      	str	r4, [r2, #4]
 8005ce0:	e7ca      	b.n	8005c78 <_free_r+0x24>
 8005ce2:	46c0      	nop			@ (mov r8, r8)
 8005ce4:	20000800 	.word	0x20000800

08005ce8 <sbrk_aligned>:
 8005ce8:	b570      	push	{r4, r5, r6, lr}
 8005cea:	4e0f      	ldr	r6, [pc, #60]	@ (8005d28 <sbrk_aligned+0x40>)
 8005cec:	000d      	movs	r5, r1
 8005cee:	6831      	ldr	r1, [r6, #0]
 8005cf0:	0004      	movs	r4, r0
 8005cf2:	2900      	cmp	r1, #0
 8005cf4:	d102      	bne.n	8005cfc <sbrk_aligned+0x14>
 8005cf6:	f000 fb95 	bl	8006424 <_sbrk_r>
 8005cfa:	6030      	str	r0, [r6, #0]
 8005cfc:	0029      	movs	r1, r5
 8005cfe:	0020      	movs	r0, r4
 8005d00:	f000 fb90 	bl	8006424 <_sbrk_r>
 8005d04:	1c43      	adds	r3, r0, #1
 8005d06:	d103      	bne.n	8005d10 <sbrk_aligned+0x28>
 8005d08:	2501      	movs	r5, #1
 8005d0a:	426d      	negs	r5, r5
 8005d0c:	0028      	movs	r0, r5
 8005d0e:	bd70      	pop	{r4, r5, r6, pc}
 8005d10:	2303      	movs	r3, #3
 8005d12:	1cc5      	adds	r5, r0, #3
 8005d14:	439d      	bics	r5, r3
 8005d16:	42a8      	cmp	r0, r5
 8005d18:	d0f8      	beq.n	8005d0c <sbrk_aligned+0x24>
 8005d1a:	1a29      	subs	r1, r5, r0
 8005d1c:	0020      	movs	r0, r4
 8005d1e:	f000 fb81 	bl	8006424 <_sbrk_r>
 8005d22:	3001      	adds	r0, #1
 8005d24:	d1f2      	bne.n	8005d0c <sbrk_aligned+0x24>
 8005d26:	e7ef      	b.n	8005d08 <sbrk_aligned+0x20>
 8005d28:	200007fc 	.word	0x200007fc

08005d2c <_malloc_r>:
 8005d2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d2e:	2203      	movs	r2, #3
 8005d30:	1ccb      	adds	r3, r1, #3
 8005d32:	4393      	bics	r3, r2
 8005d34:	3308      	adds	r3, #8
 8005d36:	0005      	movs	r5, r0
 8005d38:	001f      	movs	r7, r3
 8005d3a:	2b0c      	cmp	r3, #12
 8005d3c:	d234      	bcs.n	8005da8 <_malloc_r+0x7c>
 8005d3e:	270c      	movs	r7, #12
 8005d40:	42b9      	cmp	r1, r7
 8005d42:	d833      	bhi.n	8005dac <_malloc_r+0x80>
 8005d44:	0028      	movs	r0, r5
 8005d46:	f000 f871 	bl	8005e2c <__malloc_lock>
 8005d4a:	4e37      	ldr	r6, [pc, #220]	@ (8005e28 <_malloc_r+0xfc>)
 8005d4c:	6833      	ldr	r3, [r6, #0]
 8005d4e:	001c      	movs	r4, r3
 8005d50:	2c00      	cmp	r4, #0
 8005d52:	d12f      	bne.n	8005db4 <_malloc_r+0x88>
 8005d54:	0039      	movs	r1, r7
 8005d56:	0028      	movs	r0, r5
 8005d58:	f7ff ffc6 	bl	8005ce8 <sbrk_aligned>
 8005d5c:	0004      	movs	r4, r0
 8005d5e:	1c43      	adds	r3, r0, #1
 8005d60:	d15f      	bne.n	8005e22 <_malloc_r+0xf6>
 8005d62:	6834      	ldr	r4, [r6, #0]
 8005d64:	9400      	str	r4, [sp, #0]
 8005d66:	9b00      	ldr	r3, [sp, #0]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d14a      	bne.n	8005e02 <_malloc_r+0xd6>
 8005d6c:	2c00      	cmp	r4, #0
 8005d6e:	d052      	beq.n	8005e16 <_malloc_r+0xea>
 8005d70:	6823      	ldr	r3, [r4, #0]
 8005d72:	0028      	movs	r0, r5
 8005d74:	18e3      	adds	r3, r4, r3
 8005d76:	9900      	ldr	r1, [sp, #0]
 8005d78:	9301      	str	r3, [sp, #4]
 8005d7a:	f000 fb53 	bl	8006424 <_sbrk_r>
 8005d7e:	9b01      	ldr	r3, [sp, #4]
 8005d80:	4283      	cmp	r3, r0
 8005d82:	d148      	bne.n	8005e16 <_malloc_r+0xea>
 8005d84:	6823      	ldr	r3, [r4, #0]
 8005d86:	0028      	movs	r0, r5
 8005d88:	1aff      	subs	r7, r7, r3
 8005d8a:	0039      	movs	r1, r7
 8005d8c:	f7ff ffac 	bl	8005ce8 <sbrk_aligned>
 8005d90:	3001      	adds	r0, #1
 8005d92:	d040      	beq.n	8005e16 <_malloc_r+0xea>
 8005d94:	6823      	ldr	r3, [r4, #0]
 8005d96:	19db      	adds	r3, r3, r7
 8005d98:	6023      	str	r3, [r4, #0]
 8005d9a:	6833      	ldr	r3, [r6, #0]
 8005d9c:	685a      	ldr	r2, [r3, #4]
 8005d9e:	2a00      	cmp	r2, #0
 8005da0:	d133      	bne.n	8005e0a <_malloc_r+0xde>
 8005da2:	9b00      	ldr	r3, [sp, #0]
 8005da4:	6033      	str	r3, [r6, #0]
 8005da6:	e019      	b.n	8005ddc <_malloc_r+0xb0>
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	dac9      	bge.n	8005d40 <_malloc_r+0x14>
 8005dac:	230c      	movs	r3, #12
 8005dae:	602b      	str	r3, [r5, #0]
 8005db0:	2000      	movs	r0, #0
 8005db2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005db4:	6821      	ldr	r1, [r4, #0]
 8005db6:	1bc9      	subs	r1, r1, r7
 8005db8:	d420      	bmi.n	8005dfc <_malloc_r+0xd0>
 8005dba:	290b      	cmp	r1, #11
 8005dbc:	d90a      	bls.n	8005dd4 <_malloc_r+0xa8>
 8005dbe:	19e2      	adds	r2, r4, r7
 8005dc0:	6027      	str	r7, [r4, #0]
 8005dc2:	42a3      	cmp	r3, r4
 8005dc4:	d104      	bne.n	8005dd0 <_malloc_r+0xa4>
 8005dc6:	6032      	str	r2, [r6, #0]
 8005dc8:	6863      	ldr	r3, [r4, #4]
 8005dca:	6011      	str	r1, [r2, #0]
 8005dcc:	6053      	str	r3, [r2, #4]
 8005dce:	e005      	b.n	8005ddc <_malloc_r+0xb0>
 8005dd0:	605a      	str	r2, [r3, #4]
 8005dd2:	e7f9      	b.n	8005dc8 <_malloc_r+0x9c>
 8005dd4:	6862      	ldr	r2, [r4, #4]
 8005dd6:	42a3      	cmp	r3, r4
 8005dd8:	d10e      	bne.n	8005df8 <_malloc_r+0xcc>
 8005dda:	6032      	str	r2, [r6, #0]
 8005ddc:	0028      	movs	r0, r5
 8005dde:	f000 f82d 	bl	8005e3c <__malloc_unlock>
 8005de2:	0020      	movs	r0, r4
 8005de4:	2207      	movs	r2, #7
 8005de6:	300b      	adds	r0, #11
 8005de8:	1d23      	adds	r3, r4, #4
 8005dea:	4390      	bics	r0, r2
 8005dec:	1ac2      	subs	r2, r0, r3
 8005dee:	4298      	cmp	r0, r3
 8005df0:	d0df      	beq.n	8005db2 <_malloc_r+0x86>
 8005df2:	1a1b      	subs	r3, r3, r0
 8005df4:	50a3      	str	r3, [r4, r2]
 8005df6:	e7dc      	b.n	8005db2 <_malloc_r+0x86>
 8005df8:	605a      	str	r2, [r3, #4]
 8005dfa:	e7ef      	b.n	8005ddc <_malloc_r+0xb0>
 8005dfc:	0023      	movs	r3, r4
 8005dfe:	6864      	ldr	r4, [r4, #4]
 8005e00:	e7a6      	b.n	8005d50 <_malloc_r+0x24>
 8005e02:	9c00      	ldr	r4, [sp, #0]
 8005e04:	6863      	ldr	r3, [r4, #4]
 8005e06:	9300      	str	r3, [sp, #0]
 8005e08:	e7ad      	b.n	8005d66 <_malloc_r+0x3a>
 8005e0a:	001a      	movs	r2, r3
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	42a3      	cmp	r3, r4
 8005e10:	d1fb      	bne.n	8005e0a <_malloc_r+0xde>
 8005e12:	2300      	movs	r3, #0
 8005e14:	e7da      	b.n	8005dcc <_malloc_r+0xa0>
 8005e16:	230c      	movs	r3, #12
 8005e18:	0028      	movs	r0, r5
 8005e1a:	602b      	str	r3, [r5, #0]
 8005e1c:	f000 f80e 	bl	8005e3c <__malloc_unlock>
 8005e20:	e7c6      	b.n	8005db0 <_malloc_r+0x84>
 8005e22:	6007      	str	r7, [r0, #0]
 8005e24:	e7da      	b.n	8005ddc <_malloc_r+0xb0>
 8005e26:	46c0      	nop			@ (mov r8, r8)
 8005e28:	20000800 	.word	0x20000800

08005e2c <__malloc_lock>:
 8005e2c:	b510      	push	{r4, lr}
 8005e2e:	4802      	ldr	r0, [pc, #8]	@ (8005e38 <__malloc_lock+0xc>)
 8005e30:	f7ff ff0e 	bl	8005c50 <__retarget_lock_acquire_recursive>
 8005e34:	bd10      	pop	{r4, pc}
 8005e36:	46c0      	nop			@ (mov r8, r8)
 8005e38:	200007f8 	.word	0x200007f8

08005e3c <__malloc_unlock>:
 8005e3c:	b510      	push	{r4, lr}
 8005e3e:	4802      	ldr	r0, [pc, #8]	@ (8005e48 <__malloc_unlock+0xc>)
 8005e40:	f7ff ff07 	bl	8005c52 <__retarget_lock_release_recursive>
 8005e44:	bd10      	pop	{r4, pc}
 8005e46:	46c0      	nop			@ (mov r8, r8)
 8005e48:	200007f8 	.word	0x200007f8

08005e4c <__ssputs_r>:
 8005e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e4e:	688e      	ldr	r6, [r1, #8]
 8005e50:	b085      	sub	sp, #20
 8005e52:	001f      	movs	r7, r3
 8005e54:	000c      	movs	r4, r1
 8005e56:	680b      	ldr	r3, [r1, #0]
 8005e58:	9002      	str	r0, [sp, #8]
 8005e5a:	9203      	str	r2, [sp, #12]
 8005e5c:	42be      	cmp	r6, r7
 8005e5e:	d830      	bhi.n	8005ec2 <__ssputs_r+0x76>
 8005e60:	210c      	movs	r1, #12
 8005e62:	5e62      	ldrsh	r2, [r4, r1]
 8005e64:	2190      	movs	r1, #144	@ 0x90
 8005e66:	00c9      	lsls	r1, r1, #3
 8005e68:	420a      	tst	r2, r1
 8005e6a:	d028      	beq.n	8005ebe <__ssputs_r+0x72>
 8005e6c:	2003      	movs	r0, #3
 8005e6e:	6921      	ldr	r1, [r4, #16]
 8005e70:	1a5b      	subs	r3, r3, r1
 8005e72:	9301      	str	r3, [sp, #4]
 8005e74:	6963      	ldr	r3, [r4, #20]
 8005e76:	4343      	muls	r3, r0
 8005e78:	9801      	ldr	r0, [sp, #4]
 8005e7a:	0fdd      	lsrs	r5, r3, #31
 8005e7c:	18ed      	adds	r5, r5, r3
 8005e7e:	1c7b      	adds	r3, r7, #1
 8005e80:	181b      	adds	r3, r3, r0
 8005e82:	106d      	asrs	r5, r5, #1
 8005e84:	42ab      	cmp	r3, r5
 8005e86:	d900      	bls.n	8005e8a <__ssputs_r+0x3e>
 8005e88:	001d      	movs	r5, r3
 8005e8a:	0552      	lsls	r2, r2, #21
 8005e8c:	d528      	bpl.n	8005ee0 <__ssputs_r+0x94>
 8005e8e:	0029      	movs	r1, r5
 8005e90:	9802      	ldr	r0, [sp, #8]
 8005e92:	f7ff ff4b 	bl	8005d2c <_malloc_r>
 8005e96:	1e06      	subs	r6, r0, #0
 8005e98:	d02c      	beq.n	8005ef4 <__ssputs_r+0xa8>
 8005e9a:	9a01      	ldr	r2, [sp, #4]
 8005e9c:	6921      	ldr	r1, [r4, #16]
 8005e9e:	f000 fade 	bl	800645e <memcpy>
 8005ea2:	89a2      	ldrh	r2, [r4, #12]
 8005ea4:	4b18      	ldr	r3, [pc, #96]	@ (8005f08 <__ssputs_r+0xbc>)
 8005ea6:	401a      	ands	r2, r3
 8005ea8:	2380      	movs	r3, #128	@ 0x80
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	81a3      	strh	r3, [r4, #12]
 8005eae:	9b01      	ldr	r3, [sp, #4]
 8005eb0:	6126      	str	r6, [r4, #16]
 8005eb2:	18f6      	adds	r6, r6, r3
 8005eb4:	6026      	str	r6, [r4, #0]
 8005eb6:	003e      	movs	r6, r7
 8005eb8:	6165      	str	r5, [r4, #20]
 8005eba:	1aed      	subs	r5, r5, r3
 8005ebc:	60a5      	str	r5, [r4, #8]
 8005ebe:	42be      	cmp	r6, r7
 8005ec0:	d900      	bls.n	8005ec4 <__ssputs_r+0x78>
 8005ec2:	003e      	movs	r6, r7
 8005ec4:	0032      	movs	r2, r6
 8005ec6:	9903      	ldr	r1, [sp, #12]
 8005ec8:	6820      	ldr	r0, [r4, #0]
 8005eca:	f000 fa99 	bl	8006400 <memmove>
 8005ece:	2000      	movs	r0, #0
 8005ed0:	68a3      	ldr	r3, [r4, #8]
 8005ed2:	1b9b      	subs	r3, r3, r6
 8005ed4:	60a3      	str	r3, [r4, #8]
 8005ed6:	6823      	ldr	r3, [r4, #0]
 8005ed8:	199b      	adds	r3, r3, r6
 8005eda:	6023      	str	r3, [r4, #0]
 8005edc:	b005      	add	sp, #20
 8005ede:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ee0:	002a      	movs	r2, r5
 8005ee2:	9802      	ldr	r0, [sp, #8]
 8005ee4:	f000 fac4 	bl	8006470 <_realloc_r>
 8005ee8:	1e06      	subs	r6, r0, #0
 8005eea:	d1e0      	bne.n	8005eae <__ssputs_r+0x62>
 8005eec:	6921      	ldr	r1, [r4, #16]
 8005eee:	9802      	ldr	r0, [sp, #8]
 8005ef0:	f7ff feb0 	bl	8005c54 <_free_r>
 8005ef4:	230c      	movs	r3, #12
 8005ef6:	2001      	movs	r0, #1
 8005ef8:	9a02      	ldr	r2, [sp, #8]
 8005efa:	4240      	negs	r0, r0
 8005efc:	6013      	str	r3, [r2, #0]
 8005efe:	89a2      	ldrh	r2, [r4, #12]
 8005f00:	3334      	adds	r3, #52	@ 0x34
 8005f02:	4313      	orrs	r3, r2
 8005f04:	81a3      	strh	r3, [r4, #12]
 8005f06:	e7e9      	b.n	8005edc <__ssputs_r+0x90>
 8005f08:	fffffb7f 	.word	0xfffffb7f

08005f0c <_svfiprintf_r>:
 8005f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f0e:	b0a1      	sub	sp, #132	@ 0x84
 8005f10:	9003      	str	r0, [sp, #12]
 8005f12:	001d      	movs	r5, r3
 8005f14:	898b      	ldrh	r3, [r1, #12]
 8005f16:	000f      	movs	r7, r1
 8005f18:	0016      	movs	r6, r2
 8005f1a:	061b      	lsls	r3, r3, #24
 8005f1c:	d511      	bpl.n	8005f42 <_svfiprintf_r+0x36>
 8005f1e:	690b      	ldr	r3, [r1, #16]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d10e      	bne.n	8005f42 <_svfiprintf_r+0x36>
 8005f24:	2140      	movs	r1, #64	@ 0x40
 8005f26:	f7ff ff01 	bl	8005d2c <_malloc_r>
 8005f2a:	6038      	str	r0, [r7, #0]
 8005f2c:	6138      	str	r0, [r7, #16]
 8005f2e:	2800      	cmp	r0, #0
 8005f30:	d105      	bne.n	8005f3e <_svfiprintf_r+0x32>
 8005f32:	230c      	movs	r3, #12
 8005f34:	9a03      	ldr	r2, [sp, #12]
 8005f36:	6013      	str	r3, [r2, #0]
 8005f38:	2001      	movs	r0, #1
 8005f3a:	4240      	negs	r0, r0
 8005f3c:	e0cf      	b.n	80060de <_svfiprintf_r+0x1d2>
 8005f3e:	2340      	movs	r3, #64	@ 0x40
 8005f40:	617b      	str	r3, [r7, #20]
 8005f42:	2300      	movs	r3, #0
 8005f44:	ac08      	add	r4, sp, #32
 8005f46:	6163      	str	r3, [r4, #20]
 8005f48:	3320      	adds	r3, #32
 8005f4a:	7663      	strb	r3, [r4, #25]
 8005f4c:	3310      	adds	r3, #16
 8005f4e:	76a3      	strb	r3, [r4, #26]
 8005f50:	9507      	str	r5, [sp, #28]
 8005f52:	0035      	movs	r5, r6
 8005f54:	782b      	ldrb	r3, [r5, #0]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d001      	beq.n	8005f5e <_svfiprintf_r+0x52>
 8005f5a:	2b25      	cmp	r3, #37	@ 0x25
 8005f5c:	d148      	bne.n	8005ff0 <_svfiprintf_r+0xe4>
 8005f5e:	1bab      	subs	r3, r5, r6
 8005f60:	9305      	str	r3, [sp, #20]
 8005f62:	42b5      	cmp	r5, r6
 8005f64:	d00b      	beq.n	8005f7e <_svfiprintf_r+0x72>
 8005f66:	0032      	movs	r2, r6
 8005f68:	0039      	movs	r1, r7
 8005f6a:	9803      	ldr	r0, [sp, #12]
 8005f6c:	f7ff ff6e 	bl	8005e4c <__ssputs_r>
 8005f70:	3001      	adds	r0, #1
 8005f72:	d100      	bne.n	8005f76 <_svfiprintf_r+0x6a>
 8005f74:	e0ae      	b.n	80060d4 <_svfiprintf_r+0x1c8>
 8005f76:	6963      	ldr	r3, [r4, #20]
 8005f78:	9a05      	ldr	r2, [sp, #20]
 8005f7a:	189b      	adds	r3, r3, r2
 8005f7c:	6163      	str	r3, [r4, #20]
 8005f7e:	782b      	ldrb	r3, [r5, #0]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d100      	bne.n	8005f86 <_svfiprintf_r+0x7a>
 8005f84:	e0a6      	b.n	80060d4 <_svfiprintf_r+0x1c8>
 8005f86:	2201      	movs	r2, #1
 8005f88:	2300      	movs	r3, #0
 8005f8a:	4252      	negs	r2, r2
 8005f8c:	6062      	str	r2, [r4, #4]
 8005f8e:	a904      	add	r1, sp, #16
 8005f90:	3254      	adds	r2, #84	@ 0x54
 8005f92:	1852      	adds	r2, r2, r1
 8005f94:	1c6e      	adds	r6, r5, #1
 8005f96:	6023      	str	r3, [r4, #0]
 8005f98:	60e3      	str	r3, [r4, #12]
 8005f9a:	60a3      	str	r3, [r4, #8]
 8005f9c:	7013      	strb	r3, [r2, #0]
 8005f9e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8005fa0:	4b54      	ldr	r3, [pc, #336]	@ (80060f4 <_svfiprintf_r+0x1e8>)
 8005fa2:	2205      	movs	r2, #5
 8005fa4:	0018      	movs	r0, r3
 8005fa6:	7831      	ldrb	r1, [r6, #0]
 8005fa8:	9305      	str	r3, [sp, #20]
 8005faa:	f000 fa4d 	bl	8006448 <memchr>
 8005fae:	1c75      	adds	r5, r6, #1
 8005fb0:	2800      	cmp	r0, #0
 8005fb2:	d11f      	bne.n	8005ff4 <_svfiprintf_r+0xe8>
 8005fb4:	6822      	ldr	r2, [r4, #0]
 8005fb6:	06d3      	lsls	r3, r2, #27
 8005fb8:	d504      	bpl.n	8005fc4 <_svfiprintf_r+0xb8>
 8005fba:	2353      	movs	r3, #83	@ 0x53
 8005fbc:	a904      	add	r1, sp, #16
 8005fbe:	185b      	adds	r3, r3, r1
 8005fc0:	2120      	movs	r1, #32
 8005fc2:	7019      	strb	r1, [r3, #0]
 8005fc4:	0713      	lsls	r3, r2, #28
 8005fc6:	d504      	bpl.n	8005fd2 <_svfiprintf_r+0xc6>
 8005fc8:	2353      	movs	r3, #83	@ 0x53
 8005fca:	a904      	add	r1, sp, #16
 8005fcc:	185b      	adds	r3, r3, r1
 8005fce:	212b      	movs	r1, #43	@ 0x2b
 8005fd0:	7019      	strb	r1, [r3, #0]
 8005fd2:	7833      	ldrb	r3, [r6, #0]
 8005fd4:	2b2a      	cmp	r3, #42	@ 0x2a
 8005fd6:	d016      	beq.n	8006006 <_svfiprintf_r+0xfa>
 8005fd8:	0035      	movs	r5, r6
 8005fda:	2100      	movs	r1, #0
 8005fdc:	200a      	movs	r0, #10
 8005fde:	68e3      	ldr	r3, [r4, #12]
 8005fe0:	782a      	ldrb	r2, [r5, #0]
 8005fe2:	1c6e      	adds	r6, r5, #1
 8005fe4:	3a30      	subs	r2, #48	@ 0x30
 8005fe6:	2a09      	cmp	r2, #9
 8005fe8:	d950      	bls.n	800608c <_svfiprintf_r+0x180>
 8005fea:	2900      	cmp	r1, #0
 8005fec:	d111      	bne.n	8006012 <_svfiprintf_r+0x106>
 8005fee:	e017      	b.n	8006020 <_svfiprintf_r+0x114>
 8005ff0:	3501      	adds	r5, #1
 8005ff2:	e7af      	b.n	8005f54 <_svfiprintf_r+0x48>
 8005ff4:	9b05      	ldr	r3, [sp, #20]
 8005ff6:	6822      	ldr	r2, [r4, #0]
 8005ff8:	1ac0      	subs	r0, r0, r3
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	4083      	lsls	r3, r0
 8005ffe:	4313      	orrs	r3, r2
 8006000:	002e      	movs	r6, r5
 8006002:	6023      	str	r3, [r4, #0]
 8006004:	e7cc      	b.n	8005fa0 <_svfiprintf_r+0x94>
 8006006:	9b07      	ldr	r3, [sp, #28]
 8006008:	1d19      	adds	r1, r3, #4
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	9107      	str	r1, [sp, #28]
 800600e:	2b00      	cmp	r3, #0
 8006010:	db01      	blt.n	8006016 <_svfiprintf_r+0x10a>
 8006012:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006014:	e004      	b.n	8006020 <_svfiprintf_r+0x114>
 8006016:	425b      	negs	r3, r3
 8006018:	60e3      	str	r3, [r4, #12]
 800601a:	2302      	movs	r3, #2
 800601c:	4313      	orrs	r3, r2
 800601e:	6023      	str	r3, [r4, #0]
 8006020:	782b      	ldrb	r3, [r5, #0]
 8006022:	2b2e      	cmp	r3, #46	@ 0x2e
 8006024:	d10c      	bne.n	8006040 <_svfiprintf_r+0x134>
 8006026:	786b      	ldrb	r3, [r5, #1]
 8006028:	2b2a      	cmp	r3, #42	@ 0x2a
 800602a:	d134      	bne.n	8006096 <_svfiprintf_r+0x18a>
 800602c:	9b07      	ldr	r3, [sp, #28]
 800602e:	3502      	adds	r5, #2
 8006030:	1d1a      	adds	r2, r3, #4
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	9207      	str	r2, [sp, #28]
 8006036:	2b00      	cmp	r3, #0
 8006038:	da01      	bge.n	800603e <_svfiprintf_r+0x132>
 800603a:	2301      	movs	r3, #1
 800603c:	425b      	negs	r3, r3
 800603e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006040:	4e2d      	ldr	r6, [pc, #180]	@ (80060f8 <_svfiprintf_r+0x1ec>)
 8006042:	2203      	movs	r2, #3
 8006044:	0030      	movs	r0, r6
 8006046:	7829      	ldrb	r1, [r5, #0]
 8006048:	f000 f9fe 	bl	8006448 <memchr>
 800604c:	2800      	cmp	r0, #0
 800604e:	d006      	beq.n	800605e <_svfiprintf_r+0x152>
 8006050:	2340      	movs	r3, #64	@ 0x40
 8006052:	1b80      	subs	r0, r0, r6
 8006054:	4083      	lsls	r3, r0
 8006056:	6822      	ldr	r2, [r4, #0]
 8006058:	3501      	adds	r5, #1
 800605a:	4313      	orrs	r3, r2
 800605c:	6023      	str	r3, [r4, #0]
 800605e:	7829      	ldrb	r1, [r5, #0]
 8006060:	2206      	movs	r2, #6
 8006062:	4826      	ldr	r0, [pc, #152]	@ (80060fc <_svfiprintf_r+0x1f0>)
 8006064:	1c6e      	adds	r6, r5, #1
 8006066:	7621      	strb	r1, [r4, #24]
 8006068:	f000 f9ee 	bl	8006448 <memchr>
 800606c:	2800      	cmp	r0, #0
 800606e:	d038      	beq.n	80060e2 <_svfiprintf_r+0x1d6>
 8006070:	4b23      	ldr	r3, [pc, #140]	@ (8006100 <_svfiprintf_r+0x1f4>)
 8006072:	2b00      	cmp	r3, #0
 8006074:	d122      	bne.n	80060bc <_svfiprintf_r+0x1b0>
 8006076:	2207      	movs	r2, #7
 8006078:	9b07      	ldr	r3, [sp, #28]
 800607a:	3307      	adds	r3, #7
 800607c:	4393      	bics	r3, r2
 800607e:	3308      	adds	r3, #8
 8006080:	9307      	str	r3, [sp, #28]
 8006082:	6963      	ldr	r3, [r4, #20]
 8006084:	9a04      	ldr	r2, [sp, #16]
 8006086:	189b      	adds	r3, r3, r2
 8006088:	6163      	str	r3, [r4, #20]
 800608a:	e762      	b.n	8005f52 <_svfiprintf_r+0x46>
 800608c:	4343      	muls	r3, r0
 800608e:	0035      	movs	r5, r6
 8006090:	2101      	movs	r1, #1
 8006092:	189b      	adds	r3, r3, r2
 8006094:	e7a4      	b.n	8005fe0 <_svfiprintf_r+0xd4>
 8006096:	2300      	movs	r3, #0
 8006098:	200a      	movs	r0, #10
 800609a:	0019      	movs	r1, r3
 800609c:	3501      	adds	r5, #1
 800609e:	6063      	str	r3, [r4, #4]
 80060a0:	782a      	ldrb	r2, [r5, #0]
 80060a2:	1c6e      	adds	r6, r5, #1
 80060a4:	3a30      	subs	r2, #48	@ 0x30
 80060a6:	2a09      	cmp	r2, #9
 80060a8:	d903      	bls.n	80060b2 <_svfiprintf_r+0x1a6>
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d0c8      	beq.n	8006040 <_svfiprintf_r+0x134>
 80060ae:	9109      	str	r1, [sp, #36]	@ 0x24
 80060b0:	e7c6      	b.n	8006040 <_svfiprintf_r+0x134>
 80060b2:	4341      	muls	r1, r0
 80060b4:	0035      	movs	r5, r6
 80060b6:	2301      	movs	r3, #1
 80060b8:	1889      	adds	r1, r1, r2
 80060ba:	e7f1      	b.n	80060a0 <_svfiprintf_r+0x194>
 80060bc:	aa07      	add	r2, sp, #28
 80060be:	9200      	str	r2, [sp, #0]
 80060c0:	0021      	movs	r1, r4
 80060c2:	003a      	movs	r2, r7
 80060c4:	4b0f      	ldr	r3, [pc, #60]	@ (8006104 <_svfiprintf_r+0x1f8>)
 80060c6:	9803      	ldr	r0, [sp, #12]
 80060c8:	e000      	b.n	80060cc <_svfiprintf_r+0x1c0>
 80060ca:	bf00      	nop
 80060cc:	9004      	str	r0, [sp, #16]
 80060ce:	9b04      	ldr	r3, [sp, #16]
 80060d0:	3301      	adds	r3, #1
 80060d2:	d1d6      	bne.n	8006082 <_svfiprintf_r+0x176>
 80060d4:	89bb      	ldrh	r3, [r7, #12]
 80060d6:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80060d8:	065b      	lsls	r3, r3, #25
 80060da:	d500      	bpl.n	80060de <_svfiprintf_r+0x1d2>
 80060dc:	e72c      	b.n	8005f38 <_svfiprintf_r+0x2c>
 80060de:	b021      	add	sp, #132	@ 0x84
 80060e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060e2:	aa07      	add	r2, sp, #28
 80060e4:	9200      	str	r2, [sp, #0]
 80060e6:	0021      	movs	r1, r4
 80060e8:	003a      	movs	r2, r7
 80060ea:	4b06      	ldr	r3, [pc, #24]	@ (8006104 <_svfiprintf_r+0x1f8>)
 80060ec:	9803      	ldr	r0, [sp, #12]
 80060ee:	f000 f87b 	bl	80061e8 <_printf_i>
 80060f2:	e7eb      	b.n	80060cc <_svfiprintf_r+0x1c0>
 80060f4:	0800660c 	.word	0x0800660c
 80060f8:	08006612 	.word	0x08006612
 80060fc:	08006616 	.word	0x08006616
 8006100:	00000000 	.word	0x00000000
 8006104:	08005e4d 	.word	0x08005e4d

08006108 <_printf_common>:
 8006108:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800610a:	0016      	movs	r6, r2
 800610c:	9301      	str	r3, [sp, #4]
 800610e:	688a      	ldr	r2, [r1, #8]
 8006110:	690b      	ldr	r3, [r1, #16]
 8006112:	000c      	movs	r4, r1
 8006114:	9000      	str	r0, [sp, #0]
 8006116:	4293      	cmp	r3, r2
 8006118:	da00      	bge.n	800611c <_printf_common+0x14>
 800611a:	0013      	movs	r3, r2
 800611c:	0022      	movs	r2, r4
 800611e:	6033      	str	r3, [r6, #0]
 8006120:	3243      	adds	r2, #67	@ 0x43
 8006122:	7812      	ldrb	r2, [r2, #0]
 8006124:	2a00      	cmp	r2, #0
 8006126:	d001      	beq.n	800612c <_printf_common+0x24>
 8006128:	3301      	adds	r3, #1
 800612a:	6033      	str	r3, [r6, #0]
 800612c:	6823      	ldr	r3, [r4, #0]
 800612e:	069b      	lsls	r3, r3, #26
 8006130:	d502      	bpl.n	8006138 <_printf_common+0x30>
 8006132:	6833      	ldr	r3, [r6, #0]
 8006134:	3302      	adds	r3, #2
 8006136:	6033      	str	r3, [r6, #0]
 8006138:	6822      	ldr	r2, [r4, #0]
 800613a:	2306      	movs	r3, #6
 800613c:	0015      	movs	r5, r2
 800613e:	401d      	ands	r5, r3
 8006140:	421a      	tst	r2, r3
 8006142:	d027      	beq.n	8006194 <_printf_common+0x8c>
 8006144:	0023      	movs	r3, r4
 8006146:	3343      	adds	r3, #67	@ 0x43
 8006148:	781b      	ldrb	r3, [r3, #0]
 800614a:	1e5a      	subs	r2, r3, #1
 800614c:	4193      	sbcs	r3, r2
 800614e:	6822      	ldr	r2, [r4, #0]
 8006150:	0692      	lsls	r2, r2, #26
 8006152:	d430      	bmi.n	80061b6 <_printf_common+0xae>
 8006154:	0022      	movs	r2, r4
 8006156:	9901      	ldr	r1, [sp, #4]
 8006158:	9800      	ldr	r0, [sp, #0]
 800615a:	9d08      	ldr	r5, [sp, #32]
 800615c:	3243      	adds	r2, #67	@ 0x43
 800615e:	47a8      	blx	r5
 8006160:	3001      	adds	r0, #1
 8006162:	d025      	beq.n	80061b0 <_printf_common+0xa8>
 8006164:	2206      	movs	r2, #6
 8006166:	6823      	ldr	r3, [r4, #0]
 8006168:	2500      	movs	r5, #0
 800616a:	4013      	ands	r3, r2
 800616c:	2b04      	cmp	r3, #4
 800616e:	d105      	bne.n	800617c <_printf_common+0x74>
 8006170:	6833      	ldr	r3, [r6, #0]
 8006172:	68e5      	ldr	r5, [r4, #12]
 8006174:	1aed      	subs	r5, r5, r3
 8006176:	43eb      	mvns	r3, r5
 8006178:	17db      	asrs	r3, r3, #31
 800617a:	401d      	ands	r5, r3
 800617c:	68a3      	ldr	r3, [r4, #8]
 800617e:	6922      	ldr	r2, [r4, #16]
 8006180:	4293      	cmp	r3, r2
 8006182:	dd01      	ble.n	8006188 <_printf_common+0x80>
 8006184:	1a9b      	subs	r3, r3, r2
 8006186:	18ed      	adds	r5, r5, r3
 8006188:	2600      	movs	r6, #0
 800618a:	42b5      	cmp	r5, r6
 800618c:	d120      	bne.n	80061d0 <_printf_common+0xc8>
 800618e:	2000      	movs	r0, #0
 8006190:	e010      	b.n	80061b4 <_printf_common+0xac>
 8006192:	3501      	adds	r5, #1
 8006194:	68e3      	ldr	r3, [r4, #12]
 8006196:	6832      	ldr	r2, [r6, #0]
 8006198:	1a9b      	subs	r3, r3, r2
 800619a:	42ab      	cmp	r3, r5
 800619c:	ddd2      	ble.n	8006144 <_printf_common+0x3c>
 800619e:	0022      	movs	r2, r4
 80061a0:	2301      	movs	r3, #1
 80061a2:	9901      	ldr	r1, [sp, #4]
 80061a4:	9800      	ldr	r0, [sp, #0]
 80061a6:	9f08      	ldr	r7, [sp, #32]
 80061a8:	3219      	adds	r2, #25
 80061aa:	47b8      	blx	r7
 80061ac:	3001      	adds	r0, #1
 80061ae:	d1f0      	bne.n	8006192 <_printf_common+0x8a>
 80061b0:	2001      	movs	r0, #1
 80061b2:	4240      	negs	r0, r0
 80061b4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80061b6:	2030      	movs	r0, #48	@ 0x30
 80061b8:	18e1      	adds	r1, r4, r3
 80061ba:	3143      	adds	r1, #67	@ 0x43
 80061bc:	7008      	strb	r0, [r1, #0]
 80061be:	0021      	movs	r1, r4
 80061c0:	1c5a      	adds	r2, r3, #1
 80061c2:	3145      	adds	r1, #69	@ 0x45
 80061c4:	7809      	ldrb	r1, [r1, #0]
 80061c6:	18a2      	adds	r2, r4, r2
 80061c8:	3243      	adds	r2, #67	@ 0x43
 80061ca:	3302      	adds	r3, #2
 80061cc:	7011      	strb	r1, [r2, #0]
 80061ce:	e7c1      	b.n	8006154 <_printf_common+0x4c>
 80061d0:	0022      	movs	r2, r4
 80061d2:	2301      	movs	r3, #1
 80061d4:	9901      	ldr	r1, [sp, #4]
 80061d6:	9800      	ldr	r0, [sp, #0]
 80061d8:	9f08      	ldr	r7, [sp, #32]
 80061da:	321a      	adds	r2, #26
 80061dc:	47b8      	blx	r7
 80061de:	3001      	adds	r0, #1
 80061e0:	d0e6      	beq.n	80061b0 <_printf_common+0xa8>
 80061e2:	3601      	adds	r6, #1
 80061e4:	e7d1      	b.n	800618a <_printf_common+0x82>
	...

080061e8 <_printf_i>:
 80061e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061ea:	b08b      	sub	sp, #44	@ 0x2c
 80061ec:	9206      	str	r2, [sp, #24]
 80061ee:	000a      	movs	r2, r1
 80061f0:	3243      	adds	r2, #67	@ 0x43
 80061f2:	9307      	str	r3, [sp, #28]
 80061f4:	9005      	str	r0, [sp, #20]
 80061f6:	9203      	str	r2, [sp, #12]
 80061f8:	7e0a      	ldrb	r2, [r1, #24]
 80061fa:	000c      	movs	r4, r1
 80061fc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80061fe:	2a78      	cmp	r2, #120	@ 0x78
 8006200:	d809      	bhi.n	8006216 <_printf_i+0x2e>
 8006202:	2a62      	cmp	r2, #98	@ 0x62
 8006204:	d80b      	bhi.n	800621e <_printf_i+0x36>
 8006206:	2a00      	cmp	r2, #0
 8006208:	d100      	bne.n	800620c <_printf_i+0x24>
 800620a:	e0ba      	b.n	8006382 <_printf_i+0x19a>
 800620c:	497a      	ldr	r1, [pc, #488]	@ (80063f8 <_printf_i+0x210>)
 800620e:	9104      	str	r1, [sp, #16]
 8006210:	2a58      	cmp	r2, #88	@ 0x58
 8006212:	d100      	bne.n	8006216 <_printf_i+0x2e>
 8006214:	e08e      	b.n	8006334 <_printf_i+0x14c>
 8006216:	0025      	movs	r5, r4
 8006218:	3542      	adds	r5, #66	@ 0x42
 800621a:	702a      	strb	r2, [r5, #0]
 800621c:	e022      	b.n	8006264 <_printf_i+0x7c>
 800621e:	0010      	movs	r0, r2
 8006220:	3863      	subs	r0, #99	@ 0x63
 8006222:	2815      	cmp	r0, #21
 8006224:	d8f7      	bhi.n	8006216 <_printf_i+0x2e>
 8006226:	f7f9 ff77 	bl	8000118 <__gnu_thumb1_case_shi>
 800622a:	0016      	.short	0x0016
 800622c:	fff6001f 	.word	0xfff6001f
 8006230:	fff6fff6 	.word	0xfff6fff6
 8006234:	001ffff6 	.word	0x001ffff6
 8006238:	fff6fff6 	.word	0xfff6fff6
 800623c:	fff6fff6 	.word	0xfff6fff6
 8006240:	0036009f 	.word	0x0036009f
 8006244:	fff6007e 	.word	0xfff6007e
 8006248:	00b0fff6 	.word	0x00b0fff6
 800624c:	0036fff6 	.word	0x0036fff6
 8006250:	fff6fff6 	.word	0xfff6fff6
 8006254:	0082      	.short	0x0082
 8006256:	0025      	movs	r5, r4
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	3542      	adds	r5, #66	@ 0x42
 800625c:	1d11      	adds	r1, r2, #4
 800625e:	6019      	str	r1, [r3, #0]
 8006260:	6813      	ldr	r3, [r2, #0]
 8006262:	702b      	strb	r3, [r5, #0]
 8006264:	2301      	movs	r3, #1
 8006266:	e09e      	b.n	80063a6 <_printf_i+0x1be>
 8006268:	6818      	ldr	r0, [r3, #0]
 800626a:	6809      	ldr	r1, [r1, #0]
 800626c:	1d02      	adds	r2, r0, #4
 800626e:	060d      	lsls	r5, r1, #24
 8006270:	d50b      	bpl.n	800628a <_printf_i+0xa2>
 8006272:	6806      	ldr	r6, [r0, #0]
 8006274:	601a      	str	r2, [r3, #0]
 8006276:	2e00      	cmp	r6, #0
 8006278:	da03      	bge.n	8006282 <_printf_i+0x9a>
 800627a:	232d      	movs	r3, #45	@ 0x2d
 800627c:	9a03      	ldr	r2, [sp, #12]
 800627e:	4276      	negs	r6, r6
 8006280:	7013      	strb	r3, [r2, #0]
 8006282:	4b5d      	ldr	r3, [pc, #372]	@ (80063f8 <_printf_i+0x210>)
 8006284:	270a      	movs	r7, #10
 8006286:	9304      	str	r3, [sp, #16]
 8006288:	e018      	b.n	80062bc <_printf_i+0xd4>
 800628a:	6806      	ldr	r6, [r0, #0]
 800628c:	601a      	str	r2, [r3, #0]
 800628e:	0649      	lsls	r1, r1, #25
 8006290:	d5f1      	bpl.n	8006276 <_printf_i+0x8e>
 8006292:	b236      	sxth	r6, r6
 8006294:	e7ef      	b.n	8006276 <_printf_i+0x8e>
 8006296:	6808      	ldr	r0, [r1, #0]
 8006298:	6819      	ldr	r1, [r3, #0]
 800629a:	c940      	ldmia	r1!, {r6}
 800629c:	0605      	lsls	r5, r0, #24
 800629e:	d402      	bmi.n	80062a6 <_printf_i+0xbe>
 80062a0:	0640      	lsls	r0, r0, #25
 80062a2:	d500      	bpl.n	80062a6 <_printf_i+0xbe>
 80062a4:	b2b6      	uxth	r6, r6
 80062a6:	6019      	str	r1, [r3, #0]
 80062a8:	4b53      	ldr	r3, [pc, #332]	@ (80063f8 <_printf_i+0x210>)
 80062aa:	270a      	movs	r7, #10
 80062ac:	9304      	str	r3, [sp, #16]
 80062ae:	2a6f      	cmp	r2, #111	@ 0x6f
 80062b0:	d100      	bne.n	80062b4 <_printf_i+0xcc>
 80062b2:	3f02      	subs	r7, #2
 80062b4:	0023      	movs	r3, r4
 80062b6:	2200      	movs	r2, #0
 80062b8:	3343      	adds	r3, #67	@ 0x43
 80062ba:	701a      	strb	r2, [r3, #0]
 80062bc:	6863      	ldr	r3, [r4, #4]
 80062be:	60a3      	str	r3, [r4, #8]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	db06      	blt.n	80062d2 <_printf_i+0xea>
 80062c4:	2104      	movs	r1, #4
 80062c6:	6822      	ldr	r2, [r4, #0]
 80062c8:	9d03      	ldr	r5, [sp, #12]
 80062ca:	438a      	bics	r2, r1
 80062cc:	6022      	str	r2, [r4, #0]
 80062ce:	4333      	orrs	r3, r6
 80062d0:	d00c      	beq.n	80062ec <_printf_i+0x104>
 80062d2:	9d03      	ldr	r5, [sp, #12]
 80062d4:	0030      	movs	r0, r6
 80062d6:	0039      	movs	r1, r7
 80062d8:	f7f9 ffae 	bl	8000238 <__aeabi_uidivmod>
 80062dc:	9b04      	ldr	r3, [sp, #16]
 80062de:	3d01      	subs	r5, #1
 80062e0:	5c5b      	ldrb	r3, [r3, r1]
 80062e2:	702b      	strb	r3, [r5, #0]
 80062e4:	0033      	movs	r3, r6
 80062e6:	0006      	movs	r6, r0
 80062e8:	429f      	cmp	r7, r3
 80062ea:	d9f3      	bls.n	80062d4 <_printf_i+0xec>
 80062ec:	2f08      	cmp	r7, #8
 80062ee:	d109      	bne.n	8006304 <_printf_i+0x11c>
 80062f0:	6823      	ldr	r3, [r4, #0]
 80062f2:	07db      	lsls	r3, r3, #31
 80062f4:	d506      	bpl.n	8006304 <_printf_i+0x11c>
 80062f6:	6862      	ldr	r2, [r4, #4]
 80062f8:	6923      	ldr	r3, [r4, #16]
 80062fa:	429a      	cmp	r2, r3
 80062fc:	dc02      	bgt.n	8006304 <_printf_i+0x11c>
 80062fe:	2330      	movs	r3, #48	@ 0x30
 8006300:	3d01      	subs	r5, #1
 8006302:	702b      	strb	r3, [r5, #0]
 8006304:	9b03      	ldr	r3, [sp, #12]
 8006306:	1b5b      	subs	r3, r3, r5
 8006308:	6123      	str	r3, [r4, #16]
 800630a:	9b07      	ldr	r3, [sp, #28]
 800630c:	0021      	movs	r1, r4
 800630e:	9300      	str	r3, [sp, #0]
 8006310:	9805      	ldr	r0, [sp, #20]
 8006312:	9b06      	ldr	r3, [sp, #24]
 8006314:	aa09      	add	r2, sp, #36	@ 0x24
 8006316:	f7ff fef7 	bl	8006108 <_printf_common>
 800631a:	3001      	adds	r0, #1
 800631c:	d148      	bne.n	80063b0 <_printf_i+0x1c8>
 800631e:	2001      	movs	r0, #1
 8006320:	4240      	negs	r0, r0
 8006322:	b00b      	add	sp, #44	@ 0x2c
 8006324:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006326:	2220      	movs	r2, #32
 8006328:	6809      	ldr	r1, [r1, #0]
 800632a:	430a      	orrs	r2, r1
 800632c:	6022      	str	r2, [r4, #0]
 800632e:	2278      	movs	r2, #120	@ 0x78
 8006330:	4932      	ldr	r1, [pc, #200]	@ (80063fc <_printf_i+0x214>)
 8006332:	9104      	str	r1, [sp, #16]
 8006334:	0021      	movs	r1, r4
 8006336:	3145      	adds	r1, #69	@ 0x45
 8006338:	700a      	strb	r2, [r1, #0]
 800633a:	6819      	ldr	r1, [r3, #0]
 800633c:	6822      	ldr	r2, [r4, #0]
 800633e:	c940      	ldmia	r1!, {r6}
 8006340:	0610      	lsls	r0, r2, #24
 8006342:	d402      	bmi.n	800634a <_printf_i+0x162>
 8006344:	0650      	lsls	r0, r2, #25
 8006346:	d500      	bpl.n	800634a <_printf_i+0x162>
 8006348:	b2b6      	uxth	r6, r6
 800634a:	6019      	str	r1, [r3, #0]
 800634c:	07d3      	lsls	r3, r2, #31
 800634e:	d502      	bpl.n	8006356 <_printf_i+0x16e>
 8006350:	2320      	movs	r3, #32
 8006352:	4313      	orrs	r3, r2
 8006354:	6023      	str	r3, [r4, #0]
 8006356:	2e00      	cmp	r6, #0
 8006358:	d001      	beq.n	800635e <_printf_i+0x176>
 800635a:	2710      	movs	r7, #16
 800635c:	e7aa      	b.n	80062b4 <_printf_i+0xcc>
 800635e:	2220      	movs	r2, #32
 8006360:	6823      	ldr	r3, [r4, #0]
 8006362:	4393      	bics	r3, r2
 8006364:	6023      	str	r3, [r4, #0]
 8006366:	e7f8      	b.n	800635a <_printf_i+0x172>
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	680d      	ldr	r5, [r1, #0]
 800636c:	1d10      	adds	r0, r2, #4
 800636e:	6949      	ldr	r1, [r1, #20]
 8006370:	6018      	str	r0, [r3, #0]
 8006372:	6813      	ldr	r3, [r2, #0]
 8006374:	062e      	lsls	r6, r5, #24
 8006376:	d501      	bpl.n	800637c <_printf_i+0x194>
 8006378:	6019      	str	r1, [r3, #0]
 800637a:	e002      	b.n	8006382 <_printf_i+0x19a>
 800637c:	066d      	lsls	r5, r5, #25
 800637e:	d5fb      	bpl.n	8006378 <_printf_i+0x190>
 8006380:	8019      	strh	r1, [r3, #0]
 8006382:	2300      	movs	r3, #0
 8006384:	9d03      	ldr	r5, [sp, #12]
 8006386:	6123      	str	r3, [r4, #16]
 8006388:	e7bf      	b.n	800630a <_printf_i+0x122>
 800638a:	681a      	ldr	r2, [r3, #0]
 800638c:	1d11      	adds	r1, r2, #4
 800638e:	6019      	str	r1, [r3, #0]
 8006390:	6815      	ldr	r5, [r2, #0]
 8006392:	2100      	movs	r1, #0
 8006394:	0028      	movs	r0, r5
 8006396:	6862      	ldr	r2, [r4, #4]
 8006398:	f000 f856 	bl	8006448 <memchr>
 800639c:	2800      	cmp	r0, #0
 800639e:	d001      	beq.n	80063a4 <_printf_i+0x1bc>
 80063a0:	1b40      	subs	r0, r0, r5
 80063a2:	6060      	str	r0, [r4, #4]
 80063a4:	6863      	ldr	r3, [r4, #4]
 80063a6:	6123      	str	r3, [r4, #16]
 80063a8:	2300      	movs	r3, #0
 80063aa:	9a03      	ldr	r2, [sp, #12]
 80063ac:	7013      	strb	r3, [r2, #0]
 80063ae:	e7ac      	b.n	800630a <_printf_i+0x122>
 80063b0:	002a      	movs	r2, r5
 80063b2:	6923      	ldr	r3, [r4, #16]
 80063b4:	9906      	ldr	r1, [sp, #24]
 80063b6:	9805      	ldr	r0, [sp, #20]
 80063b8:	9d07      	ldr	r5, [sp, #28]
 80063ba:	47a8      	blx	r5
 80063bc:	3001      	adds	r0, #1
 80063be:	d0ae      	beq.n	800631e <_printf_i+0x136>
 80063c0:	6823      	ldr	r3, [r4, #0]
 80063c2:	079b      	lsls	r3, r3, #30
 80063c4:	d415      	bmi.n	80063f2 <_printf_i+0x20a>
 80063c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063c8:	68e0      	ldr	r0, [r4, #12]
 80063ca:	4298      	cmp	r0, r3
 80063cc:	daa9      	bge.n	8006322 <_printf_i+0x13a>
 80063ce:	0018      	movs	r0, r3
 80063d0:	e7a7      	b.n	8006322 <_printf_i+0x13a>
 80063d2:	0022      	movs	r2, r4
 80063d4:	2301      	movs	r3, #1
 80063d6:	9906      	ldr	r1, [sp, #24]
 80063d8:	9805      	ldr	r0, [sp, #20]
 80063da:	9e07      	ldr	r6, [sp, #28]
 80063dc:	3219      	adds	r2, #25
 80063de:	47b0      	blx	r6
 80063e0:	3001      	adds	r0, #1
 80063e2:	d09c      	beq.n	800631e <_printf_i+0x136>
 80063e4:	3501      	adds	r5, #1
 80063e6:	68e3      	ldr	r3, [r4, #12]
 80063e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80063ea:	1a9b      	subs	r3, r3, r2
 80063ec:	42ab      	cmp	r3, r5
 80063ee:	dcf0      	bgt.n	80063d2 <_printf_i+0x1ea>
 80063f0:	e7e9      	b.n	80063c6 <_printf_i+0x1de>
 80063f2:	2500      	movs	r5, #0
 80063f4:	e7f7      	b.n	80063e6 <_printf_i+0x1fe>
 80063f6:	46c0      	nop			@ (mov r8, r8)
 80063f8:	0800661d 	.word	0x0800661d
 80063fc:	0800662e 	.word	0x0800662e

08006400 <memmove>:
 8006400:	b510      	push	{r4, lr}
 8006402:	4288      	cmp	r0, r1
 8006404:	d902      	bls.n	800640c <memmove+0xc>
 8006406:	188b      	adds	r3, r1, r2
 8006408:	4298      	cmp	r0, r3
 800640a:	d308      	bcc.n	800641e <memmove+0x1e>
 800640c:	2300      	movs	r3, #0
 800640e:	429a      	cmp	r2, r3
 8006410:	d007      	beq.n	8006422 <memmove+0x22>
 8006412:	5ccc      	ldrb	r4, [r1, r3]
 8006414:	54c4      	strb	r4, [r0, r3]
 8006416:	3301      	adds	r3, #1
 8006418:	e7f9      	b.n	800640e <memmove+0xe>
 800641a:	5c8b      	ldrb	r3, [r1, r2]
 800641c:	5483      	strb	r3, [r0, r2]
 800641e:	3a01      	subs	r2, #1
 8006420:	d2fb      	bcs.n	800641a <memmove+0x1a>
 8006422:	bd10      	pop	{r4, pc}

08006424 <_sbrk_r>:
 8006424:	2300      	movs	r3, #0
 8006426:	b570      	push	{r4, r5, r6, lr}
 8006428:	4d06      	ldr	r5, [pc, #24]	@ (8006444 <_sbrk_r+0x20>)
 800642a:	0004      	movs	r4, r0
 800642c:	0008      	movs	r0, r1
 800642e:	602b      	str	r3, [r5, #0]
 8006430:	f7fa fc54 	bl	8000cdc <_sbrk>
 8006434:	1c43      	adds	r3, r0, #1
 8006436:	d103      	bne.n	8006440 <_sbrk_r+0x1c>
 8006438:	682b      	ldr	r3, [r5, #0]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d000      	beq.n	8006440 <_sbrk_r+0x1c>
 800643e:	6023      	str	r3, [r4, #0]
 8006440:	bd70      	pop	{r4, r5, r6, pc}
 8006442:	46c0      	nop			@ (mov r8, r8)
 8006444:	200007f4 	.word	0x200007f4

08006448 <memchr>:
 8006448:	b2c9      	uxtb	r1, r1
 800644a:	1882      	adds	r2, r0, r2
 800644c:	4290      	cmp	r0, r2
 800644e:	d101      	bne.n	8006454 <memchr+0xc>
 8006450:	2000      	movs	r0, #0
 8006452:	4770      	bx	lr
 8006454:	7803      	ldrb	r3, [r0, #0]
 8006456:	428b      	cmp	r3, r1
 8006458:	d0fb      	beq.n	8006452 <memchr+0xa>
 800645a:	3001      	adds	r0, #1
 800645c:	e7f6      	b.n	800644c <memchr+0x4>

0800645e <memcpy>:
 800645e:	2300      	movs	r3, #0
 8006460:	b510      	push	{r4, lr}
 8006462:	429a      	cmp	r2, r3
 8006464:	d100      	bne.n	8006468 <memcpy+0xa>
 8006466:	bd10      	pop	{r4, pc}
 8006468:	5ccc      	ldrb	r4, [r1, r3]
 800646a:	54c4      	strb	r4, [r0, r3]
 800646c:	3301      	adds	r3, #1
 800646e:	e7f8      	b.n	8006462 <memcpy+0x4>

08006470 <_realloc_r>:
 8006470:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006472:	0006      	movs	r6, r0
 8006474:	000c      	movs	r4, r1
 8006476:	0015      	movs	r5, r2
 8006478:	2900      	cmp	r1, #0
 800647a:	d105      	bne.n	8006488 <_realloc_r+0x18>
 800647c:	0011      	movs	r1, r2
 800647e:	f7ff fc55 	bl	8005d2c <_malloc_r>
 8006482:	0004      	movs	r4, r0
 8006484:	0020      	movs	r0, r4
 8006486:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006488:	2a00      	cmp	r2, #0
 800648a:	d103      	bne.n	8006494 <_realloc_r+0x24>
 800648c:	f7ff fbe2 	bl	8005c54 <_free_r>
 8006490:	002c      	movs	r4, r5
 8006492:	e7f7      	b.n	8006484 <_realloc_r+0x14>
 8006494:	f000 f81c 	bl	80064d0 <_malloc_usable_size_r>
 8006498:	0007      	movs	r7, r0
 800649a:	4285      	cmp	r5, r0
 800649c:	d802      	bhi.n	80064a4 <_realloc_r+0x34>
 800649e:	0843      	lsrs	r3, r0, #1
 80064a0:	42ab      	cmp	r3, r5
 80064a2:	d3ef      	bcc.n	8006484 <_realloc_r+0x14>
 80064a4:	0029      	movs	r1, r5
 80064a6:	0030      	movs	r0, r6
 80064a8:	f7ff fc40 	bl	8005d2c <_malloc_r>
 80064ac:	9001      	str	r0, [sp, #4]
 80064ae:	2800      	cmp	r0, #0
 80064b0:	d101      	bne.n	80064b6 <_realloc_r+0x46>
 80064b2:	9c01      	ldr	r4, [sp, #4]
 80064b4:	e7e6      	b.n	8006484 <_realloc_r+0x14>
 80064b6:	002a      	movs	r2, r5
 80064b8:	42bd      	cmp	r5, r7
 80064ba:	d900      	bls.n	80064be <_realloc_r+0x4e>
 80064bc:	003a      	movs	r2, r7
 80064be:	0021      	movs	r1, r4
 80064c0:	9801      	ldr	r0, [sp, #4]
 80064c2:	f7ff ffcc 	bl	800645e <memcpy>
 80064c6:	0021      	movs	r1, r4
 80064c8:	0030      	movs	r0, r6
 80064ca:	f7ff fbc3 	bl	8005c54 <_free_r>
 80064ce:	e7f0      	b.n	80064b2 <_realloc_r+0x42>

080064d0 <_malloc_usable_size_r>:
 80064d0:	1f0b      	subs	r3, r1, #4
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	1f18      	subs	r0, r3, #4
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	da01      	bge.n	80064de <_malloc_usable_size_r+0xe>
 80064da:	580b      	ldr	r3, [r1, r0]
 80064dc:	18c0      	adds	r0, r0, r3
 80064de:	4770      	bx	lr

080064e0 <_init>:
 80064e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064e2:	46c0      	nop			@ (mov r8, r8)
 80064e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064e6:	bc08      	pop	{r3}
 80064e8:	469e      	mov	lr, r3
 80064ea:	4770      	bx	lr

080064ec <_fini>:
 80064ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ee:	46c0      	nop			@ (mov r8, r8)
 80064f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064f2:	bc08      	pop	{r3}
 80064f4:	469e      	mov	lr, r3
 80064f6:	4770      	bx	lr
