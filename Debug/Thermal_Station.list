
Thermal_Station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049bc  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08004a7c  08004a7c  00005a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b0c  08004b0c  0000605c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004b0c  08004b0c  0000605c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004b0c  08004b0c  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b0c  08004b0c  00005b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004b10  08004b10  00005b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004b14  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005c8  2000005c  08004b70  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000624  08004b70  00006624  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000137b0  00000000  00000000  00006084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000347c  00000000  00000000  00019834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001040  00000000  00000000  0001ccb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c8e  00000000  00000000  0001dcf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ad4f  00000000  00000000  0001e97e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018265  00000000  00000000  000396cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092fab  00000000  00000000  00051932  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e48dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d6c  00000000  00000000  000e4920  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  000e868c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004a64 	.word	0x08004a64

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08004a64 	.word	0x08004a64

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	@ 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	@ 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			@ (mov r8, r8)

08000418 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b084      	sub	sp, #16
 800041c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800041e:	1d3b      	adds	r3, r7, #4
 8000420:	0018      	movs	r0, r3
 8000422:	230c      	movs	r3, #12
 8000424:	001a      	movs	r2, r3
 8000426:	2100      	movs	r1, #0
 8000428:	f003 fea2 	bl	8004170 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800042c:	4b39      	ldr	r3, [pc, #228]	@ (8000514 <MX_ADC_Init+0xfc>)
 800042e:	4a3a      	ldr	r2, [pc, #232]	@ (8000518 <MX_ADC_Init+0x100>)
 8000430:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000432:	4b38      	ldr	r3, [pc, #224]	@ (8000514 <MX_ADC_Init+0xfc>)
 8000434:	2200      	movs	r2, #0
 8000436:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000438:	4b36      	ldr	r3, [pc, #216]	@ (8000514 <MX_ADC_Init+0xfc>)
 800043a:	2200      	movs	r2, #0
 800043c:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800043e:	4b35      	ldr	r3, [pc, #212]	@ (8000514 <MX_ADC_Init+0xfc>)
 8000440:	2200      	movs	r2, #0
 8000442:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000444:	4b33      	ldr	r3, [pc, #204]	@ (8000514 <MX_ADC_Init+0xfc>)
 8000446:	2201      	movs	r2, #1
 8000448:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800044a:	4b32      	ldr	r3, [pc, #200]	@ (8000514 <MX_ADC_Init+0xfc>)
 800044c:	2204      	movs	r2, #4
 800044e:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000450:	4b30      	ldr	r3, [pc, #192]	@ (8000514 <MX_ADC_Init+0xfc>)
 8000452:	2200      	movs	r2, #0
 8000454:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000456:	4b2f      	ldr	r3, [pc, #188]	@ (8000514 <MX_ADC_Init+0xfc>)
 8000458:	2200      	movs	r2, #0
 800045a:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 800045c:	4b2d      	ldr	r3, [pc, #180]	@ (8000514 <MX_ADC_Init+0xfc>)
 800045e:	2200      	movs	r2, #0
 8000460:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000462:	4b2c      	ldr	r3, [pc, #176]	@ (8000514 <MX_ADC_Init+0xfc>)
 8000464:	2200      	movs	r2, #0
 8000466:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000468:	4b2a      	ldr	r3, [pc, #168]	@ (8000514 <MX_ADC_Init+0xfc>)
 800046a:	22c2      	movs	r2, #194	@ 0xc2
 800046c:	32ff      	adds	r2, #255	@ 0xff
 800046e:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000470:	4b28      	ldr	r3, [pc, #160]	@ (8000514 <MX_ADC_Init+0xfc>)
 8000472:	2200      	movs	r2, #0
 8000474:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000476:	4b27      	ldr	r3, [pc, #156]	@ (8000514 <MX_ADC_Init+0xfc>)
 8000478:	2224      	movs	r2, #36	@ 0x24
 800047a:	2100      	movs	r1, #0
 800047c:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800047e:	4b25      	ldr	r3, [pc, #148]	@ (8000514 <MX_ADC_Init+0xfc>)
 8000480:	2201      	movs	r2, #1
 8000482:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000484:	4b23      	ldr	r3, [pc, #140]	@ (8000514 <MX_ADC_Init+0xfc>)
 8000486:	0018      	movs	r0, r3
 8000488:	f000 fdb8 	bl	8000ffc <HAL_ADC_Init>
 800048c:	1e03      	subs	r3, r0, #0
 800048e:	d001      	beq.n	8000494 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000490:	f000 fb08 	bl	8000aa4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000494:	1d3b      	adds	r3, r7, #4
 8000496:	2200      	movs	r2, #0
 8000498:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800049a:	1d3b      	adds	r3, r7, #4
 800049c:	2280      	movs	r2, #128	@ 0x80
 800049e:	0152      	lsls	r2, r2, #5
 80004a0:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80004a2:	1d3b      	adds	r3, r7, #4
 80004a4:	2280      	movs	r2, #128	@ 0x80
 80004a6:	0552      	lsls	r2, r2, #21
 80004a8:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80004aa:	1d3a      	adds	r2, r7, #4
 80004ac:	4b19      	ldr	r3, [pc, #100]	@ (8000514 <MX_ADC_Init+0xfc>)
 80004ae:	0011      	movs	r1, r2
 80004b0:	0018      	movs	r0, r3
 80004b2:	f001 f81b 	bl	80014ec <HAL_ADC_ConfigChannel>
 80004b6:	1e03      	subs	r3, r0, #0
 80004b8:	d001      	beq.n	80004be <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80004ba:	f000 faf3 	bl	8000aa4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80004be:	1d3b      	adds	r3, r7, #4
 80004c0:	2201      	movs	r2, #1
 80004c2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80004c4:	1d3a      	adds	r2, r7, #4
 80004c6:	4b13      	ldr	r3, [pc, #76]	@ (8000514 <MX_ADC_Init+0xfc>)
 80004c8:	0011      	movs	r1, r2
 80004ca:	0018      	movs	r0, r3
 80004cc:	f001 f80e 	bl	80014ec <HAL_ADC_ConfigChannel>
 80004d0:	1e03      	subs	r3, r0, #0
 80004d2:	d001      	beq.n	80004d8 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 80004d4:	f000 fae6 	bl	8000aa4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80004d8:	1d3b      	adds	r3, r7, #4
 80004da:	2202      	movs	r2, #2
 80004dc:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80004de:	1d3a      	adds	r2, r7, #4
 80004e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000514 <MX_ADC_Init+0xfc>)
 80004e2:	0011      	movs	r1, r2
 80004e4:	0018      	movs	r0, r3
 80004e6:	f001 f801 	bl	80014ec <HAL_ADC_ConfigChannel>
 80004ea:	1e03      	subs	r3, r0, #0
 80004ec:	d001      	beq.n	80004f2 <MX_ADC_Init+0xda>
  {
    Error_Handler();
 80004ee:	f000 fad9 	bl	8000aa4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80004f2:	1d3b      	adds	r3, r7, #4
 80004f4:	2210      	movs	r2, #16
 80004f6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80004f8:	1d3a      	adds	r2, r7, #4
 80004fa:	4b06      	ldr	r3, [pc, #24]	@ (8000514 <MX_ADC_Init+0xfc>)
 80004fc:	0011      	movs	r1, r2
 80004fe:	0018      	movs	r0, r3
 8000500:	f000 fff4 	bl	80014ec <HAL_ADC_ConfigChannel>
 8000504:	1e03      	subs	r3, r0, #0
 8000506:	d001      	beq.n	800050c <MX_ADC_Init+0xf4>
  {
    Error_Handler();
 8000508:	f000 facc 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800050c:	46c0      	nop			@ (mov r8, r8)
 800050e:	46bd      	mov	sp, r7
 8000510:	b004      	add	sp, #16
 8000512:	bd80      	pop	{r7, pc}
 8000514:	20000078 	.word	0x20000078
 8000518:	40012400 	.word	0x40012400

0800051c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800051c:	b590      	push	{r4, r7, lr}
 800051e:	b08b      	sub	sp, #44	@ 0x2c
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000524:	2414      	movs	r4, #20
 8000526:	193b      	adds	r3, r7, r4
 8000528:	0018      	movs	r0, r3
 800052a:	2314      	movs	r3, #20
 800052c:	001a      	movs	r2, r3
 800052e:	2100      	movs	r1, #0
 8000530:	f003 fe1e 	bl	8004170 <memset>
  if(adcHandle->Instance==ADC1)
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a19      	ldr	r2, [pc, #100]	@ (80005a0 <HAL_ADC_MspInit+0x84>)
 800053a:	4293      	cmp	r3, r2
 800053c:	d12b      	bne.n	8000596 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800053e:	4b19      	ldr	r3, [pc, #100]	@ (80005a4 <HAL_ADC_MspInit+0x88>)
 8000540:	699a      	ldr	r2, [r3, #24]
 8000542:	4b18      	ldr	r3, [pc, #96]	@ (80005a4 <HAL_ADC_MspInit+0x88>)
 8000544:	2180      	movs	r1, #128	@ 0x80
 8000546:	0089      	lsls	r1, r1, #2
 8000548:	430a      	orrs	r2, r1
 800054a:	619a      	str	r2, [r3, #24]
 800054c:	4b15      	ldr	r3, [pc, #84]	@ (80005a4 <HAL_ADC_MspInit+0x88>)
 800054e:	699a      	ldr	r2, [r3, #24]
 8000550:	2380      	movs	r3, #128	@ 0x80
 8000552:	009b      	lsls	r3, r3, #2
 8000554:	4013      	ands	r3, r2
 8000556:	613b      	str	r3, [r7, #16]
 8000558:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800055a:	4b12      	ldr	r3, [pc, #72]	@ (80005a4 <HAL_ADC_MspInit+0x88>)
 800055c:	695a      	ldr	r2, [r3, #20]
 800055e:	4b11      	ldr	r3, [pc, #68]	@ (80005a4 <HAL_ADC_MspInit+0x88>)
 8000560:	2180      	movs	r1, #128	@ 0x80
 8000562:	0289      	lsls	r1, r1, #10
 8000564:	430a      	orrs	r2, r1
 8000566:	615a      	str	r2, [r3, #20]
 8000568:	4b0e      	ldr	r3, [pc, #56]	@ (80005a4 <HAL_ADC_MspInit+0x88>)
 800056a:	695a      	ldr	r2, [r3, #20]
 800056c:	2380      	movs	r3, #128	@ 0x80
 800056e:	029b      	lsls	r3, r3, #10
 8000570:	4013      	ands	r3, r2
 8000572:	60fb      	str	r3, [r7, #12]
 8000574:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000576:	193b      	adds	r3, r7, r4
 8000578:	2207      	movs	r2, #7
 800057a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800057c:	193b      	adds	r3, r7, r4
 800057e:	2203      	movs	r2, #3
 8000580:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000582:	193b      	adds	r3, r7, r4
 8000584:	2200      	movs	r2, #0
 8000586:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000588:	193a      	adds	r2, r7, r4
 800058a:	2390      	movs	r3, #144	@ 0x90
 800058c:	05db      	lsls	r3, r3, #23
 800058e:	0011      	movs	r1, r2
 8000590:	0018      	movs	r0, r3
 8000592:	f001 fb57 	bl	8001c44 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000596:	46c0      	nop			@ (mov r8, r8)
 8000598:	46bd      	mov	sp, r7
 800059a:	b00b      	add	sp, #44	@ 0x2c
 800059c:	bd90      	pop	{r4, r7, pc}
 800059e:	46c0      	nop			@ (mov r8, r8)
 80005a0:	40012400 	.word	0x40012400
 80005a4:	40021000 	.word	0x40021000

080005a8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80005a8:	b590      	push	{r4, r7, lr}
 80005aa:	b089      	sub	sp, #36	@ 0x24
 80005ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ae:	240c      	movs	r4, #12
 80005b0:	193b      	adds	r3, r7, r4
 80005b2:	0018      	movs	r0, r3
 80005b4:	2314      	movs	r3, #20
 80005b6:	001a      	movs	r2, r3
 80005b8:	2100      	movs	r1, #0
 80005ba:	f003 fdd9 	bl	8004170 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005be:	4b38      	ldr	r3, [pc, #224]	@ (80006a0 <MX_GPIO_Init+0xf8>)
 80005c0:	695a      	ldr	r2, [r3, #20]
 80005c2:	4b37      	ldr	r3, [pc, #220]	@ (80006a0 <MX_GPIO_Init+0xf8>)
 80005c4:	2180      	movs	r1, #128	@ 0x80
 80005c6:	03c9      	lsls	r1, r1, #15
 80005c8:	430a      	orrs	r2, r1
 80005ca:	615a      	str	r2, [r3, #20]
 80005cc:	4b34      	ldr	r3, [pc, #208]	@ (80006a0 <MX_GPIO_Init+0xf8>)
 80005ce:	695a      	ldr	r2, [r3, #20]
 80005d0:	2380      	movs	r3, #128	@ 0x80
 80005d2:	03db      	lsls	r3, r3, #15
 80005d4:	4013      	ands	r3, r2
 80005d6:	60bb      	str	r3, [r7, #8]
 80005d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005da:	4b31      	ldr	r3, [pc, #196]	@ (80006a0 <MX_GPIO_Init+0xf8>)
 80005dc:	695a      	ldr	r2, [r3, #20]
 80005de:	4b30      	ldr	r3, [pc, #192]	@ (80006a0 <MX_GPIO_Init+0xf8>)
 80005e0:	2180      	movs	r1, #128	@ 0x80
 80005e2:	0289      	lsls	r1, r1, #10
 80005e4:	430a      	orrs	r2, r1
 80005e6:	615a      	str	r2, [r3, #20]
 80005e8:	4b2d      	ldr	r3, [pc, #180]	@ (80006a0 <MX_GPIO_Init+0xf8>)
 80005ea:	695a      	ldr	r2, [r3, #20]
 80005ec:	2380      	movs	r3, #128	@ 0x80
 80005ee:	029b      	lsls	r3, r3, #10
 80005f0:	4013      	ands	r3, r2
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f6:	4b2a      	ldr	r3, [pc, #168]	@ (80006a0 <MX_GPIO_Init+0xf8>)
 80005f8:	695a      	ldr	r2, [r3, #20]
 80005fa:	4b29      	ldr	r3, [pc, #164]	@ (80006a0 <MX_GPIO_Init+0xf8>)
 80005fc:	2180      	movs	r1, #128	@ 0x80
 80005fe:	02c9      	lsls	r1, r1, #11
 8000600:	430a      	orrs	r2, r1
 8000602:	615a      	str	r2, [r3, #20]
 8000604:	4b26      	ldr	r3, [pc, #152]	@ (80006a0 <MX_GPIO_Init+0xf8>)
 8000606:	695a      	ldr	r2, [r3, #20]
 8000608:	2380      	movs	r3, #128	@ 0x80
 800060a:	02db      	lsls	r3, r3, #11
 800060c:	4013      	ands	r3, r2
 800060e:	603b      	str	r3, [r7, #0]
 8000610:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_NSS_Pin|GPIO2_Pin|GPIO3_Pin, GPIO_PIN_RESET);
 8000612:	4924      	ldr	r1, [pc, #144]	@ (80006a4 <MX_GPIO_Init+0xfc>)
 8000614:	2390      	movs	r3, #144	@ 0x90
 8000616:	05db      	lsls	r3, r3, #23
 8000618:	2200      	movs	r2, #0
 800061a:	0018      	movs	r0, r3
 800061c:	f001 fc7a 	bl	8001f14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO0_Pin|GPIO1_Pin|LED_G_Pin|LED_Y_Pin
 8000620:	4b21      	ldr	r3, [pc, #132]	@ (80006a8 <MX_GPIO_Init+0x100>)
 8000622:	2200      	movs	r2, #0
 8000624:	21e3      	movs	r1, #227	@ 0xe3
 8000626:	0018      	movs	r0, r3
 8000628:	f001 fc74 	bl	8001f14 <HAL_GPIO_WritePin>
                          |LED_R_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SPI1_NSS_Pin GPIO2_Pin GPIO3_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_Pin|GPIO2_Pin|GPIO3_Pin;
 800062c:	193b      	adds	r3, r7, r4
 800062e:	4a1d      	ldr	r2, [pc, #116]	@ (80006a4 <MX_GPIO_Init+0xfc>)
 8000630:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000632:	193b      	adds	r3, r7, r4
 8000634:	2201      	movs	r2, #1
 8000636:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000638:	193b      	adds	r3, r7, r4
 800063a:	2200      	movs	r2, #0
 800063c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063e:	193b      	adds	r3, r7, r4
 8000640:	2200      	movs	r2, #0
 8000642:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000644:	193a      	adds	r2, r7, r4
 8000646:	2390      	movs	r3, #144	@ 0x90
 8000648:	05db      	lsls	r3, r3, #23
 800064a:	0011      	movs	r1, r2
 800064c:	0018      	movs	r0, r3
 800064e:	f001 faf9 	bl	8001c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO0_Pin GPIO1_Pin LED_G_Pin LED_Y_Pin
                           LED_R_Pin */
  GPIO_InitStruct.Pin = GPIO0_Pin|GPIO1_Pin|LED_G_Pin|LED_Y_Pin
 8000652:	193b      	adds	r3, r7, r4
 8000654:	22e3      	movs	r2, #227	@ 0xe3
 8000656:	601a      	str	r2, [r3, #0]
                          |LED_R_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000658:	193b      	adds	r3, r7, r4
 800065a:	2201      	movs	r2, #1
 800065c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065e:	193b      	adds	r3, r7, r4
 8000660:	2200      	movs	r2, #0
 8000662:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000664:	193b      	adds	r3, r7, r4
 8000666:	2200      	movs	r2, #0
 8000668:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800066a:	193b      	adds	r3, r7, r4
 800066c:	4a0e      	ldr	r2, [pc, #56]	@ (80006a8 <MX_GPIO_Init+0x100>)
 800066e:	0019      	movs	r1, r3
 8000670:	0010      	movs	r0, r2
 8000672:	f001 fae7 	bl	8001c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PWM__SIN_Pin BUTTON_Pin */
  GPIO_InitStruct.Pin = PWM__SIN_Pin|BUTTON_Pin;
 8000676:	0021      	movs	r1, r4
 8000678:	187b      	adds	r3, r7, r1
 800067a:	2218      	movs	r2, #24
 800067c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800067e:	187b      	adds	r3, r7, r1
 8000680:	2200      	movs	r2, #0
 8000682:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000684:	187b      	adds	r3, r7, r1
 8000686:	2200      	movs	r2, #0
 8000688:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800068a:	187b      	adds	r3, r7, r1
 800068c:	4a06      	ldr	r2, [pc, #24]	@ (80006a8 <MX_GPIO_Init+0x100>)
 800068e:	0019      	movs	r1, r3
 8000690:	0010      	movs	r0, r2
 8000692:	f001 fad7 	bl	8001c44 <HAL_GPIO_Init>

}
 8000696:	46c0      	nop			@ (mov r8, r8)
 8000698:	46bd      	mov	sp, r7
 800069a:	b009      	add	sp, #36	@ 0x24
 800069c:	bd90      	pop	{r4, r7, pc}
 800069e:	46c0      	nop			@ (mov r8, r8)
 80006a0:	40021000 	.word	0x40021000
 80006a4:	00008110 	.word	0x00008110
 80006a8:	48000400 	.word	0x48000400

080006ac <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006b0:	4b1b      	ldr	r3, [pc, #108]	@ (8000720 <MX_I2C1_Init+0x74>)
 80006b2:	4a1c      	ldr	r2, [pc, #112]	@ (8000724 <MX_I2C1_Init+0x78>)
 80006b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 80006b6:	4b1a      	ldr	r3, [pc, #104]	@ (8000720 <MX_I2C1_Init+0x74>)
 80006b8:	4a1b      	ldr	r2, [pc, #108]	@ (8000728 <MX_I2C1_Init+0x7c>)
 80006ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006bc:	4b18      	ldr	r3, [pc, #96]	@ (8000720 <MX_I2C1_Init+0x74>)
 80006be:	2200      	movs	r2, #0
 80006c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006c2:	4b17      	ldr	r3, [pc, #92]	@ (8000720 <MX_I2C1_Init+0x74>)
 80006c4:	2201      	movs	r2, #1
 80006c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006c8:	4b15      	ldr	r3, [pc, #84]	@ (8000720 <MX_I2C1_Init+0x74>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006ce:	4b14      	ldr	r3, [pc, #80]	@ (8000720 <MX_I2C1_Init+0x74>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006d4:	4b12      	ldr	r3, [pc, #72]	@ (8000720 <MX_I2C1_Init+0x74>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006da:	4b11      	ldr	r3, [pc, #68]	@ (8000720 <MX_I2C1_Init+0x74>)
 80006dc:	2200      	movs	r2, #0
 80006de:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000720 <MX_I2C1_Init+0x74>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000720 <MX_I2C1_Init+0x74>)
 80006e8:	0018      	movs	r0, r3
 80006ea:	f001 fc4b 	bl	8001f84 <HAL_I2C_Init>
 80006ee:	1e03      	subs	r3, r0, #0
 80006f0:	d001      	beq.n	80006f6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006f2:	f000 f9d7 	bl	8000aa4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000720 <MX_I2C1_Init+0x74>)
 80006f8:	2100      	movs	r1, #0
 80006fa:	0018      	movs	r0, r3
 80006fc:	f001 fce8 	bl	80020d0 <HAL_I2CEx_ConfigAnalogFilter>
 8000700:	1e03      	subs	r3, r0, #0
 8000702:	d001      	beq.n	8000708 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000704:	f000 f9ce 	bl	8000aa4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000708:	4b05      	ldr	r3, [pc, #20]	@ (8000720 <MX_I2C1_Init+0x74>)
 800070a:	2100      	movs	r1, #0
 800070c:	0018      	movs	r0, r3
 800070e:	f001 fd2b 	bl	8002168 <HAL_I2CEx_ConfigDigitalFilter>
 8000712:	1e03      	subs	r3, r0, #0
 8000714:	d001      	beq.n	800071a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000716:	f000 f9c5 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800071a:	46c0      	nop			@ (mov r8, r8)
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	200000b8 	.word	0x200000b8
 8000724:	40005400 	.word	0x40005400
 8000728:	00201d2b 	.word	0x00201d2b

0800072c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800072c:	b590      	push	{r4, r7, lr}
 800072e:	b08b      	sub	sp, #44	@ 0x2c
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000734:	2414      	movs	r4, #20
 8000736:	193b      	adds	r3, r7, r4
 8000738:	0018      	movs	r0, r3
 800073a:	2314      	movs	r3, #20
 800073c:	001a      	movs	r2, r3
 800073e:	2100      	movs	r1, #0
 8000740:	f003 fd16 	bl	8004170 <memset>
  if(i2cHandle->Instance==I2C1)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a1c      	ldr	r2, [pc, #112]	@ (80007bc <HAL_I2C_MspInit+0x90>)
 800074a:	4293      	cmp	r3, r2
 800074c:	d131      	bne.n	80007b2 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800074e:	4b1c      	ldr	r3, [pc, #112]	@ (80007c0 <HAL_I2C_MspInit+0x94>)
 8000750:	695a      	ldr	r2, [r3, #20]
 8000752:	4b1b      	ldr	r3, [pc, #108]	@ (80007c0 <HAL_I2C_MspInit+0x94>)
 8000754:	2180      	movs	r1, #128	@ 0x80
 8000756:	03c9      	lsls	r1, r1, #15
 8000758:	430a      	orrs	r2, r1
 800075a:	615a      	str	r2, [r3, #20]
 800075c:	4b18      	ldr	r3, [pc, #96]	@ (80007c0 <HAL_I2C_MspInit+0x94>)
 800075e:	695a      	ldr	r2, [r3, #20]
 8000760:	2380      	movs	r3, #128	@ 0x80
 8000762:	03db      	lsls	r3, r3, #15
 8000764:	4013      	ands	r3, r2
 8000766:	613b      	str	r3, [r7, #16]
 8000768:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PF0-OSC_IN     ------> I2C1_SDA
    PF1-OSC_OUT     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800076a:	0021      	movs	r1, r4
 800076c:	187b      	adds	r3, r7, r1
 800076e:	2203      	movs	r2, #3
 8000770:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000772:	187b      	adds	r3, r7, r1
 8000774:	2212      	movs	r2, #18
 8000776:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	187b      	adds	r3, r7, r1
 800077a:	2200      	movs	r2, #0
 800077c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800077e:	187b      	adds	r3, r7, r1
 8000780:	2203      	movs	r2, #3
 8000782:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000784:	187b      	adds	r3, r7, r1
 8000786:	2201      	movs	r2, #1
 8000788:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800078a:	187b      	adds	r3, r7, r1
 800078c:	4a0d      	ldr	r2, [pc, #52]	@ (80007c4 <HAL_I2C_MspInit+0x98>)
 800078e:	0019      	movs	r1, r3
 8000790:	0010      	movs	r0, r2
 8000792:	f001 fa57 	bl	8001c44 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000796:	4b0a      	ldr	r3, [pc, #40]	@ (80007c0 <HAL_I2C_MspInit+0x94>)
 8000798:	69da      	ldr	r2, [r3, #28]
 800079a:	4b09      	ldr	r3, [pc, #36]	@ (80007c0 <HAL_I2C_MspInit+0x94>)
 800079c:	2180      	movs	r1, #128	@ 0x80
 800079e:	0389      	lsls	r1, r1, #14
 80007a0:	430a      	orrs	r2, r1
 80007a2:	61da      	str	r2, [r3, #28]
 80007a4:	4b06      	ldr	r3, [pc, #24]	@ (80007c0 <HAL_I2C_MspInit+0x94>)
 80007a6:	69da      	ldr	r2, [r3, #28]
 80007a8:	2380      	movs	r3, #128	@ 0x80
 80007aa:	039b      	lsls	r3, r3, #14
 80007ac:	4013      	ands	r3, r2
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007b2:	46c0      	nop			@ (mov r8, r8)
 80007b4:	46bd      	mov	sp, r7
 80007b6:	b00b      	add	sp, #44	@ 0x2c
 80007b8:	bd90      	pop	{r4, r7, pc}
 80007ba:	46c0      	nop			@ (mov r8, r8)
 80007bc:	40005400 	.word	0x40005400
 80007c0:	40021000 	.word	0x40021000
 80007c4:	48001400 	.word	0x48001400

080007c8 <ADC_ReadRaw>:
#define TS_CAL1_ADDR  (0x1FFFF7B8)   // 30 °C, Vdda = 3.30 V
#define TS_CAL2_ADDR  (0x1FFFF7C2)   // 110 °C, Vdda = 3.30 V
#define VREFINT_ADDR  (0x1FFFF7BA)   // VREFINT_CAL (≈ 1.21 V)

static uint16_t ADC_ReadRaw(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
    HAL_ADC_Start(&hadc);
 80007ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000808 <ADC_ReadRaw+0x40>)
 80007d0:	0018      	movs	r0, r3
 80007d2:	f000 fd53 	bl	800127c <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80007d6:	2301      	movs	r3, #1
 80007d8:	425a      	negs	r2, r3
 80007da:	4b0b      	ldr	r3, [pc, #44]	@ (8000808 <ADC_ReadRaw+0x40>)
 80007dc:	0011      	movs	r1, r2
 80007de:	0018      	movs	r0, r3
 80007e0:	f000 fde0 	bl	80013a4 <HAL_ADC_PollForConversion>
    uint16_t raw = HAL_ADC_GetValue(&hadc);
 80007e4:	4b08      	ldr	r3, [pc, #32]	@ (8000808 <ADC_ReadRaw+0x40>)
 80007e6:	0018      	movs	r0, r3
 80007e8:	f000 fe74 	bl	80014d4 <HAL_ADC_GetValue>
 80007ec:	0002      	movs	r2, r0
 80007ee:	1dbb      	adds	r3, r7, #6
 80007f0:	801a      	strh	r2, [r3, #0]
    HAL_ADC_Stop(&hadc);
 80007f2:	4b05      	ldr	r3, [pc, #20]	@ (8000808 <ADC_ReadRaw+0x40>)
 80007f4:	0018      	movs	r0, r3
 80007f6:	f000 fd95 	bl	8001324 <HAL_ADC_Stop>
    return raw;
 80007fa:	1dbb      	adds	r3, r7, #6
 80007fc:	881b      	ldrh	r3, [r3, #0]
}
 80007fe:	0018      	movs	r0, r3
 8000800:	46bd      	mov	sp, r7
 8000802:	b002      	add	sp, #8
 8000804:	bd80      	pop	{r7, pc}
 8000806:	46c0      	nop			@ (mov r8, r8)
 8000808:	20000078 	.word	0x20000078

0800080c <GetVDDA_mV>:

static inline uint32_t GetVDDA_mV(void)
/* Restituisce VDDA in millivolt usando VREFINT (canale 17) */
{
 800080c:	b5b0      	push	{r4, r5, r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0
    const uint16_t vrefint_cal = *(__IO uint16_t*)VREFINT_ADDR;
 8000812:	4a13      	ldr	r2, [pc, #76]	@ (8000860 <GetVDDA_mV+0x54>)
 8000814:	250e      	movs	r5, #14
 8000816:	197b      	adds	r3, r7, r5
 8000818:	8812      	ldrh	r2, [r2, #0]
 800081a:	801a      	strh	r2, [r3, #0]

    /* converto canale 17 ---------------------------------------------------------------- */
    uint32_t saved = hadc.Instance->CHSELR;
 800081c:	4b11      	ldr	r3, [pc, #68]	@ (8000864 <GetVDDA_mV+0x58>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000822:	60bb      	str	r3, [r7, #8]
    hadc.Instance->CHSELR = ADC_CHSELR_CHSEL17;
 8000824:	4b0f      	ldr	r3, [pc, #60]	@ (8000864 <GetVDDA_mV+0x58>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	2280      	movs	r2, #128	@ 0x80
 800082a:	0292      	lsls	r2, r2, #10
 800082c:	629a      	str	r2, [r3, #40]	@ 0x28
    uint16_t vref_raw = ADC_ReadRaw();
 800082e:	1dbc      	adds	r4, r7, #6
 8000830:	f7ff ffca 	bl	80007c8 <ADC_ReadRaw>
 8000834:	0003      	movs	r3, r0
 8000836:	8023      	strh	r3, [r4, #0]
    hadc.Instance->CHSELR = saved;
 8000838:	4b0a      	ldr	r3, [pc, #40]	@ (8000864 <GetVDDA_mV+0x58>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	68ba      	ldr	r2, [r7, #8]
 800083e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* VDDA [mV] = 3300 * VREFINT_CAL / VREF_RAW ----------------------------------------- */
    return (3300UL * vrefint_cal) / vref_raw;        // tutto uint32_t
 8000840:	197b      	adds	r3, r7, r5
 8000842:	881b      	ldrh	r3, [r3, #0]
 8000844:	4a08      	ldr	r2, [pc, #32]	@ (8000868 <GetVDDA_mV+0x5c>)
 8000846:	435a      	muls	r2, r3
 8000848:	1dbb      	adds	r3, r7, #6
 800084a:	881b      	ldrh	r3, [r3, #0]
 800084c:	0019      	movs	r1, r3
 800084e:	0010      	movs	r0, r2
 8000850:	f7ff fc6c 	bl	800012c <__udivsi3>
 8000854:	0003      	movs	r3, r0
}
 8000856:	0018      	movs	r0, r3
 8000858:	46bd      	mov	sp, r7
 800085a:	b004      	add	sp, #16
 800085c:	bdb0      	pop	{r4, r5, r7, pc}
 800085e:	46c0      	nop			@ (mov r8, r8)
 8000860:	1ffff7ba 	.word	0x1ffff7ba
 8000864:	20000078 	.word	0x20000078
 8000868:	00000ce4 	.word	0x00000ce4

0800086c <GetTemperature_cC>:

int32_t GetTemperature_cC(void)
/* Ritorna temperatura in centigradi × 100 (es. 2512 = 25.12 °C) */
{
 800086c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800086e:	b089      	sub	sp, #36	@ 0x24
 8000870:	af00      	add	r7, sp, #0
    /* 1) lettura sensore ---------------------------------------------------------------- */
    uint32_t saved = hadc.Instance->CHSELR;
 8000872:	4b25      	ldr	r3, [pc, #148]	@ (8000908 <GetTemperature_cC+0x9c>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000878:	61fb      	str	r3, [r7, #28]
    hadc.Instance->CHSELR = ADC_CHSELR_CHSEL16;         // canale 16 = TS
 800087a:	4b23      	ldr	r3, [pc, #140]	@ (8000908 <GetTemperature_cC+0x9c>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	2280      	movs	r2, #128	@ 0x80
 8000880:	0252      	lsls	r2, r2, #9
 8000882:	629a      	str	r2, [r3, #40]	@ 0x28
    uint16_t ts_raw = ADC_ReadRaw();
 8000884:	251a      	movs	r5, #26
 8000886:	197c      	adds	r4, r7, r5
 8000888:	f7ff ff9e 	bl	80007c8 <ADC_ReadRaw>
 800088c:	0003      	movs	r3, r0
 800088e:	8023      	strh	r3, [r4, #0]
    hadc.Instance->CHSELR = saved;
 8000890:	4b1d      	ldr	r3, [pc, #116]	@ (8000908 <GetTemperature_cC+0x9c>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	69fa      	ldr	r2, [r7, #28]
 8000896:	629a      	str	r2, [r3, #40]	@ 0x28

    /* 2) costanti di fabbrica ------------------------------------------------------------ */
    const uint16_t TS_CAL1 = *(__IO uint16_t*)TS_CAL1_ADDR;   // 30 °C
 8000898:	4a1c      	ldr	r2, [pc, #112]	@ (800090c <GetTemperature_cC+0xa0>)
 800089a:	2418      	movs	r4, #24
 800089c:	193b      	adds	r3, r7, r4
 800089e:	8812      	ldrh	r2, [r2, #0]
 80008a0:	801a      	strh	r2, [r3, #0]
    const uint16_t TS_CAL2 = *(__IO uint16_t*)TS_CAL2_ADDR;   // 110 °C
 80008a2:	4a1b      	ldr	r2, [pc, #108]	@ (8000910 <GetTemperature_cC+0xa4>)
 80008a4:	2616      	movs	r6, #22
 80008a6:	19bb      	adds	r3, r7, r6
 80008a8:	8812      	ldrh	r2, [r2, #0]
 80008aa:	801a      	strh	r2, [r3, #0]

    /* 3) VDDA in mV e compensazione ------------------------------------------------------ */
    uint32_t vdda = GetVDDA_mV();           // es. 3350 mV
 80008ac:	f7ff ffae 	bl	800080c <GetVDDA_mV>
 80008b0:	0003      	movs	r3, r0
 80008b2:	613b      	str	r3, [r7, #16]
    uint32_t ts_corr = (uint32_t)ts_raw * vdda / 3300U;
 80008b4:	197b      	adds	r3, r7, r5
 80008b6:	881b      	ldrh	r3, [r3, #0]
 80008b8:	693a      	ldr	r2, [r7, #16]
 80008ba:	4353      	muls	r3, r2
 80008bc:	4915      	ldr	r1, [pc, #84]	@ (8000914 <GetTemperature_cC+0xa8>)
 80008be:	0018      	movs	r0, r3
 80008c0:	f7ff fc34 	bl	800012c <__udivsi3>
 80008c4:	0003      	movs	r3, r0
 80008c6:	60fb      	str	r3, [r7, #12]

    /* 4) temperatura = 30 °C + (VSENSE-VS30) * ΔT / (VS110-VS30) ------------------------- *
     * espressa in centigradi × 100 per evitare float                                      */
    int32_t numerator   = (int32_t)(ts_corr - TS_CAL1) * 80 * 100;    // (110-30)=80
 80008c8:	193b      	adds	r3, r7, r4
 80008ca:	881b      	ldrh	r3, [r3, #0]
 80008cc:	68fa      	ldr	r2, [r7, #12]
 80008ce:	1ad3      	subs	r3, r2, r3
 80008d0:	001a      	movs	r2, r3
 80008d2:	0013      	movs	r3, r2
 80008d4:	015b      	lsls	r3, r3, #5
 80008d6:	1a9b      	subs	r3, r3, r2
 80008d8:	009b      	lsls	r3, r3, #2
 80008da:	189b      	adds	r3, r3, r2
 80008dc:	019b      	lsls	r3, r3, #6
 80008de:	60bb      	str	r3, [r7, #8]
    int32_t denominator = (int32_t)(TS_CAL2 - TS_CAL1);
 80008e0:	19bb      	adds	r3, r7, r6
 80008e2:	881a      	ldrh	r2, [r3, #0]
 80008e4:	193b      	adds	r3, r7, r4
 80008e6:	881b      	ldrh	r3, [r3, #0]
 80008e8:	1ad3      	subs	r3, r2, r3
 80008ea:	607b      	str	r3, [r7, #4]
    int32_t temp_cC     = 3000 + numerator / denominator;            // +30.00 °C
 80008ec:	6879      	ldr	r1, [r7, #4]
 80008ee:	68b8      	ldr	r0, [r7, #8]
 80008f0:	f7ff fca6 	bl	8000240 <__divsi3>
 80008f4:	0003      	movs	r3, r0
 80008f6:	4a08      	ldr	r2, [pc, #32]	@ (8000918 <GetTemperature_cC+0xac>)
 80008f8:	4694      	mov	ip, r2
 80008fa:	4463      	add	r3, ip
 80008fc:	603b      	str	r3, [r7, #0]

    return temp_cC;           // es. 2534 ⇒ 25.34 °C
 80008fe:	683b      	ldr	r3, [r7, #0]
}
 8000900:	0018      	movs	r0, r3
 8000902:	46bd      	mov	sp, r7
 8000904:	b009      	add	sp, #36	@ 0x24
 8000906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000908:	20000078 	.word	0x20000078
 800090c:	1ffff7b8 	.word	0x1ffff7b8
 8000910:	1ffff7c2 	.word	0x1ffff7c2
 8000914:	00000ce4 	.word	0x00000ce4
 8000918:	00000bb8 	.word	0x00000bb8

0800091c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800091c:	b590      	push	{r4, r7, lr}
 800091e:	b08f      	sub	sp, #60	@ 0x3c
 8000920:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000922:	f000 fae3 	bl	8000eec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000926:	f000 f849 	bl	80009bc <SystemClock_Config>
  //uint16_t t_sens_adc;
  //uint16_t t_x_adc;
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800092a:	f7ff fe3d 	bl	80005a8 <MX_GPIO_Init>
  MX_ADC_Init();
 800092e:	f7ff fd73 	bl	8000418 <MX_ADC_Init>
  MX_I2C1_Init();
 8000932:	f7ff febb 	bl	80006ac <MX_I2C1_Init>
  MX_SPI1_Init();
 8000936:	f000 f8bb 	bl	8000ab0 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800093a:	f000 f9c9 	bl	8000cd0 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 800093e:	f000 fa4d 	bl	8000ddc <MX_USB_PCD_Init>
  /* USER CODE BEGIN WHILE */

  //HAL_ADC_Start(&hadc);
  //t_x_adc = HAL_ADC_GetValue(&hadc);
  //HAL_ADC_Stop(&hadc);
  HAL_UART_Transmit(&huart1, (uint8_t*)"UART status OK", sizeof("UART status OK") , 1000);
 8000942:	23fa      	movs	r3, #250	@ 0xfa
 8000944:	009b      	lsls	r3, r3, #2
 8000946:	4919      	ldr	r1, [pc, #100]	@ (80009ac <main+0x90>)
 8000948:	4819      	ldr	r0, [pc, #100]	@ (80009b0 <main+0x94>)
 800094a:	220f      	movs	r2, #15
 800094c:	f002 fc62 	bl	8003214 <HAL_UART_Transmit>
	  //x = 20.3;
	  //uint16_t temp_c = 20;//((uint32_t)adc * 340u + 2048u) >> 12;
		  */
	  //printf("T = %.2f °C\r\n", t);   // con retarget di printf su UART

	  int32_t t = GetTemperature_cC();
 8000950:	f7ff ff8c 	bl	800086c <GetTemperature_cC>
 8000954:	0003      	movs	r3, r0
 8000956:	637b      	str	r3, [r7, #52]	@ 0x34
	  sprintf((char*)str, "T = %ld.%02ld °C\r\n", t/100, t%100);
 8000958:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800095a:	2164      	movs	r1, #100	@ 0x64
 800095c:	0018      	movs	r0, r3
 800095e:	f7ff fc6f 	bl	8000240 <__divsi3>
 8000962:	0003      	movs	r3, r0
 8000964:	001c      	movs	r4, r3
 8000966:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000968:	2164      	movs	r1, #100	@ 0x64
 800096a:	0018      	movs	r0, r3
 800096c:	f7ff fd4e 	bl	800040c <__aeabi_idivmod>
 8000970:	000b      	movs	r3, r1
 8000972:	4910      	ldr	r1, [pc, #64]	@ (80009b4 <main+0x98>)
 8000974:	0038      	movs	r0, r7
 8000976:	0022      	movs	r2, r4
 8000978:	f003 fbd8 	bl	800412c <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*)&str, strlen((char*)str), 1000);
 800097c:	003b      	movs	r3, r7
 800097e:	0018      	movs	r0, r3
 8000980:	f7ff fbc2 	bl	8000108 <strlen>
 8000984:	0003      	movs	r3, r0
 8000986:	b29a      	uxth	r2, r3
 8000988:	23fa      	movs	r3, #250	@ 0xfa
 800098a:	009b      	lsls	r3, r3, #2
 800098c:	0039      	movs	r1, r7
 800098e:	4808      	ldr	r0, [pc, #32]	@ (80009b0 <main+0x94>)
 8000990:	f002 fc40 	bl	8003214 <HAL_UART_Transmit>
	  HAL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
 8000994:	4b08      	ldr	r3, [pc, #32]	@ (80009b8 <main+0x9c>)
 8000996:	2120      	movs	r1, #32
 8000998:	0018      	movs	r0, r3
 800099a:	f001 fad8 	bl	8001f4e <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 800099e:	23fa      	movs	r3, #250	@ 0xfa
 80009a0:	005b      	lsls	r3, r3, #1
 80009a2:	0018      	movs	r0, r3
 80009a4:	f000 fb06 	bl	8000fb4 <HAL_Delay>
  {
 80009a8:	46c0      	nop			@ (mov r8, r8)
 80009aa:	e7d1      	b.n	8000950 <main+0x34>
 80009ac:	08004a7c 	.word	0x08004a7c
 80009b0:	20000174 	.word	0x20000174
 80009b4:	08004a8c 	.word	0x08004a8c
 80009b8:	48000400 	.word	0x48000400

080009bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009bc:	b590      	push	{r4, r7, lr}
 80009be:	b099      	sub	sp, #100	@ 0x64
 80009c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009c2:	242c      	movs	r4, #44	@ 0x2c
 80009c4:	193b      	adds	r3, r7, r4
 80009c6:	0018      	movs	r0, r3
 80009c8:	2334      	movs	r3, #52	@ 0x34
 80009ca:	001a      	movs	r2, r3
 80009cc:	2100      	movs	r1, #0
 80009ce:	f003 fbcf 	bl	8004170 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d2:	231c      	movs	r3, #28
 80009d4:	18fb      	adds	r3, r7, r3
 80009d6:	0018      	movs	r0, r3
 80009d8:	2310      	movs	r3, #16
 80009da:	001a      	movs	r2, r3
 80009dc:	2100      	movs	r1, #0
 80009de:	f003 fbc7 	bl	8004170 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009e2:	1d3b      	adds	r3, r7, #4
 80009e4:	0018      	movs	r0, r3
 80009e6:	2318      	movs	r3, #24
 80009e8:	001a      	movs	r2, r3
 80009ea:	2100      	movs	r1, #0
 80009ec:	f003 fbc0 	bl	8004170 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 80009f0:	0021      	movs	r1, r4
 80009f2:	187b      	adds	r3, r7, r1
 80009f4:	2232      	movs	r2, #50	@ 0x32
 80009f6:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009f8:	187b      	adds	r3, r7, r1
 80009fa:	2201      	movs	r2, #1
 80009fc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80009fe:	187b      	adds	r3, r7, r1
 8000a00:	2201      	movs	r2, #1
 8000a02:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000a04:	187b      	adds	r3, r7, r1
 8000a06:	2201      	movs	r2, #1
 8000a08:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a0a:	187b      	adds	r3, r7, r1
 8000a0c:	2210      	movs	r2, #16
 8000a0e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000a10:	187b      	adds	r3, r7, r1
 8000a12:	2210      	movs	r2, #16
 8000a14:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a16:	187b      	adds	r3, r7, r1
 8000a18:	2202      	movs	r2, #2
 8000a1a:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a1c:	187b      	adds	r3, r7, r1
 8000a1e:	2280      	movs	r2, #128	@ 0x80
 8000a20:	0212      	lsls	r2, r2, #8
 8000a22:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000a24:	187b      	adds	r3, r7, r1
 8000a26:	2280      	movs	r2, #128	@ 0x80
 8000a28:	0352      	lsls	r2, r2, #13
 8000a2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000a2c:	187b      	adds	r3, r7, r1
 8000a2e:	2200      	movs	r2, #0
 8000a30:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a32:	187b      	adds	r3, r7, r1
 8000a34:	0018      	movs	r0, r3
 8000a36:	f001 fd01 	bl	800243c <HAL_RCC_OscConfig>
 8000a3a:	1e03      	subs	r3, r0, #0
 8000a3c:	d001      	beq.n	8000a42 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000a3e:	f000 f831 	bl	8000aa4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a42:	211c      	movs	r1, #28
 8000a44:	187b      	adds	r3, r7, r1
 8000a46:	2207      	movs	r2, #7
 8000a48:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a4a:	187b      	adds	r3, r7, r1
 8000a4c:	2202      	movs	r2, #2
 8000a4e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a50:	187b      	adds	r3, r7, r1
 8000a52:	2200      	movs	r2, #0
 8000a54:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a56:	187b      	adds	r3, r7, r1
 8000a58:	22a0      	movs	r2, #160	@ 0xa0
 8000a5a:	00d2      	lsls	r2, r2, #3
 8000a5c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a5e:	187b      	adds	r3, r7, r1
 8000a60:	2101      	movs	r1, #1
 8000a62:	0018      	movs	r0, r3
 8000a64:	f002 f870 	bl	8002b48 <HAL_RCC_ClockConfig>
 8000a68:	1e03      	subs	r3, r0, #0
 8000a6a:	d001      	beq.n	8000a70 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000a6c:	f000 f81a 	bl	8000aa4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 8000a70:	1d3b      	adds	r3, r7, #4
 8000a72:	4a0b      	ldr	r2, [pc, #44]	@ (8000aa0 <SystemClock_Config+0xe4>)
 8000a74:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000a76:	1d3b      	adds	r3, r7, #4
 8000a78:	2200      	movs	r2, #0
 8000a7a:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000a7c:	1d3b      	adds	r3, r7, #4
 8000a7e:	2200      	movs	r2, #0
 8000a80:	60da      	str	r2, [r3, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000a82:	1d3b      	adds	r3, r7, #4
 8000a84:	2200      	movs	r2, #0
 8000a86:	615a      	str	r2, [r3, #20]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a88:	1d3b      	adds	r3, r7, #4
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	f002 f9c8 	bl	8002e20 <HAL_RCCEx_PeriphCLKConfig>
 8000a90:	1e03      	subs	r3, r0, #0
 8000a92:	d001      	beq.n	8000a98 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000a94:	f000 f806 	bl	8000aa4 <Error_Handler>
  }
}
 8000a98:	46c0      	nop			@ (mov r8, r8)
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	b019      	add	sp, #100	@ 0x64
 8000a9e:	bd90      	pop	{r4, r7, pc}
 8000aa0:	00020021 	.word	0x00020021

08000aa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa8:	b672      	cpsid	i
}
 8000aaa:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aac:	46c0      	nop			@ (mov r8, r8)
 8000aae:	e7fd      	b.n	8000aac <Error_Handler+0x8>

08000ab0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000ab4:	4b1b      	ldr	r3, [pc, #108]	@ (8000b24 <MX_SPI1_Init+0x74>)
 8000ab6:	4a1c      	ldr	r2, [pc, #112]	@ (8000b28 <MX_SPI1_Init+0x78>)
 8000ab8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000aba:	4b1a      	ldr	r3, [pc, #104]	@ (8000b24 <MX_SPI1_Init+0x74>)
 8000abc:	2282      	movs	r2, #130	@ 0x82
 8000abe:	0052      	lsls	r2, r2, #1
 8000ac0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ac2:	4b18      	ldr	r3, [pc, #96]	@ (8000b24 <MX_SPI1_Init+0x74>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000ac8:	4b16      	ldr	r3, [pc, #88]	@ (8000b24 <MX_SPI1_Init+0x74>)
 8000aca:	22c0      	movs	r2, #192	@ 0xc0
 8000acc:	0092      	lsls	r2, r2, #2
 8000ace:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ad0:	4b14      	ldr	r3, [pc, #80]	@ (8000b24 <MX_SPI1_Init+0x74>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ad6:	4b13      	ldr	r3, [pc, #76]	@ (8000b24 <MX_SPI1_Init+0x74>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000adc:	4b11      	ldr	r3, [pc, #68]	@ (8000b24 <MX_SPI1_Init+0x74>)
 8000ade:	2280      	movs	r2, #128	@ 0x80
 8000ae0:	0092      	lsls	r2, r2, #2
 8000ae2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ae4:	4b0f      	ldr	r3, [pc, #60]	@ (8000b24 <MX_SPI1_Init+0x74>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000aea:	4b0e      	ldr	r3, [pc, #56]	@ (8000b24 <MX_SPI1_Init+0x74>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000af0:	4b0c      	ldr	r3, [pc, #48]	@ (8000b24 <MX_SPI1_Init+0x74>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000af6:	4b0b      	ldr	r3, [pc, #44]	@ (8000b24 <MX_SPI1_Init+0x74>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000afc:	4b09      	ldr	r3, [pc, #36]	@ (8000b24 <MX_SPI1_Init+0x74>)
 8000afe:	2207      	movs	r2, #7
 8000b00:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b02:	4b08      	ldr	r3, [pc, #32]	@ (8000b24 <MX_SPI1_Init+0x74>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b08:	4b06      	ldr	r3, [pc, #24]	@ (8000b24 <MX_SPI1_Init+0x74>)
 8000b0a:	2208      	movs	r2, #8
 8000b0c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b0e:	4b05      	ldr	r3, [pc, #20]	@ (8000b24 <MX_SPI1_Init+0x74>)
 8000b10:	0018      	movs	r0, r3
 8000b12:	f002 fa73 	bl	8002ffc <HAL_SPI_Init>
 8000b16:	1e03      	subs	r3, r0, #0
 8000b18:	d001      	beq.n	8000b1e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000b1a:	f7ff ffc3 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b1e:	46c0      	nop			@ (mov r8, r8)
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	2000010c 	.word	0x2000010c
 8000b28:	40013000 	.word	0x40013000

08000b2c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000b2c:	b590      	push	{r4, r7, lr}
 8000b2e:	b08b      	sub	sp, #44	@ 0x2c
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b34:	2414      	movs	r4, #20
 8000b36:	193b      	adds	r3, r7, r4
 8000b38:	0018      	movs	r0, r3
 8000b3a:	2314      	movs	r3, #20
 8000b3c:	001a      	movs	r2, r3
 8000b3e:	2100      	movs	r1, #0
 8000b40:	f003 fb16 	bl	8004170 <memset>
  if(spiHandle->Instance==SPI1)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a1c      	ldr	r2, [pc, #112]	@ (8000bbc <HAL_SPI_MspInit+0x90>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d132      	bne.n	8000bb4 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b4e:	4b1c      	ldr	r3, [pc, #112]	@ (8000bc0 <HAL_SPI_MspInit+0x94>)
 8000b50:	699a      	ldr	r2, [r3, #24]
 8000b52:	4b1b      	ldr	r3, [pc, #108]	@ (8000bc0 <HAL_SPI_MspInit+0x94>)
 8000b54:	2180      	movs	r1, #128	@ 0x80
 8000b56:	0149      	lsls	r1, r1, #5
 8000b58:	430a      	orrs	r2, r1
 8000b5a:	619a      	str	r2, [r3, #24]
 8000b5c:	4b18      	ldr	r3, [pc, #96]	@ (8000bc0 <HAL_SPI_MspInit+0x94>)
 8000b5e:	699a      	ldr	r2, [r3, #24]
 8000b60:	2380      	movs	r3, #128	@ 0x80
 8000b62:	015b      	lsls	r3, r3, #5
 8000b64:	4013      	ands	r3, r2
 8000b66:	613b      	str	r3, [r7, #16]
 8000b68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6a:	4b15      	ldr	r3, [pc, #84]	@ (8000bc0 <HAL_SPI_MspInit+0x94>)
 8000b6c:	695a      	ldr	r2, [r3, #20]
 8000b6e:	4b14      	ldr	r3, [pc, #80]	@ (8000bc0 <HAL_SPI_MspInit+0x94>)
 8000b70:	2180      	movs	r1, #128	@ 0x80
 8000b72:	0289      	lsls	r1, r1, #10
 8000b74:	430a      	orrs	r2, r1
 8000b76:	615a      	str	r2, [r3, #20]
 8000b78:	4b11      	ldr	r3, [pc, #68]	@ (8000bc0 <HAL_SPI_MspInit+0x94>)
 8000b7a:	695a      	ldr	r2, [r3, #20]
 8000b7c:	2380      	movs	r3, #128	@ 0x80
 8000b7e:	029b      	lsls	r3, r3, #10
 8000b80:	4013      	ands	r3, r2
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000b86:	0021      	movs	r1, r4
 8000b88:	187b      	adds	r3, r7, r1
 8000b8a:	22e0      	movs	r2, #224	@ 0xe0
 8000b8c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8e:	187b      	adds	r3, r7, r1
 8000b90:	2202      	movs	r2, #2
 8000b92:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	187b      	adds	r3, r7, r1
 8000b96:	2200      	movs	r2, #0
 8000b98:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b9a:	187b      	adds	r3, r7, r1
 8000b9c:	2203      	movs	r2, #3
 8000b9e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000ba0:	187b      	adds	r3, r7, r1
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba6:	187a      	adds	r2, r7, r1
 8000ba8:	2390      	movs	r3, #144	@ 0x90
 8000baa:	05db      	lsls	r3, r3, #23
 8000bac:	0011      	movs	r1, r2
 8000bae:	0018      	movs	r0, r3
 8000bb0:	f001 f848 	bl	8001c44 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000bb4:	46c0      	nop			@ (mov r8, r8)
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	b00b      	add	sp, #44	@ 0x2c
 8000bba:	bd90      	pop	{r4, r7, pc}
 8000bbc:	40013000 	.word	0x40013000
 8000bc0:	40021000 	.word	0x40021000

08000bc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bca:	4b0f      	ldr	r3, [pc, #60]	@ (8000c08 <HAL_MspInit+0x44>)
 8000bcc:	699a      	ldr	r2, [r3, #24]
 8000bce:	4b0e      	ldr	r3, [pc, #56]	@ (8000c08 <HAL_MspInit+0x44>)
 8000bd0:	2101      	movs	r1, #1
 8000bd2:	430a      	orrs	r2, r1
 8000bd4:	619a      	str	r2, [r3, #24]
 8000bd6:	4b0c      	ldr	r3, [pc, #48]	@ (8000c08 <HAL_MspInit+0x44>)
 8000bd8:	699b      	ldr	r3, [r3, #24]
 8000bda:	2201      	movs	r2, #1
 8000bdc:	4013      	ands	r3, r2
 8000bde:	607b      	str	r3, [r7, #4]
 8000be0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000be2:	4b09      	ldr	r3, [pc, #36]	@ (8000c08 <HAL_MspInit+0x44>)
 8000be4:	69da      	ldr	r2, [r3, #28]
 8000be6:	4b08      	ldr	r3, [pc, #32]	@ (8000c08 <HAL_MspInit+0x44>)
 8000be8:	2180      	movs	r1, #128	@ 0x80
 8000bea:	0549      	lsls	r1, r1, #21
 8000bec:	430a      	orrs	r2, r1
 8000bee:	61da      	str	r2, [r3, #28]
 8000bf0:	4b05      	ldr	r3, [pc, #20]	@ (8000c08 <HAL_MspInit+0x44>)
 8000bf2:	69da      	ldr	r2, [r3, #28]
 8000bf4:	2380      	movs	r3, #128	@ 0x80
 8000bf6:	055b      	lsls	r3, r3, #21
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	603b      	str	r3, [r7, #0]
 8000bfc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bfe:	46c0      	nop			@ (mov r8, r8)
 8000c00:	46bd      	mov	sp, r7
 8000c02:	b002      	add	sp, #8
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	46c0      	nop			@ (mov r8, r8)
 8000c08:	40021000 	.word	0x40021000

08000c0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c10:	46c0      	nop			@ (mov r8, r8)
 8000c12:	e7fd      	b.n	8000c10 <NMI_Handler+0x4>

08000c14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c18:	46c0      	nop			@ (mov r8, r8)
 8000c1a:	e7fd      	b.n	8000c18 <HardFault_Handler+0x4>

08000c1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c20:	46c0      	nop			@ (mov r8, r8)
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c2a:	46c0      	nop			@ (mov r8, r8)
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c34:	f000 f9a2 	bl	8000f7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c38:	46c0      	nop			@ (mov r8, r8)
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
	...

08000c40 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c44:	4b03      	ldr	r3, [pc, #12]	@ (8000c54 <USART1_IRQHandler+0x14>)
 8000c46:	0018      	movs	r0, r3
 8000c48:	f002 fb84 	bl	8003354 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c4c:	46c0      	nop			@ (mov r8, r8)
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	46c0      	nop			@ (mov r8, r8)
 8000c54:	20000174 	.word	0x20000174

08000c58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b086      	sub	sp, #24
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c60:	4a14      	ldr	r2, [pc, #80]	@ (8000cb4 <_sbrk+0x5c>)
 8000c62:	4b15      	ldr	r3, [pc, #84]	@ (8000cb8 <_sbrk+0x60>)
 8000c64:	1ad3      	subs	r3, r2, r3
 8000c66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c6c:	4b13      	ldr	r3, [pc, #76]	@ (8000cbc <_sbrk+0x64>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d102      	bne.n	8000c7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c74:	4b11      	ldr	r3, [pc, #68]	@ (8000cbc <_sbrk+0x64>)
 8000c76:	4a12      	ldr	r2, [pc, #72]	@ (8000cc0 <_sbrk+0x68>)
 8000c78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c7a:	4b10      	ldr	r3, [pc, #64]	@ (8000cbc <_sbrk+0x64>)
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	18d3      	adds	r3, r2, r3
 8000c82:	693a      	ldr	r2, [r7, #16]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d207      	bcs.n	8000c98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c88:	f003 fa7a 	bl	8004180 <__errno>
 8000c8c:	0003      	movs	r3, r0
 8000c8e:	220c      	movs	r2, #12
 8000c90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c92:	2301      	movs	r3, #1
 8000c94:	425b      	negs	r3, r3
 8000c96:	e009      	b.n	8000cac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c98:	4b08      	ldr	r3, [pc, #32]	@ (8000cbc <_sbrk+0x64>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c9e:	4b07      	ldr	r3, [pc, #28]	@ (8000cbc <_sbrk+0x64>)
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	18d2      	adds	r2, r2, r3
 8000ca6:	4b05      	ldr	r3, [pc, #20]	@ (8000cbc <_sbrk+0x64>)
 8000ca8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000caa:	68fb      	ldr	r3, [r7, #12]
}
 8000cac:	0018      	movs	r0, r3
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	b006      	add	sp, #24
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	20001800 	.word	0x20001800
 8000cb8:	00000400 	.word	0x00000400
 8000cbc:	20000170 	.word	0x20000170
 8000cc0:	20000628 	.word	0x20000628

08000cc4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000cc8:	46c0      	nop			@ (mov r8, r8)
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
	...

08000cd0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cd4:	4b14      	ldr	r3, [pc, #80]	@ (8000d28 <MX_USART1_UART_Init+0x58>)
 8000cd6:	4a15      	ldr	r2, [pc, #84]	@ (8000d2c <MX_USART1_UART_Init+0x5c>)
 8000cd8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000cda:	4b13      	ldr	r3, [pc, #76]	@ (8000d28 <MX_USART1_UART_Init+0x58>)
 8000cdc:	2296      	movs	r2, #150	@ 0x96
 8000cde:	0192      	lsls	r2, r2, #6
 8000ce0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ce2:	4b11      	ldr	r3, [pc, #68]	@ (8000d28 <MX_USART1_UART_Init+0x58>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ce8:	4b0f      	ldr	r3, [pc, #60]	@ (8000d28 <MX_USART1_UART_Init+0x58>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cee:	4b0e      	ldr	r3, [pc, #56]	@ (8000d28 <MX_USART1_UART_Init+0x58>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000cf4:	4b0c      	ldr	r3, [pc, #48]	@ (8000d28 <MX_USART1_UART_Init+0x58>)
 8000cf6:	220c      	movs	r2, #12
 8000cf8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cfa:	4b0b      	ldr	r3, [pc, #44]	@ (8000d28 <MX_USART1_UART_Init+0x58>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d00:	4b09      	ldr	r3, [pc, #36]	@ (8000d28 <MX_USART1_UART_Init+0x58>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d06:	4b08      	ldr	r3, [pc, #32]	@ (8000d28 <MX_USART1_UART_Init+0x58>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d0c:	4b06      	ldr	r3, [pc, #24]	@ (8000d28 <MX_USART1_UART_Init+0x58>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d12:	4b05      	ldr	r3, [pc, #20]	@ (8000d28 <MX_USART1_UART_Init+0x58>)
 8000d14:	0018      	movs	r0, r3
 8000d16:	f002 fa29 	bl	800316c <HAL_UART_Init>
 8000d1a:	1e03      	subs	r3, r0, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000d1e:	f7ff fec1 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d22:	46c0      	nop			@ (mov r8, r8)
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20000174 	.word	0x20000174
 8000d2c:	40013800 	.word	0x40013800

08000d30 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d30:	b590      	push	{r4, r7, lr}
 8000d32:	b08b      	sub	sp, #44	@ 0x2c
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d38:	2414      	movs	r4, #20
 8000d3a:	193b      	adds	r3, r7, r4
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	2314      	movs	r3, #20
 8000d40:	001a      	movs	r2, r3
 8000d42:	2100      	movs	r1, #0
 8000d44:	f003 fa14 	bl	8004170 <memset>
  if(uartHandle->Instance==USART1)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a21      	ldr	r2, [pc, #132]	@ (8000dd4 <HAL_UART_MspInit+0xa4>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d13b      	bne.n	8000dca <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d52:	4b21      	ldr	r3, [pc, #132]	@ (8000dd8 <HAL_UART_MspInit+0xa8>)
 8000d54:	699a      	ldr	r2, [r3, #24]
 8000d56:	4b20      	ldr	r3, [pc, #128]	@ (8000dd8 <HAL_UART_MspInit+0xa8>)
 8000d58:	2180      	movs	r1, #128	@ 0x80
 8000d5a:	01c9      	lsls	r1, r1, #7
 8000d5c:	430a      	orrs	r2, r1
 8000d5e:	619a      	str	r2, [r3, #24]
 8000d60:	4b1d      	ldr	r3, [pc, #116]	@ (8000dd8 <HAL_UART_MspInit+0xa8>)
 8000d62:	699a      	ldr	r2, [r3, #24]
 8000d64:	2380      	movs	r3, #128	@ 0x80
 8000d66:	01db      	lsls	r3, r3, #7
 8000d68:	4013      	ands	r3, r2
 8000d6a:	613b      	str	r3, [r7, #16]
 8000d6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6e:	4b1a      	ldr	r3, [pc, #104]	@ (8000dd8 <HAL_UART_MspInit+0xa8>)
 8000d70:	695a      	ldr	r2, [r3, #20]
 8000d72:	4b19      	ldr	r3, [pc, #100]	@ (8000dd8 <HAL_UART_MspInit+0xa8>)
 8000d74:	2180      	movs	r1, #128	@ 0x80
 8000d76:	0289      	lsls	r1, r1, #10
 8000d78:	430a      	orrs	r2, r1
 8000d7a:	615a      	str	r2, [r3, #20]
 8000d7c:	4b16      	ldr	r3, [pc, #88]	@ (8000dd8 <HAL_UART_MspInit+0xa8>)
 8000d7e:	695a      	ldr	r2, [r3, #20]
 8000d80:	2380      	movs	r3, #128	@ 0x80
 8000d82:	029b      	lsls	r3, r3, #10
 8000d84:	4013      	ands	r3, r2
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d8a:	193b      	adds	r3, r7, r4
 8000d8c:	22c0      	movs	r2, #192	@ 0xc0
 8000d8e:	00d2      	lsls	r2, r2, #3
 8000d90:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d92:	0021      	movs	r1, r4
 8000d94:	187b      	adds	r3, r7, r1
 8000d96:	2202      	movs	r2, #2
 8000d98:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	187b      	adds	r3, r7, r1
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000da0:	187b      	adds	r3, r7, r1
 8000da2:	2203      	movs	r2, #3
 8000da4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000da6:	187b      	adds	r3, r7, r1
 8000da8:	2201      	movs	r2, #1
 8000daa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dac:	187a      	adds	r2, r7, r1
 8000dae:	2390      	movs	r3, #144	@ 0x90
 8000db0:	05db      	lsls	r3, r3, #23
 8000db2:	0011      	movs	r1, r2
 8000db4:	0018      	movs	r0, r3
 8000db6:	f000 ff45 	bl	8001c44 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	201b      	movs	r0, #27
 8000dc0:	f000 fe90 	bl	8001ae4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000dc4:	201b      	movs	r0, #27
 8000dc6:	f000 fea2 	bl	8001b0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000dca:	46c0      	nop			@ (mov r8, r8)
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	b00b      	add	sp, #44	@ 0x2c
 8000dd0:	bd90      	pop	{r4, r7, pc}
 8000dd2:	46c0      	nop			@ (mov r8, r8)
 8000dd4:	40013800 	.word	0x40013800
 8000dd8:	40021000 	.word	0x40021000

08000ddc <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000de0:	4b0f      	ldr	r3, [pc, #60]	@ (8000e20 <MX_USB_PCD_Init+0x44>)
 8000de2:	4a10      	ldr	r2, [pc, #64]	@ (8000e24 <MX_USB_PCD_Init+0x48>)
 8000de4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000de6:	4b0e      	ldr	r3, [pc, #56]	@ (8000e20 <MX_USB_PCD_Init+0x44>)
 8000de8:	2208      	movs	r2, #8
 8000dea:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000dec:	4b0c      	ldr	r3, [pc, #48]	@ (8000e20 <MX_USB_PCD_Init+0x44>)
 8000dee:	2202      	movs	r2, #2
 8000df0:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000df2:	4b0b      	ldr	r3, [pc, #44]	@ (8000e20 <MX_USB_PCD_Init+0x44>)
 8000df4:	2202      	movs	r2, #2
 8000df6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000df8:	4b09      	ldr	r3, [pc, #36]	@ (8000e20 <MX_USB_PCD_Init+0x44>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000dfe:	4b08      	ldr	r3, [pc, #32]	@ (8000e20 <MX_USB_PCD_Init+0x44>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000e04:	4b06      	ldr	r3, [pc, #24]	@ (8000e20 <MX_USB_PCD_Init+0x44>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000e0a:	4b05      	ldr	r3, [pc, #20]	@ (8000e20 <MX_USB_PCD_Init+0x44>)
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	f001 f9f7 	bl	8002200 <HAL_PCD_Init>
 8000e12:	1e03      	subs	r3, r0, #0
 8000e14:	d001      	beq.n	8000e1a <MX_USB_PCD_Init+0x3e>
  {
    Error_Handler();
 8000e16:	f7ff fe45 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000e1a:	46c0      	nop			@ (mov r8, r8)
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	200001fc 	.word	0x200001fc
 8000e24:	40005c00 	.word	0x40005c00

08000e28 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]

  if(pcdHandle->Instance==USB)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a0a      	ldr	r2, [pc, #40]	@ (8000e60 <HAL_PCD_MspInit+0x38>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d10d      	bne.n	8000e56 <HAL_PCD_MspInit+0x2e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000e3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e64 <HAL_PCD_MspInit+0x3c>)
 8000e3c:	69da      	ldr	r2, [r3, #28]
 8000e3e:	4b09      	ldr	r3, [pc, #36]	@ (8000e64 <HAL_PCD_MspInit+0x3c>)
 8000e40:	2180      	movs	r1, #128	@ 0x80
 8000e42:	0409      	lsls	r1, r1, #16
 8000e44:	430a      	orrs	r2, r1
 8000e46:	61da      	str	r2, [r3, #28]
 8000e48:	4b06      	ldr	r3, [pc, #24]	@ (8000e64 <HAL_PCD_MspInit+0x3c>)
 8000e4a:	69da      	ldr	r2, [r3, #28]
 8000e4c:	2380      	movs	r3, #128	@ 0x80
 8000e4e:	041b      	lsls	r3, r3, #16
 8000e50:	4013      	ands	r3, r2
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8000e56:	46c0      	nop			@ (mov r8, r8)
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	b004      	add	sp, #16
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	46c0      	nop			@ (mov r8, r8)
 8000e60:	40005c00 	.word	0x40005c00
 8000e64:	40021000 	.word	0x40021000

08000e68 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e68:	4813      	ldr	r0, [pc, #76]	@ (8000eb8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e6a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e6c:	f7ff ff2a 	bl	8000cc4 <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8000e70:	4812      	ldr	r0, [pc, #72]	@ (8000ebc <LoopForever+0x6>)
    LDR R1, [R0]
 8000e72:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000e74:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000e76:	4a12      	ldr	r2, [pc, #72]	@ (8000ec0 <LoopForever+0xa>)
    CMP R1, R2
 8000e78:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000e7a:	d105      	bne.n	8000e88 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000e7c:	4811      	ldr	r0, [pc, #68]	@ (8000ec4 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000e7e:	4912      	ldr	r1, [pc, #72]	@ (8000ec8 <LoopForever+0x12>)
    STR R1, [R0]
 8000e80:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000e82:	4812      	ldr	r0, [pc, #72]	@ (8000ecc <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000e84:	4912      	ldr	r1, [pc, #72]	@ (8000ed0 <LoopForever+0x1a>)
    STR R1, [R0]
 8000e86:	6001      	str	r1, [r0, #0]

08000e88 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e88:	4812      	ldr	r0, [pc, #72]	@ (8000ed4 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000e8a:	4913      	ldr	r1, [pc, #76]	@ (8000ed8 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000e8c:	4a13      	ldr	r2, [pc, #76]	@ (8000edc <LoopForever+0x26>)
  movs r3, #0
 8000e8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e90:	e002      	b.n	8000e98 <LoopCopyDataInit>

08000e92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e96:	3304      	adds	r3, #4

08000e98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e9c:	d3f9      	bcc.n	8000e92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e9e:	4a10      	ldr	r2, [pc, #64]	@ (8000ee0 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000ea0:	4c10      	ldr	r4, [pc, #64]	@ (8000ee4 <LoopForever+0x2e>)
  movs r3, #0
 8000ea2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ea4:	e001      	b.n	8000eaa <LoopFillZerobss>

08000ea6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ea6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ea8:	3204      	adds	r2, #4

08000eaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eac:	d3fb      	bcc.n	8000ea6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000eae:	f003 f96d 	bl	800418c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000eb2:	f7ff fd33 	bl	800091c <main>

08000eb6 <LoopForever>:

LoopForever:
    b LoopForever
 8000eb6:	e7fe      	b.n	8000eb6 <LoopForever>
  ldr   r0, =_estack
 8000eb8:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000ebc:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000ec0:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000ec4:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000ec8:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000ecc:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000ed0:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000ed4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ed8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000edc:	08004b14 	.word	0x08004b14
  ldr r2, =_sbss
 8000ee0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000ee4:	20000624 	.word	0x20000624

08000ee8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ee8:	e7fe      	b.n	8000ee8 <ADC1_IRQHandler>
	...

08000eec <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ef0:	4b07      	ldr	r3, [pc, #28]	@ (8000f10 <HAL_Init+0x24>)
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	4b06      	ldr	r3, [pc, #24]	@ (8000f10 <HAL_Init+0x24>)
 8000ef6:	2110      	movs	r1, #16
 8000ef8:	430a      	orrs	r2, r1
 8000efa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000efc:	2003      	movs	r0, #3
 8000efe:	f000 f809 	bl	8000f14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f02:	f7ff fe5f 	bl	8000bc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f06:	2300      	movs	r3, #0
}
 8000f08:	0018      	movs	r0, r3
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	46c0      	nop			@ (mov r8, r8)
 8000f10:	40022000 	.word	0x40022000

08000f14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f14:	b590      	push	{r4, r7, lr}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f1c:	4b14      	ldr	r3, [pc, #80]	@ (8000f70 <HAL_InitTick+0x5c>)
 8000f1e:	681c      	ldr	r4, [r3, #0]
 8000f20:	4b14      	ldr	r3, [pc, #80]	@ (8000f74 <HAL_InitTick+0x60>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	0019      	movs	r1, r3
 8000f26:	23fa      	movs	r3, #250	@ 0xfa
 8000f28:	0098      	lsls	r0, r3, #2
 8000f2a:	f7ff f8ff 	bl	800012c <__udivsi3>
 8000f2e:	0003      	movs	r3, r0
 8000f30:	0019      	movs	r1, r3
 8000f32:	0020      	movs	r0, r4
 8000f34:	f7ff f8fa 	bl	800012c <__udivsi3>
 8000f38:	0003      	movs	r3, r0
 8000f3a:	0018      	movs	r0, r3
 8000f3c:	f000 fdf7 	bl	8001b2e <HAL_SYSTICK_Config>
 8000f40:	1e03      	subs	r3, r0, #0
 8000f42:	d001      	beq.n	8000f48 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000f44:	2301      	movs	r3, #1
 8000f46:	e00f      	b.n	8000f68 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2b03      	cmp	r3, #3
 8000f4c:	d80b      	bhi.n	8000f66 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f4e:	6879      	ldr	r1, [r7, #4]
 8000f50:	2301      	movs	r3, #1
 8000f52:	425b      	negs	r3, r3
 8000f54:	2200      	movs	r2, #0
 8000f56:	0018      	movs	r0, r3
 8000f58:	f000 fdc4 	bl	8001ae4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f5c:	4b06      	ldr	r3, [pc, #24]	@ (8000f78 <HAL_InitTick+0x64>)
 8000f5e:	687a      	ldr	r2, [r7, #4]
 8000f60:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000f62:	2300      	movs	r3, #0
 8000f64:	e000      	b.n	8000f68 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
}
 8000f68:	0018      	movs	r0, r3
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	b003      	add	sp, #12
 8000f6e:	bd90      	pop	{r4, r7, pc}
 8000f70:	20000000 	.word	0x20000000
 8000f74:	20000008 	.word	0x20000008
 8000f78:	20000004 	.word	0x20000004

08000f7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f80:	4b05      	ldr	r3, [pc, #20]	@ (8000f98 <HAL_IncTick+0x1c>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	001a      	movs	r2, r3
 8000f86:	4b05      	ldr	r3, [pc, #20]	@ (8000f9c <HAL_IncTick+0x20>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	18d2      	adds	r2, r2, r3
 8000f8c:	4b03      	ldr	r3, [pc, #12]	@ (8000f9c <HAL_IncTick+0x20>)
 8000f8e:	601a      	str	r2, [r3, #0]
}
 8000f90:	46c0      	nop			@ (mov r8, r8)
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	46c0      	nop			@ (mov r8, r8)
 8000f98:	20000008 	.word	0x20000008
 8000f9c:	200004d8 	.word	0x200004d8

08000fa0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fa4:	4b02      	ldr	r3, [pc, #8]	@ (8000fb0 <HAL_GetTick+0x10>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
}
 8000fa8:	0018      	movs	r0, r3
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	46c0      	nop			@ (mov r8, r8)
 8000fb0:	200004d8 	.word	0x200004d8

08000fb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fbc:	f7ff fff0 	bl	8000fa0 <HAL_GetTick>
 8000fc0:	0003      	movs	r3, r0
 8000fc2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	d005      	beq.n	8000fda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fce:	4b0a      	ldr	r3, [pc, #40]	@ (8000ff8 <HAL_Delay+0x44>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	001a      	movs	r2, r3
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	189b      	adds	r3, r3, r2
 8000fd8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000fda:	46c0      	nop			@ (mov r8, r8)
 8000fdc:	f7ff ffe0 	bl	8000fa0 <HAL_GetTick>
 8000fe0:	0002      	movs	r2, r0
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	68fa      	ldr	r2, [r7, #12]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d8f7      	bhi.n	8000fdc <HAL_Delay+0x28>
  {
  }
}
 8000fec:	46c0      	nop			@ (mov r8, r8)
 8000fee:	46c0      	nop			@ (mov r8, r8)
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	b004      	add	sp, #16
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	46c0      	nop			@ (mov r8, r8)
 8000ff8:	20000008 	.word	0x20000008

08000ffc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001004:	230f      	movs	r3, #15
 8001006:	18fb      	adds	r3, r7, r3
 8001008:	2200      	movs	r2, #0
 800100a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 800100c:	2300      	movs	r3, #0
 800100e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d101      	bne.n	800101a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	e125      	b.n	8001266 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800101e:	2b00      	cmp	r3, #0
 8001020:	d10a      	bne.n	8001038 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2200      	movs	r2, #0
 8001026:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2234      	movs	r2, #52	@ 0x34
 800102c:	2100      	movs	r1, #0
 800102e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	0018      	movs	r0, r3
 8001034:	f7ff fa72 	bl	800051c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800103c:	2210      	movs	r2, #16
 800103e:	4013      	ands	r3, r2
 8001040:	d000      	beq.n	8001044 <HAL_ADC_Init+0x48>
 8001042:	e103      	b.n	800124c <HAL_ADC_Init+0x250>
 8001044:	230f      	movs	r3, #15
 8001046:	18fb      	adds	r3, r7, r3
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d000      	beq.n	8001050 <HAL_ADC_Init+0x54>
 800104e:	e0fd      	b.n	800124c <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	689b      	ldr	r3, [r3, #8]
 8001056:	2204      	movs	r2, #4
 8001058:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800105a:	d000      	beq.n	800105e <HAL_ADC_Init+0x62>
 800105c:	e0f6      	b.n	800124c <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001062:	4a83      	ldr	r2, [pc, #524]	@ (8001270 <HAL_ADC_Init+0x274>)
 8001064:	4013      	ands	r3, r2
 8001066:	2202      	movs	r2, #2
 8001068:	431a      	orrs	r2, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	2203      	movs	r2, #3
 8001076:	4013      	ands	r3, r2
 8001078:	2b01      	cmp	r3, #1
 800107a:	d112      	bne.n	80010a2 <HAL_ADC_Init+0xa6>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	2201      	movs	r2, #1
 8001084:	4013      	ands	r3, r2
 8001086:	2b01      	cmp	r3, #1
 8001088:	d009      	beq.n	800109e <HAL_ADC_Init+0xa2>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	68da      	ldr	r2, [r3, #12]
 8001090:	2380      	movs	r3, #128	@ 0x80
 8001092:	021b      	lsls	r3, r3, #8
 8001094:	401a      	ands	r2, r3
 8001096:	2380      	movs	r3, #128	@ 0x80
 8001098:	021b      	lsls	r3, r3, #8
 800109a:	429a      	cmp	r2, r3
 800109c:	d101      	bne.n	80010a2 <HAL_ADC_Init+0xa6>
 800109e:	2301      	movs	r3, #1
 80010a0:	e000      	b.n	80010a4 <HAL_ADC_Init+0xa8>
 80010a2:	2300      	movs	r3, #0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d116      	bne.n	80010d6 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	68db      	ldr	r3, [r3, #12]
 80010ae:	2218      	movs	r2, #24
 80010b0:	4393      	bics	r3, r2
 80010b2:	0019      	movs	r1, r3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	689a      	ldr	r2, [r3, #8]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	430a      	orrs	r2, r1
 80010be:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	691b      	ldr	r3, [r3, #16]
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	0899      	lsrs	r1, r3, #2
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	685a      	ldr	r2, [r3, #4]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	430a      	orrs	r2, r1
 80010d4:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	68da      	ldr	r2, [r3, #12]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4964      	ldr	r1, [pc, #400]	@ (8001274 <HAL_ADC_Init+0x278>)
 80010e2:	400a      	ands	r2, r1
 80010e4:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	7e1b      	ldrb	r3, [r3, #24]
 80010ea:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	7e5b      	ldrb	r3, [r3, #25]
 80010f0:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80010f2:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	7e9b      	ldrb	r3, [r3, #26]
 80010f8:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80010fa:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001100:	2b01      	cmp	r3, #1
 8001102:	d002      	beq.n	800110a <HAL_ADC_Init+0x10e>
 8001104:	2380      	movs	r3, #128	@ 0x80
 8001106:	015b      	lsls	r3, r3, #5
 8001108:	e000      	b.n	800110c <HAL_ADC_Init+0x110>
 800110a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800110c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001112:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	691b      	ldr	r3, [r3, #16]
 8001118:	2b02      	cmp	r3, #2
 800111a:	d101      	bne.n	8001120 <HAL_ADC_Init+0x124>
 800111c:	2304      	movs	r3, #4
 800111e:	e000      	b.n	8001122 <HAL_ADC_Init+0x126>
 8001120:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8001122:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2124      	movs	r1, #36	@ 0x24
 8001128:	5c5b      	ldrb	r3, [r3, r1]
 800112a:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800112c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800112e:	68ba      	ldr	r2, [r7, #8]
 8001130:	4313      	orrs	r3, r2
 8001132:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	7edb      	ldrb	r3, [r3, #27]
 8001138:	2b01      	cmp	r3, #1
 800113a:	d115      	bne.n	8001168 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	7e9b      	ldrb	r3, [r3, #26]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d105      	bne.n	8001150 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	2280      	movs	r2, #128	@ 0x80
 8001148:	0252      	lsls	r2, r2, #9
 800114a:	4313      	orrs	r3, r2
 800114c:	60bb      	str	r3, [r7, #8]
 800114e:	e00b      	b.n	8001168 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001154:	2220      	movs	r2, #32
 8001156:	431a      	orrs	r2, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001160:	2201      	movs	r2, #1
 8001162:	431a      	orrs	r2, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	69da      	ldr	r2, [r3, #28]
 800116c:	23c2      	movs	r3, #194	@ 0xc2
 800116e:	33ff      	adds	r3, #255	@ 0xff
 8001170:	429a      	cmp	r2, r3
 8001172:	d007      	beq.n	8001184 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800117c:	4313      	orrs	r3, r2
 800117e:	68ba      	ldr	r2, [r7, #8]
 8001180:	4313      	orrs	r3, r2
 8001182:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	68d9      	ldr	r1, [r3, #12]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	68ba      	ldr	r2, [r7, #8]
 8001190:	430a      	orrs	r2, r1
 8001192:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001198:	2380      	movs	r3, #128	@ 0x80
 800119a:	055b      	lsls	r3, r3, #21
 800119c:	429a      	cmp	r2, r3
 800119e:	d01b      	beq.n	80011d8 <HAL_ADC_Init+0x1dc>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d017      	beq.n	80011d8 <HAL_ADC_Init+0x1dc>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011ac:	2b02      	cmp	r3, #2
 80011ae:	d013      	beq.n	80011d8 <HAL_ADC_Init+0x1dc>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011b4:	2b03      	cmp	r3, #3
 80011b6:	d00f      	beq.n	80011d8 <HAL_ADC_Init+0x1dc>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011bc:	2b04      	cmp	r3, #4
 80011be:	d00b      	beq.n	80011d8 <HAL_ADC_Init+0x1dc>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011c4:	2b05      	cmp	r3, #5
 80011c6:	d007      	beq.n	80011d8 <HAL_ADC_Init+0x1dc>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011cc:	2b06      	cmp	r3, #6
 80011ce:	d003      	beq.n	80011d8 <HAL_ADC_Init+0x1dc>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011d4:	2b07      	cmp	r3, #7
 80011d6:	d112      	bne.n	80011fe <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	695a      	ldr	r2, [r3, #20]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	2107      	movs	r1, #7
 80011e4:	438a      	bics	r2, r1
 80011e6:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	6959      	ldr	r1, [r3, #20]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011f2:	2207      	movs	r2, #7
 80011f4:	401a      	ands	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	430a      	orrs	r2, r1
 80011fc:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	4a1c      	ldr	r2, [pc, #112]	@ (8001278 <HAL_ADC_Init+0x27c>)
 8001206:	4013      	ands	r3, r2
 8001208:	68ba      	ldr	r2, [r7, #8]
 800120a:	429a      	cmp	r2, r3
 800120c:	d10b      	bne.n	8001226 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2200      	movs	r2, #0
 8001212:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001218:	2203      	movs	r2, #3
 800121a:	4393      	bics	r3, r2
 800121c:	2201      	movs	r2, #1
 800121e:	431a      	orrs	r2, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001224:	e01c      	b.n	8001260 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800122a:	2212      	movs	r2, #18
 800122c:	4393      	bics	r3, r2
 800122e:	2210      	movs	r2, #16
 8001230:	431a      	orrs	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800123a:	2201      	movs	r2, #1
 800123c:	431a      	orrs	r2, r3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8001242:	230f      	movs	r3, #15
 8001244:	18fb      	adds	r3, r7, r3
 8001246:	2201      	movs	r2, #1
 8001248:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800124a:	e009      	b.n	8001260 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001250:	2210      	movs	r2, #16
 8001252:	431a      	orrs	r2, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 8001258:	230f      	movs	r3, #15
 800125a:	18fb      	adds	r3, r7, r3
 800125c:	2201      	movs	r2, #1
 800125e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001260:	230f      	movs	r3, #15
 8001262:	18fb      	adds	r3, r7, r3
 8001264:	781b      	ldrb	r3, [r3, #0]
}
 8001266:	0018      	movs	r0, r3
 8001268:	46bd      	mov	sp, r7
 800126a:	b004      	add	sp, #16
 800126c:	bd80      	pop	{r7, pc}
 800126e:	46c0      	nop			@ (mov r8, r8)
 8001270:	fffffefd 	.word	0xfffffefd
 8001274:	fffe0219 	.word	0xfffe0219
 8001278:	833fffe7 	.word	0x833fffe7

0800127c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800127c:	b590      	push	{r4, r7, lr}
 800127e:	b085      	sub	sp, #20
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001284:	230f      	movs	r3, #15
 8001286:	18fb      	adds	r3, r7, r3
 8001288:	2200      	movs	r2, #0
 800128a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	2204      	movs	r2, #4
 8001294:	4013      	ands	r3, r2
 8001296:	d138      	bne.n	800130a <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2234      	movs	r2, #52	@ 0x34
 800129c:	5c9b      	ldrb	r3, [r3, r2]
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d101      	bne.n	80012a6 <HAL_ADC_Start+0x2a>
 80012a2:	2302      	movs	r3, #2
 80012a4:	e038      	b.n	8001318 <HAL_ADC_Start+0x9c>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2234      	movs	r2, #52	@ 0x34
 80012aa:	2101      	movs	r1, #1
 80012ac:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	7e5b      	ldrb	r3, [r3, #25]
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d007      	beq.n	80012c6 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80012b6:	230f      	movs	r3, #15
 80012b8:	18fc      	adds	r4, r7, r3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	0018      	movs	r0, r3
 80012be:	f000 fa23 	bl	8001708 <ADC_Enable>
 80012c2:	0003      	movs	r3, r0
 80012c4:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80012c6:	230f      	movs	r3, #15
 80012c8:	18fb      	adds	r3, r7, r3
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d120      	bne.n	8001312 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012d4:	4a12      	ldr	r2, [pc, #72]	@ (8001320 <HAL_ADC_Start+0xa4>)
 80012d6:	4013      	ands	r3, r2
 80012d8:	2280      	movs	r2, #128	@ 0x80
 80012da:	0052      	lsls	r2, r2, #1
 80012dc:	431a      	orrs	r2, r3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2200      	movs	r2, #0
 80012e6:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2234      	movs	r2, #52	@ 0x34
 80012ec:	2100      	movs	r1, #0
 80012ee:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	221c      	movs	r2, #28
 80012f6:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	689a      	ldr	r2, [r3, #8]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	2104      	movs	r1, #4
 8001304:	430a      	orrs	r2, r1
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	e003      	b.n	8001312 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800130a:	230f      	movs	r3, #15
 800130c:	18fb      	adds	r3, r7, r3
 800130e:	2202      	movs	r2, #2
 8001310:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001312:	230f      	movs	r3, #15
 8001314:	18fb      	adds	r3, r7, r3
 8001316:	781b      	ldrb	r3, [r3, #0]
}
 8001318:	0018      	movs	r0, r3
 800131a:	46bd      	mov	sp, r7
 800131c:	b005      	add	sp, #20
 800131e:	bd90      	pop	{r4, r7, pc}
 8001320:	fffff0fe 	.word	0xfffff0fe

08001324 <HAL_ADC_Stop>:
  * @brief  Stop ADC conversion of regular group, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{ 
 8001324:	b5b0      	push	{r4, r5, r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800132c:	230f      	movs	r3, #15
 800132e:	18fb      	adds	r3, r7, r3
 8001330:	2200      	movs	r2, #0
 8001332:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2234      	movs	r2, #52	@ 0x34
 8001338:	5c9b      	ldrb	r3, [r3, r2]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d101      	bne.n	8001342 <HAL_ADC_Stop+0x1e>
 800133e:	2302      	movs	r3, #2
 8001340:	e029      	b.n	8001396 <HAL_ADC_Stop+0x72>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2234      	movs	r2, #52	@ 0x34
 8001346:	2101      	movs	r1, #1
 8001348:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800134a:	250f      	movs	r5, #15
 800134c:	197c      	adds	r4, r7, r5
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	0018      	movs	r0, r3
 8001352:	f000 face 	bl	80018f2 <ADC_ConversionStop>
 8001356:	0003      	movs	r3, r0
 8001358:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800135a:	197b      	adds	r3, r7, r5
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d112      	bne.n	8001388 <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001362:	197c      	adds	r4, r7, r5
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	0018      	movs	r0, r3
 8001368:	f000 fa52 	bl	8001810 <ADC_Disable>
 800136c:	0003      	movs	r3, r0
 800136e:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001370:	197b      	adds	r3, r7, r5
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d107      	bne.n	8001388 <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800137c:	4a08      	ldr	r2, [pc, #32]	@ (80013a0 <HAL_ADC_Stop+0x7c>)
 800137e:	4013      	ands	r3, r2
 8001380:	2201      	movs	r2, #1
 8001382:	431a      	orrs	r2, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2234      	movs	r2, #52	@ 0x34
 800138c:	2100      	movs	r1, #0
 800138e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001390:	230f      	movs	r3, #15
 8001392:	18fb      	adds	r3, r7, r3
 8001394:	781b      	ldrb	r3, [r3, #0]
}
 8001396:	0018      	movs	r0, r3
 8001398:	46bd      	mov	sp, r7
 800139a:	b004      	add	sp, #16
 800139c:	bdb0      	pop	{r4, r5, r7, pc}
 800139e:	46c0      	nop			@ (mov r8, r8)
 80013a0:	fffffefe 	.word	0xfffffefe

080013a4 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	695b      	ldr	r3, [r3, #20]
 80013b2:	2b08      	cmp	r3, #8
 80013b4:	d102      	bne.n	80013bc <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80013b6:	2308      	movs	r3, #8
 80013b8:	60fb      	str	r3, [r7, #12]
 80013ba:	e014      	b.n	80013e6 <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	68db      	ldr	r3, [r3, #12]
 80013c2:	2201      	movs	r2, #1
 80013c4:	4013      	ands	r3, r2
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d10b      	bne.n	80013e2 <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013ce:	2220      	movs	r2, #32
 80013d0:	431a      	orrs	r2, r3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	639a      	str	r2, [r3, #56]	@ 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2234      	movs	r2, #52	@ 0x34
 80013da:	2100      	movs	r1, #0
 80013dc:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e071      	b.n	80014c6 <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80013e2:	230c      	movs	r3, #12
 80013e4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80013e6:	f7ff fddb 	bl	8000fa0 <HAL_GetTick>
 80013ea:	0003      	movs	r3, r0
 80013ec:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80013ee:	e01f      	b.n	8001430 <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	3301      	adds	r3, #1
 80013f4:	d01c      	beq.n	8001430 <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d007      	beq.n	800140c <HAL_ADC_PollForConversion+0x68>
 80013fc:	f7ff fdd0 	bl	8000fa0 <HAL_GetTick>
 8001400:	0002      	movs	r2, r0
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	683a      	ldr	r2, [r7, #0]
 8001408:	429a      	cmp	r2, r3
 800140a:	d211      	bcs.n	8001430 <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	68fa      	ldr	r2, [r7, #12]
 8001414:	4013      	ands	r3, r2
 8001416:	d10b      	bne.n	8001430 <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800141c:	2204      	movs	r2, #4
 800141e:	431a      	orrs	r2, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2234      	movs	r2, #52	@ 0x34
 8001428:	2100      	movs	r1, #0
 800142a:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800142c:	2303      	movs	r3, #3
 800142e:	e04a      	b.n	80014c6 <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	68fa      	ldr	r2, [r7, #12]
 8001438:	4013      	ands	r3, r2
 800143a:	d0d9      	beq.n	80013f0 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001440:	2280      	movs	r2, #128	@ 0x80
 8001442:	0092      	lsls	r2, r2, #2
 8001444:	431a      	orrs	r2, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	68da      	ldr	r2, [r3, #12]
 8001450:	23c0      	movs	r3, #192	@ 0xc0
 8001452:	011b      	lsls	r3, r3, #4
 8001454:	4013      	ands	r3, r2
 8001456:	d12d      	bne.n	80014b4 <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800145c:	2b00      	cmp	r3, #0
 800145e:	d129      	bne.n	80014b4 <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	2208      	movs	r2, #8
 8001468:	4013      	ands	r3, r2
 800146a:	2b08      	cmp	r3, #8
 800146c:	d122      	bne.n	80014b4 <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	2204      	movs	r2, #4
 8001476:	4013      	ands	r3, r2
 8001478:	d110      	bne.n	800149c <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	685a      	ldr	r2, [r3, #4]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	210c      	movs	r1, #12
 8001486:	438a      	bics	r2, r1
 8001488:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800148e:	4a10      	ldr	r2, [pc, #64]	@ (80014d0 <HAL_ADC_PollForConversion+0x12c>)
 8001490:	4013      	ands	r3, r2
 8001492:	2201      	movs	r2, #1
 8001494:	431a      	orrs	r2, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	639a      	str	r2, [r3, #56]	@ 0x38
 800149a:	e00b      	b.n	80014b4 <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014a0:	2220      	movs	r2, #32
 80014a2:	431a      	orrs	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014ac:	2201      	movs	r2, #1
 80014ae:	431a      	orrs	r2, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	7e1b      	ldrb	r3, [r3, #24]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d103      	bne.n	80014c4 <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	220c      	movs	r2, #12
 80014c2:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	0018      	movs	r0, r3
 80014c8:	46bd      	mov	sp, r7
 80014ca:	b004      	add	sp, #16
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	46c0      	nop			@ (mov r8, r8)
 80014d0:	fffffefe 	.word	0xfffffefe

080014d4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80014e2:	0018      	movs	r0, r3
 80014e4:	46bd      	mov	sp, r7
 80014e6:	b002      	add	sp, #8
 80014e8:	bd80      	pop	{r7, pc}
	...

080014ec <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014f6:	230f      	movs	r3, #15
 80014f8:	18fb      	adds	r3, r7, r3
 80014fa:	2200      	movs	r2, #0
 80014fc:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80014fe:	2300      	movs	r3, #0
 8001500:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001506:	2380      	movs	r3, #128	@ 0x80
 8001508:	055b      	lsls	r3, r3, #21
 800150a:	429a      	cmp	r2, r3
 800150c:	d011      	beq.n	8001532 <HAL_ADC_ConfigChannel+0x46>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001512:	2b01      	cmp	r3, #1
 8001514:	d00d      	beq.n	8001532 <HAL_ADC_ConfigChannel+0x46>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800151a:	2b02      	cmp	r3, #2
 800151c:	d009      	beq.n	8001532 <HAL_ADC_ConfigChannel+0x46>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001522:	2b03      	cmp	r3, #3
 8001524:	d005      	beq.n	8001532 <HAL_ADC_ConfigChannel+0x46>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800152a:	2b04      	cmp	r3, #4
 800152c:	d001      	beq.n	8001532 <HAL_ADC_ConfigChannel+0x46>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2234      	movs	r2, #52	@ 0x34
 8001536:	5c9b      	ldrb	r3, [r3, r2]
 8001538:	2b01      	cmp	r3, #1
 800153a:	d101      	bne.n	8001540 <HAL_ADC_ConfigChannel+0x54>
 800153c:	2302      	movs	r3, #2
 800153e:	e0d0      	b.n	80016e2 <HAL_ADC_ConfigChannel+0x1f6>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2234      	movs	r2, #52	@ 0x34
 8001544:	2101      	movs	r1, #1
 8001546:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	2204      	movs	r2, #4
 8001550:	4013      	ands	r3, r2
 8001552:	d000      	beq.n	8001556 <HAL_ADC_ConfigChannel+0x6a>
 8001554:	e0b4      	b.n	80016c0 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	4a64      	ldr	r2, [pc, #400]	@ (80016ec <HAL_ADC_ConfigChannel+0x200>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d100      	bne.n	8001562 <HAL_ADC_ConfigChannel+0x76>
 8001560:	e082      	b.n	8001668 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2201      	movs	r2, #1
 800156e:	409a      	lsls	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	430a      	orrs	r2, r1
 8001576:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800157c:	2380      	movs	r3, #128	@ 0x80
 800157e:	055b      	lsls	r3, r3, #21
 8001580:	429a      	cmp	r2, r3
 8001582:	d037      	beq.n	80015f4 <HAL_ADC_ConfigChannel+0x108>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001588:	2b01      	cmp	r3, #1
 800158a:	d033      	beq.n	80015f4 <HAL_ADC_ConfigChannel+0x108>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001590:	2b02      	cmp	r3, #2
 8001592:	d02f      	beq.n	80015f4 <HAL_ADC_ConfigChannel+0x108>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001598:	2b03      	cmp	r3, #3
 800159a:	d02b      	beq.n	80015f4 <HAL_ADC_ConfigChannel+0x108>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015a0:	2b04      	cmp	r3, #4
 80015a2:	d027      	beq.n	80015f4 <HAL_ADC_ConfigChannel+0x108>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015a8:	2b05      	cmp	r3, #5
 80015aa:	d023      	beq.n	80015f4 <HAL_ADC_ConfigChannel+0x108>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015b0:	2b06      	cmp	r3, #6
 80015b2:	d01f      	beq.n	80015f4 <HAL_ADC_ConfigChannel+0x108>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015b8:	2b07      	cmp	r3, #7
 80015ba:	d01b      	beq.n	80015f4 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	689a      	ldr	r2, [r3, #8]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	695b      	ldr	r3, [r3, #20]
 80015c6:	2107      	movs	r1, #7
 80015c8:	400b      	ands	r3, r1
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d012      	beq.n	80015f4 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	695a      	ldr	r2, [r3, #20]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2107      	movs	r1, #7
 80015da:	438a      	bics	r2, r1
 80015dc:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	6959      	ldr	r1, [r3, #20]
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	2207      	movs	r2, #7
 80015ea:	401a      	ands	r2, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	430a      	orrs	r2, r1
 80015f2:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2b10      	cmp	r3, #16
 80015fa:	d007      	beq.n	800160c <HAL_ADC_ConfigChannel+0x120>
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2b11      	cmp	r3, #17
 8001602:	d003      	beq.n	800160c <HAL_ADC_ConfigChannel+0x120>
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2b12      	cmp	r3, #18
 800160a:	d163      	bne.n	80016d4 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800160c:	4b38      	ldr	r3, [pc, #224]	@ (80016f0 <HAL_ADC_ConfigChannel+0x204>)
 800160e:	6819      	ldr	r1, [r3, #0]
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2b10      	cmp	r3, #16
 8001616:	d009      	beq.n	800162c <HAL_ADC_ConfigChannel+0x140>
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2b11      	cmp	r3, #17
 800161e:	d102      	bne.n	8001626 <HAL_ADC_ConfigChannel+0x13a>
 8001620:	2380      	movs	r3, #128	@ 0x80
 8001622:	03db      	lsls	r3, r3, #15
 8001624:	e004      	b.n	8001630 <HAL_ADC_ConfigChannel+0x144>
 8001626:	2380      	movs	r3, #128	@ 0x80
 8001628:	045b      	lsls	r3, r3, #17
 800162a:	e001      	b.n	8001630 <HAL_ADC_ConfigChannel+0x144>
 800162c:	2380      	movs	r3, #128	@ 0x80
 800162e:	041b      	lsls	r3, r3, #16
 8001630:	4a2f      	ldr	r2, [pc, #188]	@ (80016f0 <HAL_ADC_ConfigChannel+0x204>)
 8001632:	430b      	orrs	r3, r1
 8001634:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	2b10      	cmp	r3, #16
 800163c:	d14a      	bne.n	80016d4 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800163e:	4b2d      	ldr	r3, [pc, #180]	@ (80016f4 <HAL_ADC_ConfigChannel+0x208>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	492d      	ldr	r1, [pc, #180]	@ (80016f8 <HAL_ADC_ConfigChannel+0x20c>)
 8001644:	0018      	movs	r0, r3
 8001646:	f7fe fd71 	bl	800012c <__udivsi3>
 800164a:	0003      	movs	r3, r0
 800164c:	001a      	movs	r2, r3
 800164e:	0013      	movs	r3, r2
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	189b      	adds	r3, r3, r2
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001658:	e002      	b.n	8001660 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	3b01      	subs	r3, #1
 800165e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d1f9      	bne.n	800165a <HAL_ADC_ConfigChannel+0x16e>
 8001666:	e035      	b.n	80016d4 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2101      	movs	r1, #1
 8001674:	4099      	lsls	r1, r3
 8001676:	000b      	movs	r3, r1
 8001678:	43d9      	mvns	r1, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	400a      	ands	r2, r1
 8001680:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2b10      	cmp	r3, #16
 8001688:	d007      	beq.n	800169a <HAL_ADC_ConfigChannel+0x1ae>
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2b11      	cmp	r3, #17
 8001690:	d003      	beq.n	800169a <HAL_ADC_ConfigChannel+0x1ae>
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	2b12      	cmp	r3, #18
 8001698:	d11c      	bne.n	80016d4 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800169a:	4b15      	ldr	r3, [pc, #84]	@ (80016f0 <HAL_ADC_ConfigChannel+0x204>)
 800169c:	6819      	ldr	r1, [r3, #0]
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2b10      	cmp	r3, #16
 80016a4:	d007      	beq.n	80016b6 <HAL_ADC_ConfigChannel+0x1ca>
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2b11      	cmp	r3, #17
 80016ac:	d101      	bne.n	80016b2 <HAL_ADC_ConfigChannel+0x1c6>
 80016ae:	4b13      	ldr	r3, [pc, #76]	@ (80016fc <HAL_ADC_ConfigChannel+0x210>)
 80016b0:	e002      	b.n	80016b8 <HAL_ADC_ConfigChannel+0x1cc>
 80016b2:	4b13      	ldr	r3, [pc, #76]	@ (8001700 <HAL_ADC_ConfigChannel+0x214>)
 80016b4:	e000      	b.n	80016b8 <HAL_ADC_ConfigChannel+0x1cc>
 80016b6:	4b13      	ldr	r3, [pc, #76]	@ (8001704 <HAL_ADC_ConfigChannel+0x218>)
 80016b8:	4a0d      	ldr	r2, [pc, #52]	@ (80016f0 <HAL_ADC_ConfigChannel+0x204>)
 80016ba:	400b      	ands	r3, r1
 80016bc:	6013      	str	r3, [r2, #0]
 80016be:	e009      	b.n	80016d4 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016c4:	2220      	movs	r2, #32
 80016c6:	431a      	orrs	r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 80016cc:	230f      	movs	r3, #15
 80016ce:	18fb      	adds	r3, r7, r3
 80016d0:	2201      	movs	r2, #1
 80016d2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2234      	movs	r2, #52	@ 0x34
 80016d8:	2100      	movs	r1, #0
 80016da:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80016dc:	230f      	movs	r3, #15
 80016de:	18fb      	adds	r3, r7, r3
 80016e0:	781b      	ldrb	r3, [r3, #0]
}
 80016e2:	0018      	movs	r0, r3
 80016e4:	46bd      	mov	sp, r7
 80016e6:	b004      	add	sp, #16
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	46c0      	nop			@ (mov r8, r8)
 80016ec:	00001001 	.word	0x00001001
 80016f0:	40012708 	.word	0x40012708
 80016f4:	20000000 	.word	0x20000000
 80016f8:	000f4240 	.word	0x000f4240
 80016fc:	ffbfffff 	.word	0xffbfffff
 8001700:	feffffff 	.word	0xfeffffff
 8001704:	ff7fffff 	.word	0xff7fffff

08001708 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001710:	2300      	movs	r3, #0
 8001712:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001714:	2300      	movs	r3, #0
 8001716:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	2203      	movs	r2, #3
 8001720:	4013      	ands	r3, r2
 8001722:	2b01      	cmp	r3, #1
 8001724:	d112      	bne.n	800174c <ADC_Enable+0x44>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2201      	movs	r2, #1
 800172e:	4013      	ands	r3, r2
 8001730:	2b01      	cmp	r3, #1
 8001732:	d009      	beq.n	8001748 <ADC_Enable+0x40>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	68da      	ldr	r2, [r3, #12]
 800173a:	2380      	movs	r3, #128	@ 0x80
 800173c:	021b      	lsls	r3, r3, #8
 800173e:	401a      	ands	r2, r3
 8001740:	2380      	movs	r3, #128	@ 0x80
 8001742:	021b      	lsls	r3, r3, #8
 8001744:	429a      	cmp	r2, r3
 8001746:	d101      	bne.n	800174c <ADC_Enable+0x44>
 8001748:	2301      	movs	r3, #1
 800174a:	e000      	b.n	800174e <ADC_Enable+0x46>
 800174c:	2300      	movs	r3, #0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d152      	bne.n	80017f8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	4a2a      	ldr	r2, [pc, #168]	@ (8001804 <ADC_Enable+0xfc>)
 800175a:	4013      	ands	r3, r2
 800175c:	d00d      	beq.n	800177a <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001762:	2210      	movs	r2, #16
 8001764:	431a      	orrs	r2, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	639a      	str	r2, [r3, #56]	@ 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800176e:	2201      	movs	r2, #1
 8001770:	431a      	orrs	r2, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e03f      	b.n	80017fa <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	689a      	ldr	r2, [r3, #8]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2101      	movs	r1, #1
 8001786:	430a      	orrs	r2, r1
 8001788:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800178a:	4b1f      	ldr	r3, [pc, #124]	@ (8001808 <ADC_Enable+0x100>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	491f      	ldr	r1, [pc, #124]	@ (800180c <ADC_Enable+0x104>)
 8001790:	0018      	movs	r0, r3
 8001792:	f7fe fccb 	bl	800012c <__udivsi3>
 8001796:	0003      	movs	r3, r0
 8001798:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800179a:	e002      	b.n	80017a2 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	3b01      	subs	r3, #1
 80017a0:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d1f9      	bne.n	800179c <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80017a8:	f7ff fbfa 	bl	8000fa0 <HAL_GetTick>
 80017ac:	0003      	movs	r3, r0
 80017ae:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80017b0:	e01b      	b.n	80017ea <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80017b2:	f7ff fbf5 	bl	8000fa0 <HAL_GetTick>
 80017b6:	0002      	movs	r2, r0
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d914      	bls.n	80017ea <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2201      	movs	r2, #1
 80017c8:	4013      	ands	r3, r2
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d00d      	beq.n	80017ea <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017d2:	2210      	movs	r2, #16
 80017d4:	431a      	orrs	r2, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017de:	2201      	movs	r2, #1
 80017e0:	431a      	orrs	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e007      	b.n	80017fa <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2201      	movs	r2, #1
 80017f2:	4013      	ands	r3, r2
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d1dc      	bne.n	80017b2 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	0018      	movs	r0, r3
 80017fc:	46bd      	mov	sp, r7
 80017fe:	b004      	add	sp, #16
 8001800:	bd80      	pop	{r7, pc}
 8001802:	46c0      	nop			@ (mov r8, r8)
 8001804:	80000017 	.word	0x80000017
 8001808:	20000000 	.word	0x20000000
 800180c:	000f4240 	.word	0x000f4240

08001810 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001818:	2300      	movs	r3, #0
 800181a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	2203      	movs	r2, #3
 8001824:	4013      	ands	r3, r2
 8001826:	2b01      	cmp	r3, #1
 8001828:	d112      	bne.n	8001850 <ADC_Disable+0x40>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2201      	movs	r2, #1
 8001832:	4013      	ands	r3, r2
 8001834:	2b01      	cmp	r3, #1
 8001836:	d009      	beq.n	800184c <ADC_Disable+0x3c>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	68da      	ldr	r2, [r3, #12]
 800183e:	2380      	movs	r3, #128	@ 0x80
 8001840:	021b      	lsls	r3, r3, #8
 8001842:	401a      	ands	r2, r3
 8001844:	2380      	movs	r3, #128	@ 0x80
 8001846:	021b      	lsls	r3, r3, #8
 8001848:	429a      	cmp	r2, r3
 800184a:	d101      	bne.n	8001850 <ADC_Disable+0x40>
 800184c:	2301      	movs	r3, #1
 800184e:	e000      	b.n	8001852 <ADC_Disable+0x42>
 8001850:	2300      	movs	r3, #0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d048      	beq.n	80018e8 <ADC_Disable+0xd8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	2205      	movs	r2, #5
 800185e:	4013      	ands	r3, r2
 8001860:	2b01      	cmp	r3, #1
 8001862:	d110      	bne.n	8001886 <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	689a      	ldr	r2, [r3, #8]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	2102      	movs	r1, #2
 8001870:	430a      	orrs	r2, r1
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2203      	movs	r2, #3
 800187a:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800187c:	f7ff fb90 	bl	8000fa0 <HAL_GetTick>
 8001880:	0003      	movs	r3, r0
 8001882:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001884:	e029      	b.n	80018da <ADC_Disable+0xca>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800188a:	2210      	movs	r2, #16
 800188c:	431a      	orrs	r2, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	639a      	str	r2, [r3, #56]	@ 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001896:	2201      	movs	r2, #1
 8001898:	431a      	orrs	r2, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	63da      	str	r2, [r3, #60]	@ 0x3c
      return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e023      	b.n	80018ea <ADC_Disable+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80018a2:	f7ff fb7d 	bl	8000fa0 <HAL_GetTick>
 80018a6:	0002      	movs	r2, r0
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d914      	bls.n	80018da <ADC_Disable+0xca>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	2201      	movs	r2, #1
 80018b8:	4013      	ands	r3, r2
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d10d      	bne.n	80018da <ADC_Disable+0xca>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018c2:	2210      	movs	r2, #16
 80018c4:	431a      	orrs	r2, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018ce:	2201      	movs	r2, #1
 80018d0:	431a      	orrs	r2, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e007      	b.n	80018ea <ADC_Disable+0xda>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	2201      	movs	r2, #1
 80018e2:	4013      	ands	r3, r2
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d0dc      	beq.n	80018a2 <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	0018      	movs	r0, r3
 80018ec:	46bd      	mov	sp, r7
 80018ee:	b004      	add	sp, #16
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b084      	sub	sp, #16
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80018fa:	2300      	movs	r3, #0
 80018fc:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	2204      	movs	r2, #4
 8001906:	4013      	ands	r3, r2
 8001908:	d03a      	beq.n	8001980 <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	2204      	movs	r2, #4
 8001912:	4013      	ands	r3, r2
 8001914:	2b04      	cmp	r3, #4
 8001916:	d10d      	bne.n	8001934 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	2202      	movs	r2, #2
 8001920:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001922:	d107      	bne.n	8001934 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	689a      	ldr	r2, [r3, #8]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2110      	movs	r1, #16
 8001930:	430a      	orrs	r2, r1
 8001932:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001934:	f7ff fb34 	bl	8000fa0 <HAL_GetTick>
 8001938:	0003      	movs	r3, r0
 800193a:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800193c:	e01a      	b.n	8001974 <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800193e:	f7ff fb2f 	bl	8000fa0 <HAL_GetTick>
 8001942:	0002      	movs	r2, r0
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	2b02      	cmp	r3, #2
 800194a:	d913      	bls.n	8001974 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	2204      	movs	r2, #4
 8001954:	4013      	ands	r3, r2
 8001956:	d00d      	beq.n	8001974 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800195c:	2210      	movs	r2, #16
 800195e:	431a      	orrs	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001968:	2201      	movs	r2, #1
 800196a:	431a      	orrs	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e006      	b.n	8001982 <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	2204      	movs	r2, #4
 800197c:	4013      	ands	r3, r2
 800197e:	d1de      	bne.n	800193e <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001980:	2300      	movs	r3, #0
}
 8001982:	0018      	movs	r0, r3
 8001984:	46bd      	mov	sp, r7
 8001986:	b004      	add	sp, #16
 8001988:	bd80      	pop	{r7, pc}
	...

0800198c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	0002      	movs	r2, r0
 8001994:	1dfb      	adds	r3, r7, #7
 8001996:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001998:	1dfb      	adds	r3, r7, #7
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	2b7f      	cmp	r3, #127	@ 0x7f
 800199e:	d809      	bhi.n	80019b4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019a0:	1dfb      	adds	r3, r7, #7
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	001a      	movs	r2, r3
 80019a6:	231f      	movs	r3, #31
 80019a8:	401a      	ands	r2, r3
 80019aa:	4b04      	ldr	r3, [pc, #16]	@ (80019bc <__NVIC_EnableIRQ+0x30>)
 80019ac:	2101      	movs	r1, #1
 80019ae:	4091      	lsls	r1, r2
 80019b0:	000a      	movs	r2, r1
 80019b2:	601a      	str	r2, [r3, #0]
  }
}
 80019b4:	46c0      	nop			@ (mov r8, r8)
 80019b6:	46bd      	mov	sp, r7
 80019b8:	b002      	add	sp, #8
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	e000e100 	.word	0xe000e100

080019c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019c0:	b590      	push	{r4, r7, lr}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	0002      	movs	r2, r0
 80019c8:	6039      	str	r1, [r7, #0]
 80019ca:	1dfb      	adds	r3, r7, #7
 80019cc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80019ce:	1dfb      	adds	r3, r7, #7
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	2b7f      	cmp	r3, #127	@ 0x7f
 80019d4:	d828      	bhi.n	8001a28 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019d6:	4a2f      	ldr	r2, [pc, #188]	@ (8001a94 <__NVIC_SetPriority+0xd4>)
 80019d8:	1dfb      	adds	r3, r7, #7
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	b25b      	sxtb	r3, r3
 80019de:	089b      	lsrs	r3, r3, #2
 80019e0:	33c0      	adds	r3, #192	@ 0xc0
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	589b      	ldr	r3, [r3, r2]
 80019e6:	1dfa      	adds	r2, r7, #7
 80019e8:	7812      	ldrb	r2, [r2, #0]
 80019ea:	0011      	movs	r1, r2
 80019ec:	2203      	movs	r2, #3
 80019ee:	400a      	ands	r2, r1
 80019f0:	00d2      	lsls	r2, r2, #3
 80019f2:	21ff      	movs	r1, #255	@ 0xff
 80019f4:	4091      	lsls	r1, r2
 80019f6:	000a      	movs	r2, r1
 80019f8:	43d2      	mvns	r2, r2
 80019fa:	401a      	ands	r2, r3
 80019fc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	019b      	lsls	r3, r3, #6
 8001a02:	22ff      	movs	r2, #255	@ 0xff
 8001a04:	401a      	ands	r2, r3
 8001a06:	1dfb      	adds	r3, r7, #7
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	0018      	movs	r0, r3
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	4003      	ands	r3, r0
 8001a10:	00db      	lsls	r3, r3, #3
 8001a12:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a14:	481f      	ldr	r0, [pc, #124]	@ (8001a94 <__NVIC_SetPriority+0xd4>)
 8001a16:	1dfb      	adds	r3, r7, #7
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	b25b      	sxtb	r3, r3
 8001a1c:	089b      	lsrs	r3, r3, #2
 8001a1e:	430a      	orrs	r2, r1
 8001a20:	33c0      	adds	r3, #192	@ 0xc0
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001a26:	e031      	b.n	8001a8c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a28:	4a1b      	ldr	r2, [pc, #108]	@ (8001a98 <__NVIC_SetPriority+0xd8>)
 8001a2a:	1dfb      	adds	r3, r7, #7
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	0019      	movs	r1, r3
 8001a30:	230f      	movs	r3, #15
 8001a32:	400b      	ands	r3, r1
 8001a34:	3b08      	subs	r3, #8
 8001a36:	089b      	lsrs	r3, r3, #2
 8001a38:	3306      	adds	r3, #6
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	18d3      	adds	r3, r2, r3
 8001a3e:	3304      	adds	r3, #4
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	1dfa      	adds	r2, r7, #7
 8001a44:	7812      	ldrb	r2, [r2, #0]
 8001a46:	0011      	movs	r1, r2
 8001a48:	2203      	movs	r2, #3
 8001a4a:	400a      	ands	r2, r1
 8001a4c:	00d2      	lsls	r2, r2, #3
 8001a4e:	21ff      	movs	r1, #255	@ 0xff
 8001a50:	4091      	lsls	r1, r2
 8001a52:	000a      	movs	r2, r1
 8001a54:	43d2      	mvns	r2, r2
 8001a56:	401a      	ands	r2, r3
 8001a58:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	019b      	lsls	r3, r3, #6
 8001a5e:	22ff      	movs	r2, #255	@ 0xff
 8001a60:	401a      	ands	r2, r3
 8001a62:	1dfb      	adds	r3, r7, #7
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	0018      	movs	r0, r3
 8001a68:	2303      	movs	r3, #3
 8001a6a:	4003      	ands	r3, r0
 8001a6c:	00db      	lsls	r3, r3, #3
 8001a6e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a70:	4809      	ldr	r0, [pc, #36]	@ (8001a98 <__NVIC_SetPriority+0xd8>)
 8001a72:	1dfb      	adds	r3, r7, #7
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	001c      	movs	r4, r3
 8001a78:	230f      	movs	r3, #15
 8001a7a:	4023      	ands	r3, r4
 8001a7c:	3b08      	subs	r3, #8
 8001a7e:	089b      	lsrs	r3, r3, #2
 8001a80:	430a      	orrs	r2, r1
 8001a82:	3306      	adds	r3, #6
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	18c3      	adds	r3, r0, r3
 8001a88:	3304      	adds	r3, #4
 8001a8a:	601a      	str	r2, [r3, #0]
}
 8001a8c:	46c0      	nop			@ (mov r8, r8)
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	b003      	add	sp, #12
 8001a92:	bd90      	pop	{r4, r7, pc}
 8001a94:	e000e100 	.word	0xe000e100
 8001a98:	e000ed00 	.word	0xe000ed00

08001a9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	1e5a      	subs	r2, r3, #1
 8001aa8:	2380      	movs	r3, #128	@ 0x80
 8001aaa:	045b      	lsls	r3, r3, #17
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d301      	bcc.n	8001ab4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e010      	b.n	8001ad6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ab4:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae0 <SysTick_Config+0x44>)
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	3a01      	subs	r2, #1
 8001aba:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001abc:	2301      	movs	r3, #1
 8001abe:	425b      	negs	r3, r3
 8001ac0:	2103      	movs	r1, #3
 8001ac2:	0018      	movs	r0, r3
 8001ac4:	f7ff ff7c 	bl	80019c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ac8:	4b05      	ldr	r3, [pc, #20]	@ (8001ae0 <SysTick_Config+0x44>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ace:	4b04      	ldr	r3, [pc, #16]	@ (8001ae0 <SysTick_Config+0x44>)
 8001ad0:	2207      	movs	r2, #7
 8001ad2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	0018      	movs	r0, r3
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	b002      	add	sp, #8
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	46c0      	nop			@ (mov r8, r8)
 8001ae0:	e000e010 	.word	0xe000e010

08001ae4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60b9      	str	r1, [r7, #8]
 8001aec:	607a      	str	r2, [r7, #4]
 8001aee:	210f      	movs	r1, #15
 8001af0:	187b      	adds	r3, r7, r1
 8001af2:	1c02      	adds	r2, r0, #0
 8001af4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001af6:	68ba      	ldr	r2, [r7, #8]
 8001af8:	187b      	adds	r3, r7, r1
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	b25b      	sxtb	r3, r3
 8001afe:	0011      	movs	r1, r2
 8001b00:	0018      	movs	r0, r3
 8001b02:	f7ff ff5d 	bl	80019c0 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8001b06:	46c0      	nop			@ (mov r8, r8)
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	b004      	add	sp, #16
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b082      	sub	sp, #8
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	0002      	movs	r2, r0
 8001b16:	1dfb      	adds	r3, r7, #7
 8001b18:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b1a:	1dfb      	adds	r3, r7, #7
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	b25b      	sxtb	r3, r3
 8001b20:	0018      	movs	r0, r3
 8001b22:	f7ff ff33 	bl	800198c <__NVIC_EnableIRQ>
}
 8001b26:	46c0      	nop			@ (mov r8, r8)
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	b002      	add	sp, #8
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b082      	sub	sp, #8
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	0018      	movs	r0, r3
 8001b3a:	f7ff ffaf 	bl	8001a9c <SysTick_Config>
 8001b3e:	0003      	movs	r3, r0
}
 8001b40:	0018      	movs	r0, r3
 8001b42:	46bd      	mov	sp, r7
 8001b44:	b002      	add	sp, #8
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2221      	movs	r2, #33	@ 0x21
 8001b54:	5c9b      	ldrb	r3, [r3, r2]
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d008      	beq.n	8001b6e <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2204      	movs	r2, #4
 8001b60:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2220      	movs	r2, #32
 8001b66:	2100      	movs	r1, #0
 8001b68:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e020      	b.n	8001bb0 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	210e      	movs	r1, #14
 8001b7a:	438a      	bics	r2, r1
 8001b7c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2101      	movs	r1, #1
 8001b8a:	438a      	bics	r2, r1
 8001b8c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b96:	2101      	movs	r1, #1
 8001b98:	4091      	lsls	r1, r2
 8001b9a:	000a      	movs	r2, r1
 8001b9c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2221      	movs	r2, #33	@ 0x21
 8001ba2:	2101      	movs	r1, #1
 8001ba4:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2220      	movs	r2, #32
 8001baa:	2100      	movs	r1, #0
 8001bac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001bae:	2300      	movs	r3, #0
}
 8001bb0:	0018      	movs	r0, r3
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	b002      	add	sp, #8
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bc0:	210f      	movs	r1, #15
 8001bc2:	187b      	adds	r3, r7, r1
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2221      	movs	r2, #33	@ 0x21
 8001bcc:	5c9b      	ldrb	r3, [r3, r2]
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d006      	beq.n	8001be2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2204      	movs	r2, #4
 8001bd8:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8001bda:	187b      	adds	r3, r7, r1
 8001bdc:	2201      	movs	r2, #1
 8001bde:	701a      	strb	r2, [r3, #0]
 8001be0:	e028      	b.n	8001c34 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	210e      	movs	r1, #14
 8001bee:	438a      	bics	r2, r1
 8001bf0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2101      	movs	r1, #1
 8001bfe:	438a      	bics	r2, r1
 8001c00:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c0a:	2101      	movs	r1, #1
 8001c0c:	4091      	lsls	r1, r2
 8001c0e:	000a      	movs	r2, r1
 8001c10:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2221      	movs	r2, #33	@ 0x21
 8001c16:	2101      	movs	r1, #1
 8001c18:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2220      	movs	r2, #32
 8001c1e:	2100      	movs	r1, #0
 8001c20:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d004      	beq.n	8001c34 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	0010      	movs	r0, r2
 8001c32:	4798      	blx	r3
    }
  }
  return status;
 8001c34:	230f      	movs	r3, #15
 8001c36:	18fb      	adds	r3, r7, r3
 8001c38:	781b      	ldrb	r3, [r3, #0]
}
 8001c3a:	0018      	movs	r0, r3
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	b004      	add	sp, #16
 8001c40:	bd80      	pop	{r7, pc}
	...

08001c44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b086      	sub	sp, #24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c52:	e149      	b.n	8001ee8 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2101      	movs	r1, #1
 8001c5a:	697a      	ldr	r2, [r7, #20]
 8001c5c:	4091      	lsls	r1, r2
 8001c5e:	000a      	movs	r2, r1
 8001c60:	4013      	ands	r3, r2
 8001c62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d100      	bne.n	8001c6c <HAL_GPIO_Init+0x28>
 8001c6a:	e13a      	b.n	8001ee2 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	2203      	movs	r2, #3
 8001c72:	4013      	ands	r3, r2
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d005      	beq.n	8001c84 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	2203      	movs	r2, #3
 8001c7e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d130      	bne.n	8001ce6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	2203      	movs	r2, #3
 8001c90:	409a      	lsls	r2, r3
 8001c92:	0013      	movs	r3, r2
 8001c94:	43da      	mvns	r2, r3
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	4013      	ands	r3, r2
 8001c9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	68da      	ldr	r2, [r3, #12]
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	409a      	lsls	r2, r3
 8001ca6:	0013      	movs	r3, r2
 8001ca8:	693a      	ldr	r2, [r7, #16]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	693a      	ldr	r2, [r7, #16]
 8001cb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cba:	2201      	movs	r2, #1
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	409a      	lsls	r2, r3
 8001cc0:	0013      	movs	r3, r2
 8001cc2:	43da      	mvns	r2, r3
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	091b      	lsrs	r3, r3, #4
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	401a      	ands	r2, r3
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	409a      	lsls	r2, r3
 8001cd8:	0013      	movs	r3, r2
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	2203      	movs	r2, #3
 8001cec:	4013      	ands	r3, r2
 8001cee:	2b03      	cmp	r3, #3
 8001cf0:	d017      	beq.n	8001d22 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	2203      	movs	r2, #3
 8001cfe:	409a      	lsls	r2, r3
 8001d00:	0013      	movs	r3, r2
 8001d02:	43da      	mvns	r2, r3
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	4013      	ands	r3, r2
 8001d08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	689a      	ldr	r2, [r3, #8]
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	409a      	lsls	r2, r3
 8001d14:	0013      	movs	r3, r2
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	693a      	ldr	r2, [r7, #16]
 8001d20:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	2203      	movs	r2, #3
 8001d28:	4013      	ands	r3, r2
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d123      	bne.n	8001d76 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	08da      	lsrs	r2, r3, #3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	3208      	adds	r2, #8
 8001d36:	0092      	lsls	r2, r2, #2
 8001d38:	58d3      	ldr	r3, [r2, r3]
 8001d3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	2207      	movs	r2, #7
 8001d40:	4013      	ands	r3, r2
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	220f      	movs	r2, #15
 8001d46:	409a      	lsls	r2, r3
 8001d48:	0013      	movs	r3, r2
 8001d4a:	43da      	mvns	r2, r3
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	691a      	ldr	r2, [r3, #16]
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	2107      	movs	r1, #7
 8001d5a:	400b      	ands	r3, r1
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	409a      	lsls	r2, r3
 8001d60:	0013      	movs	r3, r2
 8001d62:	693a      	ldr	r2, [r7, #16]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	08da      	lsrs	r2, r3, #3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	3208      	adds	r2, #8
 8001d70:	0092      	lsls	r2, r2, #2
 8001d72:	6939      	ldr	r1, [r7, #16]
 8001d74:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	2203      	movs	r2, #3
 8001d82:	409a      	lsls	r2, r3
 8001d84:	0013      	movs	r3, r2
 8001d86:	43da      	mvns	r2, r3
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	2203      	movs	r2, #3
 8001d94:	401a      	ands	r2, r3
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	409a      	lsls	r2, r3
 8001d9c:	0013      	movs	r3, r2
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	685a      	ldr	r2, [r3, #4]
 8001dae:	23c0      	movs	r3, #192	@ 0xc0
 8001db0:	029b      	lsls	r3, r3, #10
 8001db2:	4013      	ands	r3, r2
 8001db4:	d100      	bne.n	8001db8 <HAL_GPIO_Init+0x174>
 8001db6:	e094      	b.n	8001ee2 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001db8:	4b51      	ldr	r3, [pc, #324]	@ (8001f00 <HAL_GPIO_Init+0x2bc>)
 8001dba:	699a      	ldr	r2, [r3, #24]
 8001dbc:	4b50      	ldr	r3, [pc, #320]	@ (8001f00 <HAL_GPIO_Init+0x2bc>)
 8001dbe:	2101      	movs	r1, #1
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	619a      	str	r2, [r3, #24]
 8001dc4:	4b4e      	ldr	r3, [pc, #312]	@ (8001f00 <HAL_GPIO_Init+0x2bc>)
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	4013      	ands	r3, r2
 8001dcc:	60bb      	str	r3, [r7, #8]
 8001dce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001dd0:	4a4c      	ldr	r2, [pc, #304]	@ (8001f04 <HAL_GPIO_Init+0x2c0>)
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	089b      	lsrs	r3, r3, #2
 8001dd6:	3302      	adds	r3, #2
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	589b      	ldr	r3, [r3, r2]
 8001ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	2203      	movs	r2, #3
 8001de2:	4013      	ands	r3, r2
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	220f      	movs	r2, #15
 8001de8:	409a      	lsls	r2, r3
 8001dea:	0013      	movs	r3, r2
 8001dec:	43da      	mvns	r2, r3
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	4013      	ands	r3, r2
 8001df2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	2390      	movs	r3, #144	@ 0x90
 8001df8:	05db      	lsls	r3, r3, #23
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d00d      	beq.n	8001e1a <HAL_GPIO_Init+0x1d6>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a41      	ldr	r2, [pc, #260]	@ (8001f08 <HAL_GPIO_Init+0x2c4>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d007      	beq.n	8001e16 <HAL_GPIO_Init+0x1d2>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a40      	ldr	r2, [pc, #256]	@ (8001f0c <HAL_GPIO_Init+0x2c8>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d101      	bne.n	8001e12 <HAL_GPIO_Init+0x1ce>
 8001e0e:	2302      	movs	r3, #2
 8001e10:	e004      	b.n	8001e1c <HAL_GPIO_Init+0x1d8>
 8001e12:	2305      	movs	r3, #5
 8001e14:	e002      	b.n	8001e1c <HAL_GPIO_Init+0x1d8>
 8001e16:	2301      	movs	r3, #1
 8001e18:	e000      	b.n	8001e1c <HAL_GPIO_Init+0x1d8>
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	697a      	ldr	r2, [r7, #20]
 8001e1e:	2103      	movs	r1, #3
 8001e20:	400a      	ands	r2, r1
 8001e22:	0092      	lsls	r2, r2, #2
 8001e24:	4093      	lsls	r3, r2
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e2c:	4935      	ldr	r1, [pc, #212]	@ (8001f04 <HAL_GPIO_Init+0x2c0>)
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	089b      	lsrs	r3, r3, #2
 8001e32:	3302      	adds	r3, #2
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e3a:	4b35      	ldr	r3, [pc, #212]	@ (8001f10 <HAL_GPIO_Init+0x2cc>)
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	43da      	mvns	r2, r3
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	4013      	ands	r3, r2
 8001e48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685a      	ldr	r2, [r3, #4]
 8001e4e:	2380      	movs	r3, #128	@ 0x80
 8001e50:	035b      	lsls	r3, r3, #13
 8001e52:	4013      	ands	r3, r2
 8001e54:	d003      	beq.n	8001e5e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001e5e:	4b2c      	ldr	r3, [pc, #176]	@ (8001f10 <HAL_GPIO_Init+0x2cc>)
 8001e60:	693a      	ldr	r2, [r7, #16]
 8001e62:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001e64:	4b2a      	ldr	r3, [pc, #168]	@ (8001f10 <HAL_GPIO_Init+0x2cc>)
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	43da      	mvns	r2, r3
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	4013      	ands	r3, r2
 8001e72:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685a      	ldr	r2, [r3, #4]
 8001e78:	2380      	movs	r3, #128	@ 0x80
 8001e7a:	039b      	lsls	r3, r3, #14
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	d003      	beq.n	8001e88 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001e80:	693a      	ldr	r2, [r7, #16]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001e88:	4b21      	ldr	r3, [pc, #132]	@ (8001f10 <HAL_GPIO_Init+0x2cc>)
 8001e8a:	693a      	ldr	r2, [r7, #16]
 8001e8c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001e8e:	4b20      	ldr	r3, [pc, #128]	@ (8001f10 <HAL_GPIO_Init+0x2cc>)
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	43da      	mvns	r2, r3
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685a      	ldr	r2, [r3, #4]
 8001ea2:	2380      	movs	r3, #128	@ 0x80
 8001ea4:	029b      	lsls	r3, r3, #10
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	d003      	beq.n	8001eb2 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001eaa:	693a      	ldr	r2, [r7, #16]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001eb2:	4b17      	ldr	r3, [pc, #92]	@ (8001f10 <HAL_GPIO_Init+0x2cc>)
 8001eb4:	693a      	ldr	r2, [r7, #16]
 8001eb6:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001eb8:	4b15      	ldr	r3, [pc, #84]	@ (8001f10 <HAL_GPIO_Init+0x2cc>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	43da      	mvns	r2, r3
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685a      	ldr	r2, [r3, #4]
 8001ecc:	2380      	movs	r3, #128	@ 0x80
 8001ece:	025b      	lsls	r3, r3, #9
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	d003      	beq.n	8001edc <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8001ed4:	693a      	ldr	r2, [r7, #16]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001edc:	4b0c      	ldr	r3, [pc, #48]	@ (8001f10 <HAL_GPIO_Init+0x2cc>)
 8001ede:	693a      	ldr	r2, [r7, #16]
 8001ee0:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	40da      	lsrs	r2, r3
 8001ef0:	1e13      	subs	r3, r2, #0
 8001ef2:	d000      	beq.n	8001ef6 <HAL_GPIO_Init+0x2b2>
 8001ef4:	e6ae      	b.n	8001c54 <HAL_GPIO_Init+0x10>
  } 
}
 8001ef6:	46c0      	nop			@ (mov r8, r8)
 8001ef8:	46c0      	nop			@ (mov r8, r8)
 8001efa:	46bd      	mov	sp, r7
 8001efc:	b006      	add	sp, #24
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40021000 	.word	0x40021000
 8001f04:	40010000 	.word	0x40010000
 8001f08:	48000400 	.word	0x48000400
 8001f0c:	48000800 	.word	0x48000800
 8001f10:	40010400 	.word	0x40010400

08001f14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	0008      	movs	r0, r1
 8001f1e:	0011      	movs	r1, r2
 8001f20:	1cbb      	adds	r3, r7, #2
 8001f22:	1c02      	adds	r2, r0, #0
 8001f24:	801a      	strh	r2, [r3, #0]
 8001f26:	1c7b      	adds	r3, r7, #1
 8001f28:	1c0a      	adds	r2, r1, #0
 8001f2a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f2c:	1c7b      	adds	r3, r7, #1
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d004      	beq.n	8001f3e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f34:	1cbb      	adds	r3, r7, #2
 8001f36:	881a      	ldrh	r2, [r3, #0]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f3c:	e003      	b.n	8001f46 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f3e:	1cbb      	adds	r3, r7, #2
 8001f40:	881a      	ldrh	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001f46:	46c0      	nop			@ (mov r8, r8)
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	b002      	add	sp, #8
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b084      	sub	sp, #16
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
 8001f56:	000a      	movs	r2, r1
 8001f58:	1cbb      	adds	r3, r7, #2
 8001f5a:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	695b      	ldr	r3, [r3, #20]
 8001f60:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f62:	1cbb      	adds	r3, r7, #2
 8001f64:	881b      	ldrh	r3, [r3, #0]
 8001f66:	68fa      	ldr	r2, [r7, #12]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	041a      	lsls	r2, r3, #16
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	43db      	mvns	r3, r3
 8001f70:	1cb9      	adds	r1, r7, #2
 8001f72:	8809      	ldrh	r1, [r1, #0]
 8001f74:	400b      	ands	r3, r1
 8001f76:	431a      	orrs	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	619a      	str	r2, [r3, #24]
}
 8001f7c:	46c0      	nop			@ (mov r8, r8)
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	b004      	add	sp, #16
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d101      	bne.n	8001f96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e08f      	b.n	80020b6 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2241      	movs	r2, #65	@ 0x41
 8001f9a:	5c9b      	ldrb	r3, [r3, r2]
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d107      	bne.n	8001fb2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2240      	movs	r2, #64	@ 0x40
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	0018      	movs	r0, r3
 8001fae:	f7fe fbbd 	bl	800072c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2241      	movs	r2, #65	@ 0x41
 8001fb6:	2124      	movs	r1, #36	@ 0x24
 8001fb8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2101      	movs	r1, #1
 8001fc6:	438a      	bics	r2, r1
 8001fc8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685a      	ldr	r2, [r3, #4]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	493b      	ldr	r1, [pc, #236]	@ (80020c0 <HAL_I2C_Init+0x13c>)
 8001fd4:	400a      	ands	r2, r1
 8001fd6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	689a      	ldr	r2, [r3, #8]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4938      	ldr	r1, [pc, #224]	@ (80020c4 <HAL_I2C_Init+0x140>)
 8001fe4:	400a      	ands	r2, r1
 8001fe6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d108      	bne.n	8002002 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689a      	ldr	r2, [r3, #8]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2180      	movs	r1, #128	@ 0x80
 8001ffa:	0209      	lsls	r1, r1, #8
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	609a      	str	r2, [r3, #8]
 8002000:	e007      	b.n	8002012 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	689a      	ldr	r2, [r3, #8]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	2184      	movs	r1, #132	@ 0x84
 800200c:	0209      	lsls	r1, r1, #8
 800200e:	430a      	orrs	r2, r1
 8002010:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	2b02      	cmp	r3, #2
 8002018:	d109      	bne.n	800202e <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	685a      	ldr	r2, [r3, #4]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2180      	movs	r1, #128	@ 0x80
 8002026:	0109      	lsls	r1, r1, #4
 8002028:	430a      	orrs	r2, r1
 800202a:	605a      	str	r2, [r3, #4]
 800202c:	e007      	b.n	800203e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	685a      	ldr	r2, [r3, #4]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4923      	ldr	r1, [pc, #140]	@ (80020c8 <HAL_I2C_Init+0x144>)
 800203a:	400a      	ands	r2, r1
 800203c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	685a      	ldr	r2, [r3, #4]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4920      	ldr	r1, [pc, #128]	@ (80020cc <HAL_I2C_Init+0x148>)
 800204a:	430a      	orrs	r2, r1
 800204c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	68da      	ldr	r2, [r3, #12]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	491a      	ldr	r1, [pc, #104]	@ (80020c4 <HAL_I2C_Init+0x140>)
 800205a:	400a      	ands	r2, r1
 800205c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	691a      	ldr	r2, [r3, #16]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	695b      	ldr	r3, [r3, #20]
 8002066:	431a      	orrs	r2, r3
 8002068:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	699b      	ldr	r3, [r3, #24]
 800206e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	430a      	orrs	r2, r1
 8002076:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	69d9      	ldr	r1, [r3, #28]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6a1a      	ldr	r2, [r3, #32]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	430a      	orrs	r2, r1
 8002086:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2101      	movs	r1, #1
 8002094:	430a      	orrs	r2, r1
 8002096:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2241      	movs	r2, #65	@ 0x41
 80020a2:	2120      	movs	r1, #32
 80020a4:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2242      	movs	r2, #66	@ 0x42
 80020b0:	2100      	movs	r1, #0
 80020b2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	0018      	movs	r0, r3
 80020b8:	46bd      	mov	sp, r7
 80020ba:	b002      	add	sp, #8
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	46c0      	nop			@ (mov r8, r8)
 80020c0:	f0ffffff 	.word	0xf0ffffff
 80020c4:	ffff7fff 	.word	0xffff7fff
 80020c8:	fffff7ff 	.word	0xfffff7ff
 80020cc:	02008000 	.word	0x02008000

080020d0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2241      	movs	r2, #65	@ 0x41
 80020de:	5c9b      	ldrb	r3, [r3, r2]
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	2b20      	cmp	r3, #32
 80020e4:	d138      	bne.n	8002158 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2240      	movs	r2, #64	@ 0x40
 80020ea:	5c9b      	ldrb	r3, [r3, r2]
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d101      	bne.n	80020f4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80020f0:	2302      	movs	r3, #2
 80020f2:	e032      	b.n	800215a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2240      	movs	r2, #64	@ 0x40
 80020f8:	2101      	movs	r1, #1
 80020fa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2241      	movs	r2, #65	@ 0x41
 8002100:	2124      	movs	r1, #36	@ 0x24
 8002102:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	2101      	movs	r1, #1
 8002110:	438a      	bics	r2, r1
 8002112:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4911      	ldr	r1, [pc, #68]	@ (8002164 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002120:	400a      	ands	r2, r1
 8002122:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	6819      	ldr	r1, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	683a      	ldr	r2, [r7, #0]
 8002130:	430a      	orrs	r2, r1
 8002132:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	2101      	movs	r1, #1
 8002140:	430a      	orrs	r2, r1
 8002142:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2241      	movs	r2, #65	@ 0x41
 8002148:	2120      	movs	r1, #32
 800214a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2240      	movs	r2, #64	@ 0x40
 8002150:	2100      	movs	r1, #0
 8002152:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002154:	2300      	movs	r3, #0
 8002156:	e000      	b.n	800215a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002158:	2302      	movs	r3, #2
  }
}
 800215a:	0018      	movs	r0, r3
 800215c:	46bd      	mov	sp, r7
 800215e:	b002      	add	sp, #8
 8002160:	bd80      	pop	{r7, pc}
 8002162:	46c0      	nop			@ (mov r8, r8)
 8002164:	ffffefff 	.word	0xffffefff

08002168 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2241      	movs	r2, #65	@ 0x41
 8002176:	5c9b      	ldrb	r3, [r3, r2]
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2b20      	cmp	r3, #32
 800217c:	d139      	bne.n	80021f2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2240      	movs	r2, #64	@ 0x40
 8002182:	5c9b      	ldrb	r3, [r3, r2]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d101      	bne.n	800218c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002188:	2302      	movs	r3, #2
 800218a:	e033      	b.n	80021f4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2240      	movs	r2, #64	@ 0x40
 8002190:	2101      	movs	r1, #1
 8002192:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2241      	movs	r2, #65	@ 0x41
 8002198:	2124      	movs	r1, #36	@ 0x24
 800219a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	2101      	movs	r1, #1
 80021a8:	438a      	bics	r2, r1
 80021aa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	4a11      	ldr	r2, [pc, #68]	@ (80021fc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80021b8:	4013      	ands	r3, r2
 80021ba:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	021b      	lsls	r3, r3, #8
 80021c0:	68fa      	ldr	r2, [r7, #12]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	68fa      	ldr	r2, [r7, #12]
 80021cc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2101      	movs	r1, #1
 80021da:	430a      	orrs	r2, r1
 80021dc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2241      	movs	r2, #65	@ 0x41
 80021e2:	2120      	movs	r1, #32
 80021e4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2240      	movs	r2, #64	@ 0x40
 80021ea:	2100      	movs	r1, #0
 80021ec:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80021ee:	2300      	movs	r3, #0
 80021f0:	e000      	b.n	80021f4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80021f2:	2302      	movs	r3, #2
  }
}
 80021f4:	0018      	movs	r0, r3
 80021f6:	46bd      	mov	sp, r7
 80021f8:	b004      	add	sp, #16
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	fffff0ff 	.word	0xfffff0ff

08002200 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002200:	b590      	push	{r4, r7, lr}
 8002202:	b085      	sub	sp, #20
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d101      	bne.n	8002212 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e0e4      	b.n	80023dc <HAL_PCD_Init+0x1dc>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a73      	ldr	r2, [pc, #460]	@ (80023e4 <HAL_PCD_Init+0x1e4>)
 8002216:	5c9b      	ldrb	r3, [r3, r2]
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b00      	cmp	r3, #0
 800221c:	d108      	bne.n	8002230 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	23a4      	movs	r3, #164	@ 0xa4
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	2100      	movs	r1, #0
 8002226:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	0018      	movs	r0, r3
 800222c:	f7fe fdfc 	bl	8000e28 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	4a6c      	ldr	r2, [pc, #432]	@ (80023e4 <HAL_PCD_Init+0x1e4>)
 8002234:	2103      	movs	r1, #3
 8002236:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	0018      	movs	r0, r3
 800223e:	f001 ff3f 	bl	80040c0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002242:	230f      	movs	r3, #15
 8002244:	18fb      	adds	r3, r7, r3
 8002246:	2200      	movs	r2, #0
 8002248:	701a      	strb	r2, [r3, #0]
 800224a:	e047      	b.n	80022dc <HAL_PCD_Init+0xdc>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800224c:	200f      	movs	r0, #15
 800224e:	183b      	adds	r3, r7, r0
 8002250:	781a      	ldrb	r2, [r3, #0]
 8002252:	6879      	ldr	r1, [r7, #4]
 8002254:	0013      	movs	r3, r2
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	189b      	adds	r3, r3, r2
 800225a:	00db      	lsls	r3, r3, #3
 800225c:	18cb      	adds	r3, r1, r3
 800225e:	3311      	adds	r3, #17
 8002260:	2201      	movs	r2, #1
 8002262:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002264:	183b      	adds	r3, r7, r0
 8002266:	781a      	ldrb	r2, [r3, #0]
 8002268:	6879      	ldr	r1, [r7, #4]
 800226a:	0013      	movs	r3, r2
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	189b      	adds	r3, r3, r2
 8002270:	00db      	lsls	r3, r3, #3
 8002272:	18cb      	adds	r3, r1, r3
 8002274:	3310      	adds	r3, #16
 8002276:	183a      	adds	r2, r7, r0
 8002278:	7812      	ldrb	r2, [r2, #0]
 800227a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800227c:	183b      	adds	r3, r7, r0
 800227e:	781a      	ldrb	r2, [r3, #0]
 8002280:	6879      	ldr	r1, [r7, #4]
 8002282:	0013      	movs	r3, r2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	189b      	adds	r3, r3, r2
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	18cb      	adds	r3, r1, r3
 800228c:	3313      	adds	r3, #19
 800228e:	2200      	movs	r2, #0
 8002290:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002292:	183b      	adds	r3, r7, r0
 8002294:	781a      	ldrb	r2, [r3, #0]
 8002296:	6879      	ldr	r1, [r7, #4]
 8002298:	0013      	movs	r3, r2
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	189b      	adds	r3, r3, r2
 800229e:	00db      	lsls	r3, r3, #3
 80022a0:	18cb      	adds	r3, r1, r3
 80022a2:	3320      	adds	r3, #32
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80022a8:	183b      	adds	r3, r7, r0
 80022aa:	781a      	ldrb	r2, [r3, #0]
 80022ac:	6879      	ldr	r1, [r7, #4]
 80022ae:	0013      	movs	r3, r2
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	189b      	adds	r3, r3, r2
 80022b4:	00db      	lsls	r3, r3, #3
 80022b6:	18cb      	adds	r3, r1, r3
 80022b8:	3324      	adds	r3, #36	@ 0x24
 80022ba:	2200      	movs	r2, #0
 80022bc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80022be:	183b      	adds	r3, r7, r0
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	6879      	ldr	r1, [r7, #4]
 80022c4:	1c5a      	adds	r2, r3, #1
 80022c6:	0013      	movs	r3, r2
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	189b      	adds	r3, r3, r2
 80022cc:	00db      	lsls	r3, r3, #3
 80022ce:	2200      	movs	r2, #0
 80022d0:	505a      	str	r2, [r3, r1]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022d2:	183b      	adds	r3, r7, r0
 80022d4:	781a      	ldrb	r2, [r3, #0]
 80022d6:	183b      	adds	r3, r7, r0
 80022d8:	3201      	adds	r2, #1
 80022da:	701a      	strb	r2, [r3, #0]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	791b      	ldrb	r3, [r3, #4]
 80022e0:	210f      	movs	r1, #15
 80022e2:	187a      	adds	r2, r7, r1
 80022e4:	7812      	ldrb	r2, [r2, #0]
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d3b0      	bcc.n	800224c <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022ea:	187b      	adds	r3, r7, r1
 80022ec:	2200      	movs	r2, #0
 80022ee:	701a      	strb	r2, [r3, #0]
 80022f0:	e056      	b.n	80023a0 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80022f2:	240f      	movs	r4, #15
 80022f4:	193b      	adds	r3, r7, r4
 80022f6:	781a      	ldrb	r2, [r3, #0]
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	2352      	movs	r3, #82	@ 0x52
 80022fc:	33ff      	adds	r3, #255	@ 0xff
 80022fe:	0019      	movs	r1, r3
 8002300:	0013      	movs	r3, r2
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	189b      	adds	r3, r3, r2
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	18c3      	adds	r3, r0, r3
 800230a:	185b      	adds	r3, r3, r1
 800230c:	2200      	movs	r2, #0
 800230e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002310:	193b      	adds	r3, r7, r4
 8002312:	781a      	ldrb	r2, [r3, #0]
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	23a8      	movs	r3, #168	@ 0xa8
 8002318:	0059      	lsls	r1, r3, #1
 800231a:	0013      	movs	r3, r2
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	189b      	adds	r3, r3, r2
 8002320:	00db      	lsls	r3, r3, #3
 8002322:	18c3      	adds	r3, r0, r3
 8002324:	185b      	adds	r3, r3, r1
 8002326:	193a      	adds	r2, r7, r4
 8002328:	7812      	ldrb	r2, [r2, #0]
 800232a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800232c:	193b      	adds	r3, r7, r4
 800232e:	781a      	ldrb	r2, [r3, #0]
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	2354      	movs	r3, #84	@ 0x54
 8002334:	33ff      	adds	r3, #255	@ 0xff
 8002336:	0019      	movs	r1, r3
 8002338:	0013      	movs	r3, r2
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	189b      	adds	r3, r3, r2
 800233e:	00db      	lsls	r3, r3, #3
 8002340:	18c3      	adds	r3, r0, r3
 8002342:	185b      	adds	r3, r3, r1
 8002344:	2200      	movs	r2, #0
 8002346:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002348:	193b      	adds	r3, r7, r4
 800234a:	781a      	ldrb	r2, [r3, #0]
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	23b0      	movs	r3, #176	@ 0xb0
 8002350:	0059      	lsls	r1, r3, #1
 8002352:	0013      	movs	r3, r2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	189b      	adds	r3, r3, r2
 8002358:	00db      	lsls	r3, r3, #3
 800235a:	18c3      	adds	r3, r0, r3
 800235c:	185b      	adds	r3, r3, r1
 800235e:	2200      	movs	r2, #0
 8002360:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002362:	193b      	adds	r3, r7, r4
 8002364:	781a      	ldrb	r2, [r3, #0]
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	23b2      	movs	r3, #178	@ 0xb2
 800236a:	0059      	lsls	r1, r3, #1
 800236c:	0013      	movs	r3, r2
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	189b      	adds	r3, r3, r2
 8002372:	00db      	lsls	r3, r3, #3
 8002374:	18c3      	adds	r3, r0, r3
 8002376:	185b      	adds	r3, r3, r1
 8002378:	2200      	movs	r2, #0
 800237a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800237c:	193b      	adds	r3, r7, r4
 800237e:	781a      	ldrb	r2, [r3, #0]
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	23b4      	movs	r3, #180	@ 0xb4
 8002384:	0059      	lsls	r1, r3, #1
 8002386:	0013      	movs	r3, r2
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	189b      	adds	r3, r3, r2
 800238c:	00db      	lsls	r3, r3, #3
 800238e:	18c3      	adds	r3, r0, r3
 8002390:	185b      	adds	r3, r3, r1
 8002392:	2200      	movs	r2, #0
 8002394:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002396:	193b      	adds	r3, r7, r4
 8002398:	781a      	ldrb	r2, [r3, #0]
 800239a:	193b      	adds	r3, r7, r4
 800239c:	3201      	adds	r2, #1
 800239e:	701a      	strb	r2, [r3, #0]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	791b      	ldrb	r3, [r3, #4]
 80023a4:	220f      	movs	r2, #15
 80023a6:	18ba      	adds	r2, r7, r2
 80023a8:	7812      	ldrb	r2, [r2, #0]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d3a1      	bcc.n	80022f2 <HAL_PCD_Init+0xf2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6818      	ldr	r0, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6859      	ldr	r1, [r3, #4]
 80023b6:	689a      	ldr	r2, [r3, #8]
 80023b8:	f001 fe9c 	bl	80040f4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a07      	ldr	r2, [pc, #28]	@ (80023e4 <HAL_PCD_Init+0x1e4>)
 80023c6:	2101      	movs	r1, #1
 80023c8:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	7a9b      	ldrb	r3, [r3, #10]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d103      	bne.n	80023da <HAL_PCD_Init+0x1da>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	0018      	movs	r0, r3
 80023d6:	f000 f807 	bl	80023e8 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80023da:	2300      	movs	r3, #0
}
 80023dc:	0018      	movs	r0, r3
 80023de:	46bd      	mov	sp, r7
 80023e0:	b005      	add	sp, #20
 80023e2:	bd90      	pop	{r4, r7, pc}
 80023e4:	00000291 	.word	0x00000291

080023e8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	23b4      	movs	r3, #180	@ 0xb4
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	2101      	movs	r1, #1
 80023fe:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	23b2      	movs	r3, #178	@ 0xb2
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	2100      	movs	r1, #0
 8002408:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2254      	movs	r2, #84	@ 0x54
 800240e:	5a9b      	ldrh	r3, [r3, r2]
 8002410:	b29b      	uxth	r3, r3
 8002412:	2201      	movs	r2, #1
 8002414:	4313      	orrs	r3, r2
 8002416:	b299      	uxth	r1, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2254      	movs	r2, #84	@ 0x54
 800241c:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2254      	movs	r2, #84	@ 0x54
 8002422:	5a9b      	ldrh	r3, [r3, r2]
 8002424:	b29b      	uxth	r3, r3
 8002426:	2202      	movs	r2, #2
 8002428:	4313      	orrs	r3, r2
 800242a:	b299      	uxth	r1, r3
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2254      	movs	r2, #84	@ 0x54
 8002430:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8002432:	2300      	movs	r3, #0
}
 8002434:	0018      	movs	r0, r3
 8002436:	46bd      	mov	sp, r7
 8002438:	b004      	add	sp, #16
 800243a:	bd80      	pop	{r7, pc}

0800243c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b088      	sub	sp, #32
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d102      	bne.n	8002450 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	f000 fb76 	bl	8002b3c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2201      	movs	r2, #1
 8002456:	4013      	ands	r3, r2
 8002458:	d100      	bne.n	800245c <HAL_RCC_OscConfig+0x20>
 800245a:	e08e      	b.n	800257a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800245c:	4bc5      	ldr	r3, [pc, #788]	@ (8002774 <HAL_RCC_OscConfig+0x338>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	220c      	movs	r2, #12
 8002462:	4013      	ands	r3, r2
 8002464:	2b04      	cmp	r3, #4
 8002466:	d00e      	beq.n	8002486 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002468:	4bc2      	ldr	r3, [pc, #776]	@ (8002774 <HAL_RCC_OscConfig+0x338>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	220c      	movs	r2, #12
 800246e:	4013      	ands	r3, r2
 8002470:	2b08      	cmp	r3, #8
 8002472:	d117      	bne.n	80024a4 <HAL_RCC_OscConfig+0x68>
 8002474:	4bbf      	ldr	r3, [pc, #764]	@ (8002774 <HAL_RCC_OscConfig+0x338>)
 8002476:	685a      	ldr	r2, [r3, #4]
 8002478:	23c0      	movs	r3, #192	@ 0xc0
 800247a:	025b      	lsls	r3, r3, #9
 800247c:	401a      	ands	r2, r3
 800247e:	2380      	movs	r3, #128	@ 0x80
 8002480:	025b      	lsls	r3, r3, #9
 8002482:	429a      	cmp	r2, r3
 8002484:	d10e      	bne.n	80024a4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002486:	4bbb      	ldr	r3, [pc, #748]	@ (8002774 <HAL_RCC_OscConfig+0x338>)
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	2380      	movs	r3, #128	@ 0x80
 800248c:	029b      	lsls	r3, r3, #10
 800248e:	4013      	ands	r3, r2
 8002490:	d100      	bne.n	8002494 <HAL_RCC_OscConfig+0x58>
 8002492:	e071      	b.n	8002578 <HAL_RCC_OscConfig+0x13c>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d000      	beq.n	800249e <HAL_RCC_OscConfig+0x62>
 800249c:	e06c      	b.n	8002578 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	f000 fb4c 	bl	8002b3c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d107      	bne.n	80024bc <HAL_RCC_OscConfig+0x80>
 80024ac:	4bb1      	ldr	r3, [pc, #708]	@ (8002774 <HAL_RCC_OscConfig+0x338>)
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	4bb0      	ldr	r3, [pc, #704]	@ (8002774 <HAL_RCC_OscConfig+0x338>)
 80024b2:	2180      	movs	r1, #128	@ 0x80
 80024b4:	0249      	lsls	r1, r1, #9
 80024b6:	430a      	orrs	r2, r1
 80024b8:	601a      	str	r2, [r3, #0]
 80024ba:	e02f      	b.n	800251c <HAL_RCC_OscConfig+0xe0>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d10c      	bne.n	80024de <HAL_RCC_OscConfig+0xa2>
 80024c4:	4bab      	ldr	r3, [pc, #684]	@ (8002774 <HAL_RCC_OscConfig+0x338>)
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	4baa      	ldr	r3, [pc, #680]	@ (8002774 <HAL_RCC_OscConfig+0x338>)
 80024ca:	49ab      	ldr	r1, [pc, #684]	@ (8002778 <HAL_RCC_OscConfig+0x33c>)
 80024cc:	400a      	ands	r2, r1
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	4ba8      	ldr	r3, [pc, #672]	@ (8002774 <HAL_RCC_OscConfig+0x338>)
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	4ba7      	ldr	r3, [pc, #668]	@ (8002774 <HAL_RCC_OscConfig+0x338>)
 80024d6:	49a9      	ldr	r1, [pc, #676]	@ (800277c <HAL_RCC_OscConfig+0x340>)
 80024d8:	400a      	ands	r2, r1
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	e01e      	b.n	800251c <HAL_RCC_OscConfig+0xe0>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	2b05      	cmp	r3, #5
 80024e4:	d10e      	bne.n	8002504 <HAL_RCC_OscConfig+0xc8>
 80024e6:	4ba3      	ldr	r3, [pc, #652]	@ (8002774 <HAL_RCC_OscConfig+0x338>)
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	4ba2      	ldr	r3, [pc, #648]	@ (8002774 <HAL_RCC_OscConfig+0x338>)
 80024ec:	2180      	movs	r1, #128	@ 0x80
 80024ee:	02c9      	lsls	r1, r1, #11
 80024f0:	430a      	orrs	r2, r1
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	4b9f      	ldr	r3, [pc, #636]	@ (8002774 <HAL_RCC_OscConfig+0x338>)
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	4b9e      	ldr	r3, [pc, #632]	@ (8002774 <HAL_RCC_OscConfig+0x338>)
 80024fa:	2180      	movs	r1, #128	@ 0x80
 80024fc:	0249      	lsls	r1, r1, #9
 80024fe:	430a      	orrs	r2, r1
 8002500:	601a      	str	r2, [r3, #0]
 8002502:	e00b      	b.n	800251c <HAL_RCC_OscConfig+0xe0>
 8002504:	4b9b      	ldr	r3, [pc, #620]	@ (8002774 <HAL_RCC_OscConfig+0x338>)
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	4b9a      	ldr	r3, [pc, #616]	@ (8002774 <HAL_RCC_OscConfig+0x338>)
 800250a:	499b      	ldr	r1, [pc, #620]	@ (8002778 <HAL_RCC_OscConfig+0x33c>)
 800250c:	400a      	ands	r2, r1
 800250e:	601a      	str	r2, [r3, #0]
 8002510:	4b98      	ldr	r3, [pc, #608]	@ (8002774 <HAL_RCC_OscConfig+0x338>)
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	4b97      	ldr	r3, [pc, #604]	@ (8002774 <HAL_RCC_OscConfig+0x338>)
 8002516:	4999      	ldr	r1, [pc, #612]	@ (800277c <HAL_RCC_OscConfig+0x340>)
 8002518:	400a      	ands	r2, r1
 800251a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d014      	beq.n	800254e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002524:	f7fe fd3c 	bl	8000fa0 <HAL_GetTick>
 8002528:	0003      	movs	r3, r0
 800252a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800252c:	e008      	b.n	8002540 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800252e:	f7fe fd37 	bl	8000fa0 <HAL_GetTick>
 8002532:	0002      	movs	r2, r0
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	2b64      	cmp	r3, #100	@ 0x64
 800253a:	d901      	bls.n	8002540 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e2fd      	b.n	8002b3c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002540:	4b8c      	ldr	r3, [pc, #560]	@ (8002774 <HAL_RCC_OscConfig+0x338>)
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	2380      	movs	r3, #128	@ 0x80
 8002546:	029b      	lsls	r3, r3, #10
 8002548:	4013      	ands	r3, r2
 800254a:	d0f0      	beq.n	800252e <HAL_RCC_OscConfig+0xf2>
 800254c:	e015      	b.n	800257a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800254e:	f7fe fd27 	bl	8000fa0 <HAL_GetTick>
 8002552:	0003      	movs	r3, r0
 8002554:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002556:	e008      	b.n	800256a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002558:	f7fe fd22 	bl	8000fa0 <HAL_GetTick>
 800255c:	0002      	movs	r2, r0
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b64      	cmp	r3, #100	@ 0x64
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e2e8      	b.n	8002b3c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800256a:	4b82      	ldr	r3, [pc, #520]	@ (8002774 <HAL_RCC_OscConfig+0x338>)
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	2380      	movs	r3, #128	@ 0x80
 8002570:	029b      	lsls	r3, r3, #10
 8002572:	4013      	ands	r3, r2
 8002574:	d1f0      	bne.n	8002558 <HAL_RCC_OscConfig+0x11c>
 8002576:	e000      	b.n	800257a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002578:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2202      	movs	r2, #2
 8002580:	4013      	ands	r3, r2
 8002582:	d100      	bne.n	8002586 <HAL_RCC_OscConfig+0x14a>
 8002584:	e06c      	b.n	8002660 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002586:	4b7b      	ldr	r3, [pc, #492]	@ (8002774 <HAL_RCC_OscConfig+0x338>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	220c      	movs	r2, #12
 800258c:	4013      	ands	r3, r2
 800258e:	d00e      	beq.n	80025ae <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002590:	4b78      	ldr	r3, [pc, #480]	@ (8002774 <HAL_RCC_OscConfig+0x338>)
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	220c      	movs	r2, #12
 8002596:	4013      	ands	r3, r2
 8002598:	2b08      	cmp	r3, #8
 800259a:	d11f      	bne.n	80025dc <HAL_RCC_OscConfig+0x1a0>
 800259c:	4b75      	ldr	r3, [pc, #468]	@ (8002774 <HAL_RCC_OscConfig+0x338>)
 800259e:	685a      	ldr	r2, [r3, #4]
 80025a0:	23c0      	movs	r3, #192	@ 0xc0
 80025a2:	025b      	lsls	r3, r3, #9
 80025a4:	401a      	ands	r2, r3
 80025a6:	2380      	movs	r3, #128	@ 0x80
 80025a8:	021b      	lsls	r3, r3, #8
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d116      	bne.n	80025dc <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ae:	4b71      	ldr	r3, [pc, #452]	@ (8002774 <HAL_RCC_OscConfig+0x338>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2202      	movs	r2, #2
 80025b4:	4013      	ands	r3, r2
 80025b6:	d005      	beq.n	80025c4 <HAL_RCC_OscConfig+0x188>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d001      	beq.n	80025c4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e2bb      	b.n	8002b3c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025c4:	4b6b      	ldr	r3, [pc, #428]	@ (8002774 <HAL_RCC_OscConfig+0x338>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	22f8      	movs	r2, #248	@ 0xf8
 80025ca:	4393      	bics	r3, r2
 80025cc:	0019      	movs	r1, r3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	00da      	lsls	r2, r3, #3
 80025d4:	4b67      	ldr	r3, [pc, #412]	@ (8002774 <HAL_RCC_OscConfig+0x338>)
 80025d6:	430a      	orrs	r2, r1
 80025d8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025da:	e041      	b.n	8002660 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d024      	beq.n	800262e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025e4:	4b63      	ldr	r3, [pc, #396]	@ (8002774 <HAL_RCC_OscConfig+0x338>)
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	4b62      	ldr	r3, [pc, #392]	@ (8002774 <HAL_RCC_OscConfig+0x338>)
 80025ea:	2101      	movs	r1, #1
 80025ec:	430a      	orrs	r2, r1
 80025ee:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f0:	f7fe fcd6 	bl	8000fa0 <HAL_GetTick>
 80025f4:	0003      	movs	r3, r0
 80025f6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025f8:	e008      	b.n	800260c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025fa:	f7fe fcd1 	bl	8000fa0 <HAL_GetTick>
 80025fe:	0002      	movs	r2, r0
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	2b02      	cmp	r3, #2
 8002606:	d901      	bls.n	800260c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e297      	b.n	8002b3c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800260c:	4b59      	ldr	r3, [pc, #356]	@ (8002774 <HAL_RCC_OscConfig+0x338>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2202      	movs	r2, #2
 8002612:	4013      	ands	r3, r2
 8002614:	d0f1      	beq.n	80025fa <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002616:	4b57      	ldr	r3, [pc, #348]	@ (8002774 <HAL_RCC_OscConfig+0x338>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	22f8      	movs	r2, #248	@ 0xf8
 800261c:	4393      	bics	r3, r2
 800261e:	0019      	movs	r1, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	00da      	lsls	r2, r3, #3
 8002626:	4b53      	ldr	r3, [pc, #332]	@ (8002774 <HAL_RCC_OscConfig+0x338>)
 8002628:	430a      	orrs	r2, r1
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	e018      	b.n	8002660 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800262e:	4b51      	ldr	r3, [pc, #324]	@ (8002774 <HAL_RCC_OscConfig+0x338>)
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	4b50      	ldr	r3, [pc, #320]	@ (8002774 <HAL_RCC_OscConfig+0x338>)
 8002634:	2101      	movs	r1, #1
 8002636:	438a      	bics	r2, r1
 8002638:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800263a:	f7fe fcb1 	bl	8000fa0 <HAL_GetTick>
 800263e:	0003      	movs	r3, r0
 8002640:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002642:	e008      	b.n	8002656 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002644:	f7fe fcac 	bl	8000fa0 <HAL_GetTick>
 8002648:	0002      	movs	r2, r0
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e272      	b.n	8002b3c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002656:	4b47      	ldr	r3, [pc, #284]	@ (8002774 <HAL_RCC_OscConfig+0x338>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2202      	movs	r2, #2
 800265c:	4013      	ands	r3, r2
 800265e:	d1f1      	bne.n	8002644 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2208      	movs	r2, #8
 8002666:	4013      	ands	r3, r2
 8002668:	d036      	beq.n	80026d8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	69db      	ldr	r3, [r3, #28]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d019      	beq.n	80026a6 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002672:	4b40      	ldr	r3, [pc, #256]	@ (8002774 <HAL_RCC_OscConfig+0x338>)
 8002674:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002676:	4b3f      	ldr	r3, [pc, #252]	@ (8002774 <HAL_RCC_OscConfig+0x338>)
 8002678:	2101      	movs	r1, #1
 800267a:	430a      	orrs	r2, r1
 800267c:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800267e:	f7fe fc8f 	bl	8000fa0 <HAL_GetTick>
 8002682:	0003      	movs	r3, r0
 8002684:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002686:	e008      	b.n	800269a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002688:	f7fe fc8a 	bl	8000fa0 <HAL_GetTick>
 800268c:	0002      	movs	r2, r0
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e250      	b.n	8002b3c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800269a:	4b36      	ldr	r3, [pc, #216]	@ (8002774 <HAL_RCC_OscConfig+0x338>)
 800269c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800269e:	2202      	movs	r2, #2
 80026a0:	4013      	ands	r3, r2
 80026a2:	d0f1      	beq.n	8002688 <HAL_RCC_OscConfig+0x24c>
 80026a4:	e018      	b.n	80026d8 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026a6:	4b33      	ldr	r3, [pc, #204]	@ (8002774 <HAL_RCC_OscConfig+0x338>)
 80026a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80026aa:	4b32      	ldr	r3, [pc, #200]	@ (8002774 <HAL_RCC_OscConfig+0x338>)
 80026ac:	2101      	movs	r1, #1
 80026ae:	438a      	bics	r2, r1
 80026b0:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026b2:	f7fe fc75 	bl	8000fa0 <HAL_GetTick>
 80026b6:	0003      	movs	r3, r0
 80026b8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026ba:	e008      	b.n	80026ce <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026bc:	f7fe fc70 	bl	8000fa0 <HAL_GetTick>
 80026c0:	0002      	movs	r2, r0
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e236      	b.n	8002b3c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026ce:	4b29      	ldr	r3, [pc, #164]	@ (8002774 <HAL_RCC_OscConfig+0x338>)
 80026d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026d2:	2202      	movs	r2, #2
 80026d4:	4013      	ands	r3, r2
 80026d6:	d1f1      	bne.n	80026bc <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2204      	movs	r2, #4
 80026de:	4013      	ands	r3, r2
 80026e0:	d100      	bne.n	80026e4 <HAL_RCC_OscConfig+0x2a8>
 80026e2:	e0b5      	b.n	8002850 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026e4:	201f      	movs	r0, #31
 80026e6:	183b      	adds	r3, r7, r0
 80026e8:	2200      	movs	r2, #0
 80026ea:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026ec:	4b21      	ldr	r3, [pc, #132]	@ (8002774 <HAL_RCC_OscConfig+0x338>)
 80026ee:	69da      	ldr	r2, [r3, #28]
 80026f0:	2380      	movs	r3, #128	@ 0x80
 80026f2:	055b      	lsls	r3, r3, #21
 80026f4:	4013      	ands	r3, r2
 80026f6:	d110      	bne.n	800271a <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026f8:	4b1e      	ldr	r3, [pc, #120]	@ (8002774 <HAL_RCC_OscConfig+0x338>)
 80026fa:	69da      	ldr	r2, [r3, #28]
 80026fc:	4b1d      	ldr	r3, [pc, #116]	@ (8002774 <HAL_RCC_OscConfig+0x338>)
 80026fe:	2180      	movs	r1, #128	@ 0x80
 8002700:	0549      	lsls	r1, r1, #21
 8002702:	430a      	orrs	r2, r1
 8002704:	61da      	str	r2, [r3, #28]
 8002706:	4b1b      	ldr	r3, [pc, #108]	@ (8002774 <HAL_RCC_OscConfig+0x338>)
 8002708:	69da      	ldr	r2, [r3, #28]
 800270a:	2380      	movs	r3, #128	@ 0x80
 800270c:	055b      	lsls	r3, r3, #21
 800270e:	4013      	ands	r3, r2
 8002710:	60fb      	str	r3, [r7, #12]
 8002712:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002714:	183b      	adds	r3, r7, r0
 8002716:	2201      	movs	r2, #1
 8002718:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800271a:	4b19      	ldr	r3, [pc, #100]	@ (8002780 <HAL_RCC_OscConfig+0x344>)
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	2380      	movs	r3, #128	@ 0x80
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	4013      	ands	r3, r2
 8002724:	d11a      	bne.n	800275c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002726:	4b16      	ldr	r3, [pc, #88]	@ (8002780 <HAL_RCC_OscConfig+0x344>)
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	4b15      	ldr	r3, [pc, #84]	@ (8002780 <HAL_RCC_OscConfig+0x344>)
 800272c:	2180      	movs	r1, #128	@ 0x80
 800272e:	0049      	lsls	r1, r1, #1
 8002730:	430a      	orrs	r2, r1
 8002732:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002734:	f7fe fc34 	bl	8000fa0 <HAL_GetTick>
 8002738:	0003      	movs	r3, r0
 800273a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800273c:	e008      	b.n	8002750 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800273e:	f7fe fc2f 	bl	8000fa0 <HAL_GetTick>
 8002742:	0002      	movs	r2, r0
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	2b64      	cmp	r3, #100	@ 0x64
 800274a:	d901      	bls.n	8002750 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e1f5      	b.n	8002b3c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002750:	4b0b      	ldr	r3, [pc, #44]	@ (8002780 <HAL_RCC_OscConfig+0x344>)
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	2380      	movs	r3, #128	@ 0x80
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	4013      	ands	r3, r2
 800275a:	d0f0      	beq.n	800273e <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	2b01      	cmp	r3, #1
 8002762:	d10f      	bne.n	8002784 <HAL_RCC_OscConfig+0x348>
 8002764:	4b03      	ldr	r3, [pc, #12]	@ (8002774 <HAL_RCC_OscConfig+0x338>)
 8002766:	6a1a      	ldr	r2, [r3, #32]
 8002768:	4b02      	ldr	r3, [pc, #8]	@ (8002774 <HAL_RCC_OscConfig+0x338>)
 800276a:	2101      	movs	r1, #1
 800276c:	430a      	orrs	r2, r1
 800276e:	621a      	str	r2, [r3, #32]
 8002770:	e036      	b.n	80027e0 <HAL_RCC_OscConfig+0x3a4>
 8002772:	46c0      	nop			@ (mov r8, r8)
 8002774:	40021000 	.word	0x40021000
 8002778:	fffeffff 	.word	0xfffeffff
 800277c:	fffbffff 	.word	0xfffbffff
 8002780:	40007000 	.word	0x40007000
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d10c      	bne.n	80027a6 <HAL_RCC_OscConfig+0x36a>
 800278c:	4bca      	ldr	r3, [pc, #808]	@ (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 800278e:	6a1a      	ldr	r2, [r3, #32]
 8002790:	4bc9      	ldr	r3, [pc, #804]	@ (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 8002792:	2101      	movs	r1, #1
 8002794:	438a      	bics	r2, r1
 8002796:	621a      	str	r2, [r3, #32]
 8002798:	4bc7      	ldr	r3, [pc, #796]	@ (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 800279a:	6a1a      	ldr	r2, [r3, #32]
 800279c:	4bc6      	ldr	r3, [pc, #792]	@ (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 800279e:	2104      	movs	r1, #4
 80027a0:	438a      	bics	r2, r1
 80027a2:	621a      	str	r2, [r3, #32]
 80027a4:	e01c      	b.n	80027e0 <HAL_RCC_OscConfig+0x3a4>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	2b05      	cmp	r3, #5
 80027ac:	d10c      	bne.n	80027c8 <HAL_RCC_OscConfig+0x38c>
 80027ae:	4bc2      	ldr	r3, [pc, #776]	@ (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 80027b0:	6a1a      	ldr	r2, [r3, #32]
 80027b2:	4bc1      	ldr	r3, [pc, #772]	@ (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 80027b4:	2104      	movs	r1, #4
 80027b6:	430a      	orrs	r2, r1
 80027b8:	621a      	str	r2, [r3, #32]
 80027ba:	4bbf      	ldr	r3, [pc, #764]	@ (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 80027bc:	6a1a      	ldr	r2, [r3, #32]
 80027be:	4bbe      	ldr	r3, [pc, #760]	@ (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 80027c0:	2101      	movs	r1, #1
 80027c2:	430a      	orrs	r2, r1
 80027c4:	621a      	str	r2, [r3, #32]
 80027c6:	e00b      	b.n	80027e0 <HAL_RCC_OscConfig+0x3a4>
 80027c8:	4bbb      	ldr	r3, [pc, #748]	@ (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 80027ca:	6a1a      	ldr	r2, [r3, #32]
 80027cc:	4bba      	ldr	r3, [pc, #744]	@ (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 80027ce:	2101      	movs	r1, #1
 80027d0:	438a      	bics	r2, r1
 80027d2:	621a      	str	r2, [r3, #32]
 80027d4:	4bb8      	ldr	r3, [pc, #736]	@ (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 80027d6:	6a1a      	ldr	r2, [r3, #32]
 80027d8:	4bb7      	ldr	r3, [pc, #732]	@ (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 80027da:	2104      	movs	r1, #4
 80027dc:	438a      	bics	r2, r1
 80027de:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d014      	beq.n	8002812 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027e8:	f7fe fbda 	bl	8000fa0 <HAL_GetTick>
 80027ec:	0003      	movs	r3, r0
 80027ee:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027f0:	e009      	b.n	8002806 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027f2:	f7fe fbd5 	bl	8000fa0 <HAL_GetTick>
 80027f6:	0002      	movs	r2, r0
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	4aaf      	ldr	r2, [pc, #700]	@ (8002abc <HAL_RCC_OscConfig+0x680>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e19a      	b.n	8002b3c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002806:	4bac      	ldr	r3, [pc, #688]	@ (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 8002808:	6a1b      	ldr	r3, [r3, #32]
 800280a:	2202      	movs	r2, #2
 800280c:	4013      	ands	r3, r2
 800280e:	d0f0      	beq.n	80027f2 <HAL_RCC_OscConfig+0x3b6>
 8002810:	e013      	b.n	800283a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002812:	f7fe fbc5 	bl	8000fa0 <HAL_GetTick>
 8002816:	0003      	movs	r3, r0
 8002818:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800281a:	e009      	b.n	8002830 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800281c:	f7fe fbc0 	bl	8000fa0 <HAL_GetTick>
 8002820:	0002      	movs	r2, r0
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	4aa5      	ldr	r2, [pc, #660]	@ (8002abc <HAL_RCC_OscConfig+0x680>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d901      	bls.n	8002830 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e185      	b.n	8002b3c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002830:	4ba1      	ldr	r3, [pc, #644]	@ (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 8002832:	6a1b      	ldr	r3, [r3, #32]
 8002834:	2202      	movs	r2, #2
 8002836:	4013      	ands	r3, r2
 8002838:	d1f0      	bne.n	800281c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800283a:	231f      	movs	r3, #31
 800283c:	18fb      	adds	r3, r7, r3
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	2b01      	cmp	r3, #1
 8002842:	d105      	bne.n	8002850 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002844:	4b9c      	ldr	r3, [pc, #624]	@ (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 8002846:	69da      	ldr	r2, [r3, #28]
 8002848:	4b9b      	ldr	r3, [pc, #620]	@ (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 800284a:	499d      	ldr	r1, [pc, #628]	@ (8002ac0 <HAL_RCC_OscConfig+0x684>)
 800284c:	400a      	ands	r2, r1
 800284e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2210      	movs	r2, #16
 8002856:	4013      	ands	r3, r2
 8002858:	d063      	beq.n	8002922 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	695b      	ldr	r3, [r3, #20]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d12a      	bne.n	80028b8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002862:	4b95      	ldr	r3, [pc, #596]	@ (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 8002864:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002866:	4b94      	ldr	r3, [pc, #592]	@ (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 8002868:	2104      	movs	r1, #4
 800286a:	430a      	orrs	r2, r1
 800286c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800286e:	4b92      	ldr	r3, [pc, #584]	@ (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 8002870:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002872:	4b91      	ldr	r3, [pc, #580]	@ (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 8002874:	2101      	movs	r1, #1
 8002876:	430a      	orrs	r2, r1
 8002878:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800287a:	f7fe fb91 	bl	8000fa0 <HAL_GetTick>
 800287e:	0003      	movs	r3, r0
 8002880:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002882:	e008      	b.n	8002896 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002884:	f7fe fb8c 	bl	8000fa0 <HAL_GetTick>
 8002888:	0002      	movs	r2, r0
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b02      	cmp	r3, #2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e152      	b.n	8002b3c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002896:	4b88      	ldr	r3, [pc, #544]	@ (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 8002898:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800289a:	2202      	movs	r2, #2
 800289c:	4013      	ands	r3, r2
 800289e:	d0f1      	beq.n	8002884 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80028a0:	4b85      	ldr	r3, [pc, #532]	@ (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 80028a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028a4:	22f8      	movs	r2, #248	@ 0xf8
 80028a6:	4393      	bics	r3, r2
 80028a8:	0019      	movs	r1, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	00da      	lsls	r2, r3, #3
 80028b0:	4b81      	ldr	r3, [pc, #516]	@ (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 80028b2:	430a      	orrs	r2, r1
 80028b4:	635a      	str	r2, [r3, #52]	@ 0x34
 80028b6:	e034      	b.n	8002922 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	695b      	ldr	r3, [r3, #20]
 80028bc:	3305      	adds	r3, #5
 80028be:	d111      	bne.n	80028e4 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80028c0:	4b7d      	ldr	r3, [pc, #500]	@ (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 80028c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028c4:	4b7c      	ldr	r3, [pc, #496]	@ (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 80028c6:	2104      	movs	r1, #4
 80028c8:	438a      	bics	r2, r1
 80028ca:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80028cc:	4b7a      	ldr	r3, [pc, #488]	@ (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 80028ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028d0:	22f8      	movs	r2, #248	@ 0xf8
 80028d2:	4393      	bics	r3, r2
 80028d4:	0019      	movs	r1, r3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	699b      	ldr	r3, [r3, #24]
 80028da:	00da      	lsls	r2, r3, #3
 80028dc:	4b76      	ldr	r3, [pc, #472]	@ (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 80028de:	430a      	orrs	r2, r1
 80028e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80028e2:	e01e      	b.n	8002922 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80028e4:	4b74      	ldr	r3, [pc, #464]	@ (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 80028e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028e8:	4b73      	ldr	r3, [pc, #460]	@ (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 80028ea:	2104      	movs	r1, #4
 80028ec:	430a      	orrs	r2, r1
 80028ee:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80028f0:	4b71      	ldr	r3, [pc, #452]	@ (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 80028f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028f4:	4b70      	ldr	r3, [pc, #448]	@ (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 80028f6:	2101      	movs	r1, #1
 80028f8:	438a      	bics	r2, r1
 80028fa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028fc:	f7fe fb50 	bl	8000fa0 <HAL_GetTick>
 8002900:	0003      	movs	r3, r0
 8002902:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002904:	e008      	b.n	8002918 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002906:	f7fe fb4b 	bl	8000fa0 <HAL_GetTick>
 800290a:	0002      	movs	r2, r0
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	2b02      	cmp	r3, #2
 8002912:	d901      	bls.n	8002918 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e111      	b.n	8002b3c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002918:	4b67      	ldr	r3, [pc, #412]	@ (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 800291a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800291c:	2202      	movs	r2, #2
 800291e:	4013      	ands	r3, r2
 8002920:	d1f1      	bne.n	8002906 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2220      	movs	r2, #32
 8002928:	4013      	ands	r3, r2
 800292a:	d05c      	beq.n	80029e6 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800292c:	4b62      	ldr	r3, [pc, #392]	@ (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	220c      	movs	r2, #12
 8002932:	4013      	ands	r3, r2
 8002934:	2b0c      	cmp	r3, #12
 8002936:	d00e      	beq.n	8002956 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002938:	4b5f      	ldr	r3, [pc, #380]	@ (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	220c      	movs	r2, #12
 800293e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002940:	2b08      	cmp	r3, #8
 8002942:	d114      	bne.n	800296e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002944:	4b5c      	ldr	r3, [pc, #368]	@ (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 8002946:	685a      	ldr	r2, [r3, #4]
 8002948:	23c0      	movs	r3, #192	@ 0xc0
 800294a:	025b      	lsls	r3, r3, #9
 800294c:	401a      	ands	r2, r3
 800294e:	23c0      	movs	r3, #192	@ 0xc0
 8002950:	025b      	lsls	r3, r3, #9
 8002952:	429a      	cmp	r2, r3
 8002954:	d10b      	bne.n	800296e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002956:	4b58      	ldr	r3, [pc, #352]	@ (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 8002958:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800295a:	2380      	movs	r3, #128	@ 0x80
 800295c:	029b      	lsls	r3, r3, #10
 800295e:	4013      	ands	r3, r2
 8002960:	d040      	beq.n	80029e4 <HAL_RCC_OscConfig+0x5a8>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a1b      	ldr	r3, [r3, #32]
 8002966:	2b01      	cmp	r3, #1
 8002968:	d03c      	beq.n	80029e4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e0e6      	b.n	8002b3c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a1b      	ldr	r3, [r3, #32]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d01b      	beq.n	80029ae <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002976:	4b50      	ldr	r3, [pc, #320]	@ (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 8002978:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800297a:	4b4f      	ldr	r3, [pc, #316]	@ (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 800297c:	2180      	movs	r1, #128	@ 0x80
 800297e:	0249      	lsls	r1, r1, #9
 8002980:	430a      	orrs	r2, r1
 8002982:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002984:	f7fe fb0c 	bl	8000fa0 <HAL_GetTick>
 8002988:	0003      	movs	r3, r0
 800298a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800298c:	e008      	b.n	80029a0 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800298e:	f7fe fb07 	bl	8000fa0 <HAL_GetTick>
 8002992:	0002      	movs	r2, r0
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	2b02      	cmp	r3, #2
 800299a:	d901      	bls.n	80029a0 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e0cd      	b.n	8002b3c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80029a0:	4b45      	ldr	r3, [pc, #276]	@ (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 80029a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029a4:	2380      	movs	r3, #128	@ 0x80
 80029a6:	029b      	lsls	r3, r3, #10
 80029a8:	4013      	ands	r3, r2
 80029aa:	d0f0      	beq.n	800298e <HAL_RCC_OscConfig+0x552>
 80029ac:	e01b      	b.n	80029e6 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80029ae:	4b42      	ldr	r3, [pc, #264]	@ (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 80029b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029b2:	4b41      	ldr	r3, [pc, #260]	@ (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 80029b4:	4943      	ldr	r1, [pc, #268]	@ (8002ac4 <HAL_RCC_OscConfig+0x688>)
 80029b6:	400a      	ands	r2, r1
 80029b8:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ba:	f7fe faf1 	bl	8000fa0 <HAL_GetTick>
 80029be:	0003      	movs	r3, r0
 80029c0:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80029c2:	e008      	b.n	80029d6 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80029c4:	f7fe faec 	bl	8000fa0 <HAL_GetTick>
 80029c8:	0002      	movs	r2, r0
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e0b2      	b.n	8002b3c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80029d6:	4b38      	ldr	r3, [pc, #224]	@ (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 80029d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029da:	2380      	movs	r3, #128	@ 0x80
 80029dc:	029b      	lsls	r3, r3, #10
 80029de:	4013      	ands	r3, r2
 80029e0:	d1f0      	bne.n	80029c4 <HAL_RCC_OscConfig+0x588>
 80029e2:	e000      	b.n	80029e6 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80029e4:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d100      	bne.n	80029f0 <HAL_RCC_OscConfig+0x5b4>
 80029ee:	e0a4      	b.n	8002b3a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029f0:	4b31      	ldr	r3, [pc, #196]	@ (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	220c      	movs	r2, #12
 80029f6:	4013      	ands	r3, r2
 80029f8:	2b08      	cmp	r3, #8
 80029fa:	d100      	bne.n	80029fe <HAL_RCC_OscConfig+0x5c2>
 80029fc:	e078      	b.n	8002af0 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d14c      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a06:	4b2c      	ldr	r3, [pc, #176]	@ (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	4b2b      	ldr	r3, [pc, #172]	@ (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 8002a0c:	492e      	ldr	r1, [pc, #184]	@ (8002ac8 <HAL_RCC_OscConfig+0x68c>)
 8002a0e:	400a      	ands	r2, r1
 8002a10:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a12:	f7fe fac5 	bl	8000fa0 <HAL_GetTick>
 8002a16:	0003      	movs	r3, r0
 8002a18:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a1a:	e008      	b.n	8002a2e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a1c:	f7fe fac0 	bl	8000fa0 <HAL_GetTick>
 8002a20:	0002      	movs	r2, r0
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e086      	b.n	8002b3c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a2e:	4b22      	ldr	r3, [pc, #136]	@ (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	2380      	movs	r3, #128	@ 0x80
 8002a34:	049b      	lsls	r3, r3, #18
 8002a36:	4013      	ands	r3, r2
 8002a38:	d1f0      	bne.n	8002a1c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a3a:	4b1f      	ldr	r3, [pc, #124]	@ (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 8002a3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a3e:	220f      	movs	r2, #15
 8002a40:	4393      	bics	r3, r2
 8002a42:	0019      	movs	r1, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a48:	4b1b      	ldr	r3, [pc, #108]	@ (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002a4e:	4b1a      	ldr	r3, [pc, #104]	@ (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	4a1e      	ldr	r2, [pc, #120]	@ (8002acc <HAL_RCC_OscConfig+0x690>)
 8002a54:	4013      	ands	r3, r2
 8002a56:	0019      	movs	r1, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a60:	431a      	orrs	r2, r3
 8002a62:	4b15      	ldr	r3, [pc, #84]	@ (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 8002a64:	430a      	orrs	r2, r1
 8002a66:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a68:	4b13      	ldr	r3, [pc, #76]	@ (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	4b12      	ldr	r3, [pc, #72]	@ (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 8002a6e:	2180      	movs	r1, #128	@ 0x80
 8002a70:	0449      	lsls	r1, r1, #17
 8002a72:	430a      	orrs	r2, r1
 8002a74:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a76:	f7fe fa93 	bl	8000fa0 <HAL_GetTick>
 8002a7a:	0003      	movs	r3, r0
 8002a7c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a7e:	e008      	b.n	8002a92 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a80:	f7fe fa8e 	bl	8000fa0 <HAL_GetTick>
 8002a84:	0002      	movs	r2, r0
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e054      	b.n	8002b3c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a92:	4b09      	ldr	r3, [pc, #36]	@ (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	2380      	movs	r3, #128	@ 0x80
 8002a98:	049b      	lsls	r3, r3, #18
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	d0f0      	beq.n	8002a80 <HAL_RCC_OscConfig+0x644>
 8002a9e:	e04c      	b.n	8002b3a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aa0:	4b05      	ldr	r3, [pc, #20]	@ (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	4b04      	ldr	r3, [pc, #16]	@ (8002ab8 <HAL_RCC_OscConfig+0x67c>)
 8002aa6:	4908      	ldr	r1, [pc, #32]	@ (8002ac8 <HAL_RCC_OscConfig+0x68c>)
 8002aa8:	400a      	ands	r2, r1
 8002aaa:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aac:	f7fe fa78 	bl	8000fa0 <HAL_GetTick>
 8002ab0:	0003      	movs	r3, r0
 8002ab2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ab4:	e015      	b.n	8002ae2 <HAL_RCC_OscConfig+0x6a6>
 8002ab6:	46c0      	nop			@ (mov r8, r8)
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	00001388 	.word	0x00001388
 8002ac0:	efffffff 	.word	0xefffffff
 8002ac4:	fffeffff 	.word	0xfffeffff
 8002ac8:	feffffff 	.word	0xfeffffff
 8002acc:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ad0:	f7fe fa66 	bl	8000fa0 <HAL_GetTick>
 8002ad4:	0002      	movs	r2, r0
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e02c      	b.n	8002b3c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ae2:	4b18      	ldr	r3, [pc, #96]	@ (8002b44 <HAL_RCC_OscConfig+0x708>)
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	2380      	movs	r3, #128	@ 0x80
 8002ae8:	049b      	lsls	r3, r3, #18
 8002aea:	4013      	ands	r3, r2
 8002aec:	d1f0      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x694>
 8002aee:	e024      	b.n	8002b3a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d101      	bne.n	8002afc <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e01f      	b.n	8002b3c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002afc:	4b11      	ldr	r3, [pc, #68]	@ (8002b44 <HAL_RCC_OscConfig+0x708>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002b02:	4b10      	ldr	r3, [pc, #64]	@ (8002b44 <HAL_RCC_OscConfig+0x708>)
 8002b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b06:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b08:	697a      	ldr	r2, [r7, #20]
 8002b0a:	23c0      	movs	r3, #192	@ 0xc0
 8002b0c:	025b      	lsls	r3, r3, #9
 8002b0e:	401a      	ands	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d10e      	bne.n	8002b36 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	220f      	movs	r2, #15
 8002b1c:	401a      	ands	r2, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d107      	bne.n	8002b36 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	23f0      	movs	r3, #240	@ 0xf0
 8002b2a:	039b      	lsls	r3, r3, #14
 8002b2c:	401a      	ands	r2, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d001      	beq.n	8002b3a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e000      	b.n	8002b3c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002b3a:	2300      	movs	r3, #0
}
 8002b3c:	0018      	movs	r0, r3
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	b008      	add	sp, #32
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	40021000 	.word	0x40021000

08002b48 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d101      	bne.n	8002b5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e0bf      	b.n	8002cdc <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b5c:	4b61      	ldr	r3, [pc, #388]	@ (8002ce4 <HAL_RCC_ClockConfig+0x19c>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2201      	movs	r2, #1
 8002b62:	4013      	ands	r3, r2
 8002b64:	683a      	ldr	r2, [r7, #0]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d911      	bls.n	8002b8e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b6a:	4b5e      	ldr	r3, [pc, #376]	@ (8002ce4 <HAL_RCC_ClockConfig+0x19c>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	4393      	bics	r3, r2
 8002b72:	0019      	movs	r1, r3
 8002b74:	4b5b      	ldr	r3, [pc, #364]	@ (8002ce4 <HAL_RCC_ClockConfig+0x19c>)
 8002b76:	683a      	ldr	r2, [r7, #0]
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b7c:	4b59      	ldr	r3, [pc, #356]	@ (8002ce4 <HAL_RCC_ClockConfig+0x19c>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2201      	movs	r2, #1
 8002b82:	4013      	ands	r3, r2
 8002b84:	683a      	ldr	r2, [r7, #0]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d001      	beq.n	8002b8e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e0a6      	b.n	8002cdc <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2202      	movs	r2, #2
 8002b94:	4013      	ands	r3, r2
 8002b96:	d015      	beq.n	8002bc4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2204      	movs	r2, #4
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	d006      	beq.n	8002bb0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002ba2:	4b51      	ldr	r3, [pc, #324]	@ (8002ce8 <HAL_RCC_ClockConfig+0x1a0>)
 8002ba4:	685a      	ldr	r2, [r3, #4]
 8002ba6:	4b50      	ldr	r3, [pc, #320]	@ (8002ce8 <HAL_RCC_ClockConfig+0x1a0>)
 8002ba8:	21e0      	movs	r1, #224	@ 0xe0
 8002baa:	00c9      	lsls	r1, r1, #3
 8002bac:	430a      	orrs	r2, r1
 8002bae:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bb0:	4b4d      	ldr	r3, [pc, #308]	@ (8002ce8 <HAL_RCC_ClockConfig+0x1a0>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	22f0      	movs	r2, #240	@ 0xf0
 8002bb6:	4393      	bics	r3, r2
 8002bb8:	0019      	movs	r1, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	689a      	ldr	r2, [r3, #8]
 8002bbe:	4b4a      	ldr	r3, [pc, #296]	@ (8002ce8 <HAL_RCC_ClockConfig+0x1a0>)
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	4013      	ands	r3, r2
 8002bcc:	d04c      	beq.n	8002c68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d107      	bne.n	8002be6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bd6:	4b44      	ldr	r3, [pc, #272]	@ (8002ce8 <HAL_RCC_ClockConfig+0x1a0>)
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	2380      	movs	r3, #128	@ 0x80
 8002bdc:	029b      	lsls	r3, r3, #10
 8002bde:	4013      	ands	r3, r2
 8002be0:	d120      	bne.n	8002c24 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e07a      	b.n	8002cdc <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d107      	bne.n	8002bfe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bee:	4b3e      	ldr	r3, [pc, #248]	@ (8002ce8 <HAL_RCC_ClockConfig+0x1a0>)
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	2380      	movs	r3, #128	@ 0x80
 8002bf4:	049b      	lsls	r3, r3, #18
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	d114      	bne.n	8002c24 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e06e      	b.n	8002cdc <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	2b03      	cmp	r3, #3
 8002c04:	d107      	bne.n	8002c16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002c06:	4b38      	ldr	r3, [pc, #224]	@ (8002ce8 <HAL_RCC_ClockConfig+0x1a0>)
 8002c08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c0a:	2380      	movs	r3, #128	@ 0x80
 8002c0c:	029b      	lsls	r3, r3, #10
 8002c0e:	4013      	ands	r3, r2
 8002c10:	d108      	bne.n	8002c24 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e062      	b.n	8002cdc <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c16:	4b34      	ldr	r3, [pc, #208]	@ (8002ce8 <HAL_RCC_ClockConfig+0x1a0>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2202      	movs	r2, #2
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	d101      	bne.n	8002c24 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e05b      	b.n	8002cdc <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c24:	4b30      	ldr	r3, [pc, #192]	@ (8002ce8 <HAL_RCC_ClockConfig+0x1a0>)
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	2203      	movs	r2, #3
 8002c2a:	4393      	bics	r3, r2
 8002c2c:	0019      	movs	r1, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685a      	ldr	r2, [r3, #4]
 8002c32:	4b2d      	ldr	r3, [pc, #180]	@ (8002ce8 <HAL_RCC_ClockConfig+0x1a0>)
 8002c34:	430a      	orrs	r2, r1
 8002c36:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c38:	f7fe f9b2 	bl	8000fa0 <HAL_GetTick>
 8002c3c:	0003      	movs	r3, r0
 8002c3e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c40:	e009      	b.n	8002c56 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c42:	f7fe f9ad 	bl	8000fa0 <HAL_GetTick>
 8002c46:	0002      	movs	r2, r0
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	4a27      	ldr	r2, [pc, #156]	@ (8002cec <HAL_RCC_ClockConfig+0x1a4>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e042      	b.n	8002cdc <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c56:	4b24      	ldr	r3, [pc, #144]	@ (8002ce8 <HAL_RCC_ClockConfig+0x1a0>)
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	220c      	movs	r2, #12
 8002c5c:	401a      	ands	r2, r3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d1ec      	bne.n	8002c42 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c68:	4b1e      	ldr	r3, [pc, #120]	@ (8002ce4 <HAL_RCC_ClockConfig+0x19c>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	4013      	ands	r3, r2
 8002c70:	683a      	ldr	r2, [r7, #0]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d211      	bcs.n	8002c9a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c76:	4b1b      	ldr	r3, [pc, #108]	@ (8002ce4 <HAL_RCC_ClockConfig+0x19c>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	4393      	bics	r3, r2
 8002c7e:	0019      	movs	r1, r3
 8002c80:	4b18      	ldr	r3, [pc, #96]	@ (8002ce4 <HAL_RCC_ClockConfig+0x19c>)
 8002c82:	683a      	ldr	r2, [r7, #0]
 8002c84:	430a      	orrs	r2, r1
 8002c86:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c88:	4b16      	ldr	r3, [pc, #88]	@ (8002ce4 <HAL_RCC_ClockConfig+0x19c>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	4013      	ands	r3, r2
 8002c90:	683a      	ldr	r2, [r7, #0]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d001      	beq.n	8002c9a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e020      	b.n	8002cdc <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2204      	movs	r2, #4
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	d009      	beq.n	8002cb8 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002ca4:	4b10      	ldr	r3, [pc, #64]	@ (8002ce8 <HAL_RCC_ClockConfig+0x1a0>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	4a11      	ldr	r2, [pc, #68]	@ (8002cf0 <HAL_RCC_ClockConfig+0x1a8>)
 8002caa:	4013      	ands	r3, r2
 8002cac:	0019      	movs	r1, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	68da      	ldr	r2, [r3, #12]
 8002cb2:	4b0d      	ldr	r3, [pc, #52]	@ (8002ce8 <HAL_RCC_ClockConfig+0x1a0>)
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002cb8:	f000 f820 	bl	8002cfc <HAL_RCC_GetSysClockFreq>
 8002cbc:	0001      	movs	r1, r0
 8002cbe:	4b0a      	ldr	r3, [pc, #40]	@ (8002ce8 <HAL_RCC_ClockConfig+0x1a0>)
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	091b      	lsrs	r3, r3, #4
 8002cc4:	220f      	movs	r2, #15
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	4a0a      	ldr	r2, [pc, #40]	@ (8002cf4 <HAL_RCC_ClockConfig+0x1ac>)
 8002cca:	5cd3      	ldrb	r3, [r2, r3]
 8002ccc:	000a      	movs	r2, r1
 8002cce:	40da      	lsrs	r2, r3
 8002cd0:	4b09      	ldr	r3, [pc, #36]	@ (8002cf8 <HAL_RCC_ClockConfig+0x1b0>)
 8002cd2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002cd4:	2003      	movs	r0, #3
 8002cd6:	f7fe f91d 	bl	8000f14 <HAL_InitTick>
  
  return HAL_OK;
 8002cda:	2300      	movs	r3, #0
}
 8002cdc:	0018      	movs	r0, r3
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	b004      	add	sp, #16
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	40022000 	.word	0x40022000
 8002ce8:	40021000 	.word	0x40021000
 8002cec:	00001388 	.word	0x00001388
 8002cf0:	fffff8ff 	.word	0xfffff8ff
 8002cf4:	08004aa0 	.word	0x08004aa0
 8002cf8:	20000000 	.word	0x20000000

08002cfc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d02:	2300      	movs	r3, #0
 8002d04:	60fb      	str	r3, [r7, #12]
 8002d06:	2300      	movs	r3, #0
 8002d08:	60bb      	str	r3, [r7, #8]
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	617b      	str	r3, [r7, #20]
 8002d0e:	2300      	movs	r3, #0
 8002d10:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002d12:	2300      	movs	r3, #0
 8002d14:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002d16:	4b2d      	ldr	r3, [pc, #180]	@ (8002dcc <HAL_RCC_GetSysClockFreq+0xd0>)
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	220c      	movs	r2, #12
 8002d20:	4013      	ands	r3, r2
 8002d22:	2b0c      	cmp	r3, #12
 8002d24:	d046      	beq.n	8002db4 <HAL_RCC_GetSysClockFreq+0xb8>
 8002d26:	d848      	bhi.n	8002dba <HAL_RCC_GetSysClockFreq+0xbe>
 8002d28:	2b04      	cmp	r3, #4
 8002d2a:	d002      	beq.n	8002d32 <HAL_RCC_GetSysClockFreq+0x36>
 8002d2c:	2b08      	cmp	r3, #8
 8002d2e:	d003      	beq.n	8002d38 <HAL_RCC_GetSysClockFreq+0x3c>
 8002d30:	e043      	b.n	8002dba <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d32:	4b27      	ldr	r3, [pc, #156]	@ (8002dd0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002d34:	613b      	str	r3, [r7, #16]
      break;
 8002d36:	e043      	b.n	8002dc0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	0c9b      	lsrs	r3, r3, #18
 8002d3c:	220f      	movs	r2, #15
 8002d3e:	4013      	ands	r3, r2
 8002d40:	4a24      	ldr	r2, [pc, #144]	@ (8002dd4 <HAL_RCC_GetSysClockFreq+0xd8>)
 8002d42:	5cd3      	ldrb	r3, [r2, r3]
 8002d44:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002d46:	4b21      	ldr	r3, [pc, #132]	@ (8002dcc <HAL_RCC_GetSysClockFreq+0xd0>)
 8002d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d4a:	220f      	movs	r2, #15
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	4a22      	ldr	r2, [pc, #136]	@ (8002dd8 <HAL_RCC_GetSysClockFreq+0xdc>)
 8002d50:	5cd3      	ldrb	r3, [r2, r3]
 8002d52:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002d54:	68fa      	ldr	r2, [r7, #12]
 8002d56:	23c0      	movs	r3, #192	@ 0xc0
 8002d58:	025b      	lsls	r3, r3, #9
 8002d5a:	401a      	ands	r2, r3
 8002d5c:	2380      	movs	r3, #128	@ 0x80
 8002d5e:	025b      	lsls	r3, r3, #9
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d109      	bne.n	8002d78 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002d64:	68b9      	ldr	r1, [r7, #8]
 8002d66:	481a      	ldr	r0, [pc, #104]	@ (8002dd0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002d68:	f7fd f9e0 	bl	800012c <__udivsi3>
 8002d6c:	0003      	movs	r3, r0
 8002d6e:	001a      	movs	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4353      	muls	r3, r2
 8002d74:	617b      	str	r3, [r7, #20]
 8002d76:	e01a      	b.n	8002dae <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002d78:	68fa      	ldr	r2, [r7, #12]
 8002d7a:	23c0      	movs	r3, #192	@ 0xc0
 8002d7c:	025b      	lsls	r3, r3, #9
 8002d7e:	401a      	ands	r2, r3
 8002d80:	23c0      	movs	r3, #192	@ 0xc0
 8002d82:	025b      	lsls	r3, r3, #9
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d109      	bne.n	8002d9c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002d88:	68b9      	ldr	r1, [r7, #8]
 8002d8a:	4814      	ldr	r0, [pc, #80]	@ (8002ddc <HAL_RCC_GetSysClockFreq+0xe0>)
 8002d8c:	f7fd f9ce 	bl	800012c <__udivsi3>
 8002d90:	0003      	movs	r3, r0
 8002d92:	001a      	movs	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	4353      	muls	r3, r2
 8002d98:	617b      	str	r3, [r7, #20]
 8002d9a:	e008      	b.n	8002dae <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002d9c:	68b9      	ldr	r1, [r7, #8]
 8002d9e:	480c      	ldr	r0, [pc, #48]	@ (8002dd0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002da0:	f7fd f9c4 	bl	800012c <__udivsi3>
 8002da4:	0003      	movs	r3, r0
 8002da6:	001a      	movs	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4353      	muls	r3, r2
 8002dac:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	613b      	str	r3, [r7, #16]
      break;
 8002db2:	e005      	b.n	8002dc0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002db4:	4b09      	ldr	r3, [pc, #36]	@ (8002ddc <HAL_RCC_GetSysClockFreq+0xe0>)
 8002db6:	613b      	str	r3, [r7, #16]
      break;
 8002db8:	e002      	b.n	8002dc0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002dba:	4b05      	ldr	r3, [pc, #20]	@ (8002dd0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002dbc:	613b      	str	r3, [r7, #16]
      break;
 8002dbe:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002dc0:	693b      	ldr	r3, [r7, #16]
}
 8002dc2:	0018      	movs	r0, r3
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	b006      	add	sp, #24
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	46c0      	nop			@ (mov r8, r8)
 8002dcc:	40021000 	.word	0x40021000
 8002dd0:	007a1200 	.word	0x007a1200
 8002dd4:	08004ab8 	.word	0x08004ab8
 8002dd8:	08004ac8 	.word	0x08004ac8
 8002ddc:	02dc6c00 	.word	0x02dc6c00

08002de0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002de4:	4b02      	ldr	r3, [pc, #8]	@ (8002df0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002de6:	681b      	ldr	r3, [r3, #0]
}
 8002de8:	0018      	movs	r0, r3
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	46c0      	nop			@ (mov r8, r8)
 8002df0:	20000000 	.word	0x20000000

08002df4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002df8:	f7ff fff2 	bl	8002de0 <HAL_RCC_GetHCLKFreq>
 8002dfc:	0001      	movs	r1, r0
 8002dfe:	4b06      	ldr	r3, [pc, #24]	@ (8002e18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	0a1b      	lsrs	r3, r3, #8
 8002e04:	2207      	movs	r2, #7
 8002e06:	4013      	ands	r3, r2
 8002e08:	4a04      	ldr	r2, [pc, #16]	@ (8002e1c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e0a:	5cd3      	ldrb	r3, [r2, r3]
 8002e0c:	40d9      	lsrs	r1, r3
 8002e0e:	000b      	movs	r3, r1
}    
 8002e10:	0018      	movs	r0, r3
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	46c0      	nop			@ (mov r8, r8)
 8002e18:	40021000 	.word	0x40021000
 8002e1c:	08004ab0 	.word	0x08004ab0

08002e20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b086      	sub	sp, #24
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	2380      	movs	r3, #128	@ 0x80
 8002e36:	025b      	lsls	r3, r3, #9
 8002e38:	4013      	ands	r3, r2
 8002e3a:	d100      	bne.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002e3c:	e08e      	b.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002e3e:	2017      	movs	r0, #23
 8002e40:	183b      	adds	r3, r7, r0
 8002e42:	2200      	movs	r2, #0
 8002e44:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e46:	4b67      	ldr	r3, [pc, #412]	@ (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e48:	69da      	ldr	r2, [r3, #28]
 8002e4a:	2380      	movs	r3, #128	@ 0x80
 8002e4c:	055b      	lsls	r3, r3, #21
 8002e4e:	4013      	ands	r3, r2
 8002e50:	d110      	bne.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e52:	4b64      	ldr	r3, [pc, #400]	@ (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e54:	69da      	ldr	r2, [r3, #28]
 8002e56:	4b63      	ldr	r3, [pc, #396]	@ (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e58:	2180      	movs	r1, #128	@ 0x80
 8002e5a:	0549      	lsls	r1, r1, #21
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	61da      	str	r2, [r3, #28]
 8002e60:	4b60      	ldr	r3, [pc, #384]	@ (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e62:	69da      	ldr	r2, [r3, #28]
 8002e64:	2380      	movs	r3, #128	@ 0x80
 8002e66:	055b      	lsls	r3, r3, #21
 8002e68:	4013      	ands	r3, r2
 8002e6a:	60bb      	str	r3, [r7, #8]
 8002e6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e6e:	183b      	adds	r3, r7, r0
 8002e70:	2201      	movs	r2, #1
 8002e72:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e74:	4b5c      	ldr	r3, [pc, #368]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	2380      	movs	r3, #128	@ 0x80
 8002e7a:	005b      	lsls	r3, r3, #1
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	d11a      	bne.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e80:	4b59      	ldr	r3, [pc, #356]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	4b58      	ldr	r3, [pc, #352]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002e86:	2180      	movs	r1, #128	@ 0x80
 8002e88:	0049      	lsls	r1, r1, #1
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e8e:	f7fe f887 	bl	8000fa0 <HAL_GetTick>
 8002e92:	0003      	movs	r3, r0
 8002e94:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e96:	e008      	b.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e98:	f7fe f882 	bl	8000fa0 <HAL_GetTick>
 8002e9c:	0002      	movs	r2, r0
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	2b64      	cmp	r3, #100	@ 0x64
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e097      	b.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eaa:	4b4f      	ldr	r3, [pc, #316]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	2380      	movs	r3, #128	@ 0x80
 8002eb0:	005b      	lsls	r3, r3, #1
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	d0f0      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002eb6:	4b4b      	ldr	r3, [pc, #300]	@ (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002eb8:	6a1a      	ldr	r2, [r3, #32]
 8002eba:	23c0      	movs	r3, #192	@ 0xc0
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d034      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685a      	ldr	r2, [r3, #4]
 8002ecc:	23c0      	movs	r3, #192	@ 0xc0
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	68fa      	ldr	r2, [r7, #12]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d02c      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ed8:	4b42      	ldr	r3, [pc, #264]	@ (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002eda:	6a1b      	ldr	r3, [r3, #32]
 8002edc:	4a43      	ldr	r2, [pc, #268]	@ (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002ede:	4013      	ands	r3, r2
 8002ee0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ee2:	4b40      	ldr	r3, [pc, #256]	@ (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002ee4:	6a1a      	ldr	r2, [r3, #32]
 8002ee6:	4b3f      	ldr	r3, [pc, #252]	@ (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002ee8:	2180      	movs	r1, #128	@ 0x80
 8002eea:	0249      	lsls	r1, r1, #9
 8002eec:	430a      	orrs	r2, r1
 8002eee:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ef0:	4b3c      	ldr	r3, [pc, #240]	@ (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002ef2:	6a1a      	ldr	r2, [r3, #32]
 8002ef4:	4b3b      	ldr	r3, [pc, #236]	@ (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002ef6:	493e      	ldr	r1, [pc, #248]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ef8:	400a      	ands	r2, r1
 8002efa:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002efc:	4b39      	ldr	r3, [pc, #228]	@ (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2201      	movs	r2, #1
 8002f06:	4013      	ands	r3, r2
 8002f08:	d013      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f0a:	f7fe f849 	bl	8000fa0 <HAL_GetTick>
 8002f0e:	0003      	movs	r3, r0
 8002f10:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f12:	e009      	b.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f14:	f7fe f844 	bl	8000fa0 <HAL_GetTick>
 8002f18:	0002      	movs	r2, r0
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	4a35      	ldr	r2, [pc, #212]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d901      	bls.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e058      	b.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f28:	4b2e      	ldr	r3, [pc, #184]	@ (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002f2a:	6a1b      	ldr	r3, [r3, #32]
 8002f2c:	2202      	movs	r2, #2
 8002f2e:	4013      	ands	r3, r2
 8002f30:	d0f0      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f32:	4b2c      	ldr	r3, [pc, #176]	@ (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	4a2d      	ldr	r2, [pc, #180]	@ (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002f38:	4013      	ands	r3, r2
 8002f3a:	0019      	movs	r1, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685a      	ldr	r2, [r3, #4]
 8002f40:	4b28      	ldr	r3, [pc, #160]	@ (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002f42:	430a      	orrs	r2, r1
 8002f44:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f46:	2317      	movs	r3, #23
 8002f48:	18fb      	adds	r3, r7, r3
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d105      	bne.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f50:	4b24      	ldr	r3, [pc, #144]	@ (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002f52:	69da      	ldr	r2, [r3, #28]
 8002f54:	4b23      	ldr	r3, [pc, #140]	@ (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002f56:	4928      	ldr	r1, [pc, #160]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002f58:	400a      	ands	r2, r1
 8002f5a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2201      	movs	r2, #1
 8002f62:	4013      	ands	r3, r2
 8002f64:	d009      	beq.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f66:	4b1f      	ldr	r3, [pc, #124]	@ (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f6a:	2203      	movs	r2, #3
 8002f6c:	4393      	bics	r3, r2
 8002f6e:	0019      	movs	r1, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689a      	ldr	r2, [r3, #8]
 8002f74:	4b1b      	ldr	r3, [pc, #108]	@ (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002f76:	430a      	orrs	r2, r1
 8002f78:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2220      	movs	r2, #32
 8002f80:	4013      	ands	r3, r2
 8002f82:	d009      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f84:	4b17      	ldr	r3, [pc, #92]	@ (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002f86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f88:	2210      	movs	r2, #16
 8002f8a:	4393      	bics	r3, r2
 8002f8c:	0019      	movs	r1, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	68da      	ldr	r2, [r3, #12]
 8002f92:	4b14      	ldr	r3, [pc, #80]	@ (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002f94:	430a      	orrs	r2, r1
 8002f96:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	2380      	movs	r3, #128	@ 0x80
 8002f9e:	029b      	lsls	r3, r3, #10
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	d009      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002fa4:	4b0f      	ldr	r3, [pc, #60]	@ (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa8:	2280      	movs	r2, #128	@ 0x80
 8002faa:	4393      	bics	r3, r2
 8002fac:	0019      	movs	r1, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	695a      	ldr	r2, [r3, #20]
 8002fb2:	4b0c      	ldr	r3, [pc, #48]	@ (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	2380      	movs	r3, #128	@ 0x80
 8002fbe:	00db      	lsls	r3, r3, #3
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	d009      	beq.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002fc4:	4b07      	ldr	r3, [pc, #28]	@ (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002fc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fc8:	2240      	movs	r2, #64	@ 0x40
 8002fca:	4393      	bics	r3, r2
 8002fcc:	0019      	movs	r1, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	691a      	ldr	r2, [r3, #16]
 8002fd2:	4b04      	ldr	r3, [pc, #16]	@ (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	0018      	movs	r0, r3
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	b006      	add	sp, #24
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	46c0      	nop			@ (mov r8, r8)
 8002fe4:	40021000 	.word	0x40021000
 8002fe8:	40007000 	.word	0x40007000
 8002fec:	fffffcff 	.word	0xfffffcff
 8002ff0:	fffeffff 	.word	0xfffeffff
 8002ff4:	00001388 	.word	0x00001388
 8002ff8:	efffffff 	.word	0xefffffff

08002ffc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d101      	bne.n	800300e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e0a8      	b.n	8003160 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003012:	2b00      	cmp	r3, #0
 8003014:	d109      	bne.n	800302a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685a      	ldr	r2, [r3, #4]
 800301a:	2382      	movs	r3, #130	@ 0x82
 800301c:	005b      	lsls	r3, r3, #1
 800301e:	429a      	cmp	r2, r3
 8003020:	d009      	beq.n	8003036 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	61da      	str	r2, [r3, #28]
 8003028:	e005      	b.n	8003036 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	225d      	movs	r2, #93	@ 0x5d
 8003040:	5c9b      	ldrb	r3, [r3, r2]
 8003042:	b2db      	uxtb	r3, r3
 8003044:	2b00      	cmp	r3, #0
 8003046:	d107      	bne.n	8003058 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	225c      	movs	r2, #92	@ 0x5c
 800304c:	2100      	movs	r1, #0
 800304e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	0018      	movs	r0, r3
 8003054:	f7fd fd6a 	bl	8000b2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	225d      	movs	r2, #93	@ 0x5d
 800305c:	2102      	movs	r1, #2
 800305e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2140      	movs	r1, #64	@ 0x40
 800306c:	438a      	bics	r2, r1
 800306e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	68da      	ldr	r2, [r3, #12]
 8003074:	23e0      	movs	r3, #224	@ 0xe0
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	429a      	cmp	r2, r3
 800307a:	d902      	bls.n	8003082 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800307c:	2300      	movs	r3, #0
 800307e:	60fb      	str	r3, [r7, #12]
 8003080:	e002      	b.n	8003088 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003082:	2380      	movs	r3, #128	@ 0x80
 8003084:	015b      	lsls	r3, r3, #5
 8003086:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	68da      	ldr	r2, [r3, #12]
 800308c:	23f0      	movs	r3, #240	@ 0xf0
 800308e:	011b      	lsls	r3, r3, #4
 8003090:	429a      	cmp	r2, r3
 8003092:	d008      	beq.n	80030a6 <HAL_SPI_Init+0xaa>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	68da      	ldr	r2, [r3, #12]
 8003098:	23e0      	movs	r3, #224	@ 0xe0
 800309a:	00db      	lsls	r3, r3, #3
 800309c:	429a      	cmp	r2, r3
 800309e:	d002      	beq.n	80030a6 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685a      	ldr	r2, [r3, #4]
 80030aa:	2382      	movs	r3, #130	@ 0x82
 80030ac:	005b      	lsls	r3, r3, #1
 80030ae:	401a      	ands	r2, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6899      	ldr	r1, [r3, #8]
 80030b4:	2384      	movs	r3, #132	@ 0x84
 80030b6:	021b      	lsls	r3, r3, #8
 80030b8:	400b      	ands	r3, r1
 80030ba:	431a      	orrs	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	691b      	ldr	r3, [r3, #16]
 80030c0:	2102      	movs	r1, #2
 80030c2:	400b      	ands	r3, r1
 80030c4:	431a      	orrs	r2, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	2101      	movs	r1, #1
 80030cc:	400b      	ands	r3, r1
 80030ce:	431a      	orrs	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6999      	ldr	r1, [r3, #24]
 80030d4:	2380      	movs	r3, #128	@ 0x80
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	400b      	ands	r3, r1
 80030da:	431a      	orrs	r2, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	69db      	ldr	r3, [r3, #28]
 80030e0:	2138      	movs	r1, #56	@ 0x38
 80030e2:	400b      	ands	r3, r1
 80030e4:	431a      	orrs	r2, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a1b      	ldr	r3, [r3, #32]
 80030ea:	2180      	movs	r1, #128	@ 0x80
 80030ec:	400b      	ands	r3, r1
 80030ee:	431a      	orrs	r2, r3
 80030f0:	0011      	movs	r1, r2
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80030f6:	2380      	movs	r3, #128	@ 0x80
 80030f8:	019b      	lsls	r3, r3, #6
 80030fa:	401a      	ands	r2, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	430a      	orrs	r2, r1
 8003102:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	699b      	ldr	r3, [r3, #24]
 8003108:	0c1b      	lsrs	r3, r3, #16
 800310a:	2204      	movs	r2, #4
 800310c:	401a      	ands	r2, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003112:	2110      	movs	r1, #16
 8003114:	400b      	ands	r3, r1
 8003116:	431a      	orrs	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800311c:	2108      	movs	r1, #8
 800311e:	400b      	ands	r3, r1
 8003120:	431a      	orrs	r2, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	68d9      	ldr	r1, [r3, #12]
 8003126:	23f0      	movs	r3, #240	@ 0xf0
 8003128:	011b      	lsls	r3, r3, #4
 800312a:	400b      	ands	r3, r1
 800312c:	431a      	orrs	r2, r3
 800312e:	0011      	movs	r1, r2
 8003130:	68fa      	ldr	r2, [r7, #12]
 8003132:	2380      	movs	r3, #128	@ 0x80
 8003134:	015b      	lsls	r3, r3, #5
 8003136:	401a      	ands	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	430a      	orrs	r2, r1
 800313e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	69da      	ldr	r2, [r3, #28]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4907      	ldr	r1, [pc, #28]	@ (8003168 <HAL_SPI_Init+0x16c>)
 800314c:	400a      	ands	r2, r1
 800314e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	225d      	movs	r2, #93	@ 0x5d
 800315a:	2101      	movs	r1, #1
 800315c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800315e:	2300      	movs	r3, #0
}
 8003160:	0018      	movs	r0, r3
 8003162:	46bd      	mov	sp, r7
 8003164:	b004      	add	sp, #16
 8003166:	bd80      	pop	{r7, pc}
 8003168:	fffff7ff 	.word	0xfffff7ff

0800316c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d101      	bne.n	800317e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e044      	b.n	8003208 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003182:	2b00      	cmp	r3, #0
 8003184:	d107      	bne.n	8003196 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2278      	movs	r2, #120	@ 0x78
 800318a:	2100      	movs	r1, #0
 800318c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	0018      	movs	r0, r3
 8003192:	f7fd fdcd 	bl	8000d30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2224      	movs	r2, #36	@ 0x24
 800319a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2101      	movs	r1, #1
 80031a8:	438a      	bics	r2, r1
 80031aa:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d003      	beq.n	80031bc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	0018      	movs	r0, r3
 80031b8:	f000 fd08 	bl	8003bcc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	0018      	movs	r0, r3
 80031c0:	f000 fbc4 	bl	800394c <UART_SetConfig>
 80031c4:	0003      	movs	r3, r0
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d101      	bne.n	80031ce <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e01c      	b.n	8003208 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	685a      	ldr	r2, [r3, #4]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	490d      	ldr	r1, [pc, #52]	@ (8003210 <HAL_UART_Init+0xa4>)
 80031da:	400a      	ands	r2, r1
 80031dc:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	689a      	ldr	r2, [r3, #8]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	212a      	movs	r1, #42	@ 0x2a
 80031ea:	438a      	bics	r2, r1
 80031ec:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2101      	movs	r1, #1
 80031fa:	430a      	orrs	r2, r1
 80031fc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	0018      	movs	r0, r3
 8003202:	f000 fd97 	bl	8003d34 <UART_CheckIdleState>
 8003206:	0003      	movs	r3, r0
}
 8003208:	0018      	movs	r0, r3
 800320a:	46bd      	mov	sp, r7
 800320c:	b002      	add	sp, #8
 800320e:	bd80      	pop	{r7, pc}
 8003210:	ffffb7ff 	.word	0xffffb7ff

08003214 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b08a      	sub	sp, #40	@ 0x28
 8003218:	af02      	add	r7, sp, #8
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	603b      	str	r3, [r7, #0]
 8003220:	1dbb      	adds	r3, r7, #6
 8003222:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003228:	2b20      	cmp	r3, #32
 800322a:	d000      	beq.n	800322e <HAL_UART_Transmit+0x1a>
 800322c:	e08c      	b.n	8003348 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d003      	beq.n	800323c <HAL_UART_Transmit+0x28>
 8003234:	1dbb      	adds	r3, r7, #6
 8003236:	881b      	ldrh	r3, [r3, #0]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d101      	bne.n	8003240 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e084      	b.n	800334a <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	689a      	ldr	r2, [r3, #8]
 8003244:	2380      	movs	r3, #128	@ 0x80
 8003246:	015b      	lsls	r3, r3, #5
 8003248:	429a      	cmp	r2, r3
 800324a:	d109      	bne.n	8003260 <HAL_UART_Transmit+0x4c>
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	691b      	ldr	r3, [r3, #16]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d105      	bne.n	8003260 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	2201      	movs	r2, #1
 8003258:	4013      	ands	r3, r2
 800325a:	d001      	beq.n	8003260 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e074      	b.n	800334a <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2284      	movs	r2, #132	@ 0x84
 8003264:	2100      	movs	r1, #0
 8003266:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2221      	movs	r2, #33	@ 0x21
 800326c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800326e:	f7fd fe97 	bl	8000fa0 <HAL_GetTick>
 8003272:	0003      	movs	r3, r0
 8003274:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	1dba      	adds	r2, r7, #6
 800327a:	2150      	movs	r1, #80	@ 0x50
 800327c:	8812      	ldrh	r2, [r2, #0]
 800327e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	1dba      	adds	r2, r7, #6
 8003284:	2152      	movs	r1, #82	@ 0x52
 8003286:	8812      	ldrh	r2, [r2, #0]
 8003288:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	689a      	ldr	r2, [r3, #8]
 800328e:	2380      	movs	r3, #128	@ 0x80
 8003290:	015b      	lsls	r3, r3, #5
 8003292:	429a      	cmp	r2, r3
 8003294:	d108      	bne.n	80032a8 <HAL_UART_Transmit+0x94>
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d104      	bne.n	80032a8 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800329e:	2300      	movs	r3, #0
 80032a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	61bb      	str	r3, [r7, #24]
 80032a6:	e003      	b.n	80032b0 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032ac:	2300      	movs	r3, #0
 80032ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80032b0:	e02f      	b.n	8003312 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032b2:	697a      	ldr	r2, [r7, #20]
 80032b4:	68f8      	ldr	r0, [r7, #12]
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	9300      	str	r3, [sp, #0]
 80032ba:	0013      	movs	r3, r2
 80032bc:	2200      	movs	r2, #0
 80032be:	2180      	movs	r1, #128	@ 0x80
 80032c0:	f000 fde0 	bl	8003e84 <UART_WaitOnFlagUntilTimeout>
 80032c4:	1e03      	subs	r3, r0, #0
 80032c6:	d004      	beq.n	80032d2 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2220      	movs	r2, #32
 80032cc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e03b      	b.n	800334a <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d10b      	bne.n	80032f0 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	881a      	ldrh	r2, [r3, #0]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	05d2      	lsls	r2, r2, #23
 80032e2:	0dd2      	lsrs	r2, r2, #23
 80032e4:	b292      	uxth	r2, r2
 80032e6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	3302      	adds	r3, #2
 80032ec:	61bb      	str	r3, [r7, #24]
 80032ee:	e007      	b.n	8003300 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	781a      	ldrb	r2, [r3, #0]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	3301      	adds	r3, #1
 80032fe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2252      	movs	r2, #82	@ 0x52
 8003304:	5a9b      	ldrh	r3, [r3, r2]
 8003306:	b29b      	uxth	r3, r3
 8003308:	3b01      	subs	r3, #1
 800330a:	b299      	uxth	r1, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2252      	movs	r2, #82	@ 0x52
 8003310:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2252      	movs	r2, #82	@ 0x52
 8003316:	5a9b      	ldrh	r3, [r3, r2]
 8003318:	b29b      	uxth	r3, r3
 800331a:	2b00      	cmp	r3, #0
 800331c:	d1c9      	bne.n	80032b2 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800331e:	697a      	ldr	r2, [r7, #20]
 8003320:	68f8      	ldr	r0, [r7, #12]
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	9300      	str	r3, [sp, #0]
 8003326:	0013      	movs	r3, r2
 8003328:	2200      	movs	r2, #0
 800332a:	2140      	movs	r1, #64	@ 0x40
 800332c:	f000 fdaa 	bl	8003e84 <UART_WaitOnFlagUntilTimeout>
 8003330:	1e03      	subs	r3, r0, #0
 8003332:	d004      	beq.n	800333e <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2220      	movs	r2, #32
 8003338:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e005      	b.n	800334a <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2220      	movs	r2, #32
 8003342:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003344:	2300      	movs	r3, #0
 8003346:	e000      	b.n	800334a <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8003348:	2302      	movs	r3, #2
  }
}
 800334a:	0018      	movs	r0, r3
 800334c:	46bd      	mov	sp, r7
 800334e:	b008      	add	sp, #32
 8003350:	bd80      	pop	{r7, pc}
	...

08003354 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003354:	b590      	push	{r4, r7, lr}
 8003356:	b0ab      	sub	sp, #172	@ 0xac
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	69db      	ldr	r3, [r3, #28]
 8003362:	22a4      	movs	r2, #164	@ 0xa4
 8003364:	18b9      	adds	r1, r7, r2
 8003366:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	20a0      	movs	r0, #160	@ 0xa0
 8003370:	1839      	adds	r1, r7, r0
 8003372:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	219c      	movs	r1, #156	@ 0x9c
 800337c:	1879      	adds	r1, r7, r1
 800337e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003380:	0011      	movs	r1, r2
 8003382:	18bb      	adds	r3, r7, r2
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a99      	ldr	r2, [pc, #612]	@ (80035ec <HAL_UART_IRQHandler+0x298>)
 8003388:	4013      	ands	r3, r2
 800338a:	2298      	movs	r2, #152	@ 0x98
 800338c:	18bc      	adds	r4, r7, r2
 800338e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8003390:	18bb      	adds	r3, r7, r2
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d114      	bne.n	80033c2 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003398:	187b      	adds	r3, r7, r1
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2220      	movs	r2, #32
 800339e:	4013      	ands	r3, r2
 80033a0:	d00f      	beq.n	80033c2 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80033a2:	183b      	adds	r3, r7, r0
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2220      	movs	r2, #32
 80033a8:	4013      	ands	r3, r2
 80033aa:	d00a      	beq.n	80033c2 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d100      	bne.n	80033b6 <HAL_UART_IRQHandler+0x62>
 80033b4:	e29e      	b.n	80038f4 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	0010      	movs	r0, r2
 80033be:	4798      	blx	r3
      }
      return;
 80033c0:	e298      	b.n	80038f4 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80033c2:	2398      	movs	r3, #152	@ 0x98
 80033c4:	18fb      	adds	r3, r7, r3
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d100      	bne.n	80033ce <HAL_UART_IRQHandler+0x7a>
 80033cc:	e114      	b.n	80035f8 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80033ce:	239c      	movs	r3, #156	@ 0x9c
 80033d0:	18fb      	adds	r3, r7, r3
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	2201      	movs	r2, #1
 80033d6:	4013      	ands	r3, r2
 80033d8:	d106      	bne.n	80033e8 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80033da:	23a0      	movs	r3, #160	@ 0xa0
 80033dc:	18fb      	adds	r3, r7, r3
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a83      	ldr	r2, [pc, #524]	@ (80035f0 <HAL_UART_IRQHandler+0x29c>)
 80033e2:	4013      	ands	r3, r2
 80033e4:	d100      	bne.n	80033e8 <HAL_UART_IRQHandler+0x94>
 80033e6:	e107      	b.n	80035f8 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80033e8:	23a4      	movs	r3, #164	@ 0xa4
 80033ea:	18fb      	adds	r3, r7, r3
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2201      	movs	r2, #1
 80033f0:	4013      	ands	r3, r2
 80033f2:	d012      	beq.n	800341a <HAL_UART_IRQHandler+0xc6>
 80033f4:	23a0      	movs	r3, #160	@ 0xa0
 80033f6:	18fb      	adds	r3, r7, r3
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	2380      	movs	r3, #128	@ 0x80
 80033fc:	005b      	lsls	r3, r3, #1
 80033fe:	4013      	ands	r3, r2
 8003400:	d00b      	beq.n	800341a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2201      	movs	r2, #1
 8003408:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2284      	movs	r2, #132	@ 0x84
 800340e:	589b      	ldr	r3, [r3, r2]
 8003410:	2201      	movs	r2, #1
 8003412:	431a      	orrs	r2, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2184      	movs	r1, #132	@ 0x84
 8003418:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800341a:	23a4      	movs	r3, #164	@ 0xa4
 800341c:	18fb      	adds	r3, r7, r3
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2202      	movs	r2, #2
 8003422:	4013      	ands	r3, r2
 8003424:	d011      	beq.n	800344a <HAL_UART_IRQHandler+0xf6>
 8003426:	239c      	movs	r3, #156	@ 0x9c
 8003428:	18fb      	adds	r3, r7, r3
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2201      	movs	r2, #1
 800342e:	4013      	ands	r3, r2
 8003430:	d00b      	beq.n	800344a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2202      	movs	r2, #2
 8003438:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2284      	movs	r2, #132	@ 0x84
 800343e:	589b      	ldr	r3, [r3, r2]
 8003440:	2204      	movs	r2, #4
 8003442:	431a      	orrs	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2184      	movs	r1, #132	@ 0x84
 8003448:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800344a:	23a4      	movs	r3, #164	@ 0xa4
 800344c:	18fb      	adds	r3, r7, r3
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2204      	movs	r2, #4
 8003452:	4013      	ands	r3, r2
 8003454:	d011      	beq.n	800347a <HAL_UART_IRQHandler+0x126>
 8003456:	239c      	movs	r3, #156	@ 0x9c
 8003458:	18fb      	adds	r3, r7, r3
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2201      	movs	r2, #1
 800345e:	4013      	ands	r3, r2
 8003460:	d00b      	beq.n	800347a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	2204      	movs	r2, #4
 8003468:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2284      	movs	r2, #132	@ 0x84
 800346e:	589b      	ldr	r3, [r3, r2]
 8003470:	2202      	movs	r2, #2
 8003472:	431a      	orrs	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2184      	movs	r1, #132	@ 0x84
 8003478:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800347a:	23a4      	movs	r3, #164	@ 0xa4
 800347c:	18fb      	adds	r3, r7, r3
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2208      	movs	r2, #8
 8003482:	4013      	ands	r3, r2
 8003484:	d017      	beq.n	80034b6 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003486:	23a0      	movs	r3, #160	@ 0xa0
 8003488:	18fb      	adds	r3, r7, r3
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2220      	movs	r2, #32
 800348e:	4013      	ands	r3, r2
 8003490:	d105      	bne.n	800349e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003492:	239c      	movs	r3, #156	@ 0x9c
 8003494:	18fb      	adds	r3, r7, r3
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2201      	movs	r2, #1
 800349a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800349c:	d00b      	beq.n	80034b6 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2208      	movs	r2, #8
 80034a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2284      	movs	r2, #132	@ 0x84
 80034aa:	589b      	ldr	r3, [r3, r2]
 80034ac:	2208      	movs	r2, #8
 80034ae:	431a      	orrs	r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2184      	movs	r1, #132	@ 0x84
 80034b4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80034b6:	23a4      	movs	r3, #164	@ 0xa4
 80034b8:	18fb      	adds	r3, r7, r3
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	2380      	movs	r3, #128	@ 0x80
 80034be:	011b      	lsls	r3, r3, #4
 80034c0:	4013      	ands	r3, r2
 80034c2:	d013      	beq.n	80034ec <HAL_UART_IRQHandler+0x198>
 80034c4:	23a0      	movs	r3, #160	@ 0xa0
 80034c6:	18fb      	adds	r3, r7, r3
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	2380      	movs	r3, #128	@ 0x80
 80034cc:	04db      	lsls	r3, r3, #19
 80034ce:	4013      	ands	r3, r2
 80034d0:	d00c      	beq.n	80034ec <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2280      	movs	r2, #128	@ 0x80
 80034d8:	0112      	lsls	r2, r2, #4
 80034da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2284      	movs	r2, #132	@ 0x84
 80034e0:	589b      	ldr	r3, [r3, r2]
 80034e2:	2220      	movs	r2, #32
 80034e4:	431a      	orrs	r2, r3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2184      	movs	r1, #132	@ 0x84
 80034ea:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2284      	movs	r2, #132	@ 0x84
 80034f0:	589b      	ldr	r3, [r3, r2]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d100      	bne.n	80034f8 <HAL_UART_IRQHandler+0x1a4>
 80034f6:	e1ff      	b.n	80038f8 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80034f8:	23a4      	movs	r3, #164	@ 0xa4
 80034fa:	18fb      	adds	r3, r7, r3
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2220      	movs	r2, #32
 8003500:	4013      	ands	r3, r2
 8003502:	d00e      	beq.n	8003522 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003504:	23a0      	movs	r3, #160	@ 0xa0
 8003506:	18fb      	adds	r3, r7, r3
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2220      	movs	r2, #32
 800350c:	4013      	ands	r3, r2
 800350e:	d008      	beq.n	8003522 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003514:	2b00      	cmp	r3, #0
 8003516:	d004      	beq.n	8003522 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	0010      	movs	r0, r2
 8003520:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2284      	movs	r2, #132	@ 0x84
 8003526:	589b      	ldr	r3, [r3, r2]
 8003528:	2194      	movs	r1, #148	@ 0x94
 800352a:	187a      	adds	r2, r7, r1
 800352c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	2240      	movs	r2, #64	@ 0x40
 8003536:	4013      	ands	r3, r2
 8003538:	2b40      	cmp	r3, #64	@ 0x40
 800353a:	d004      	beq.n	8003546 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800353c:	187b      	adds	r3, r7, r1
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2228      	movs	r2, #40	@ 0x28
 8003542:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003544:	d047      	beq.n	80035d6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	0018      	movs	r0, r3
 800354a:	f000 fd0b 	bl	8003f64 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	2240      	movs	r2, #64	@ 0x40
 8003556:	4013      	ands	r3, r2
 8003558:	2b40      	cmp	r3, #64	@ 0x40
 800355a:	d137      	bne.n	80035cc <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800355c:	f3ef 8310 	mrs	r3, PRIMASK
 8003560:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8003562:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003564:	2090      	movs	r0, #144	@ 0x90
 8003566:	183a      	adds	r2, r7, r0
 8003568:	6013      	str	r3, [r2, #0]
 800356a:	2301      	movs	r3, #1
 800356c:	667b      	str	r3, [r7, #100]	@ 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800356e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003570:	f383 8810 	msr	PRIMASK, r3
}
 8003574:	46c0      	nop			@ (mov r8, r8)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	689a      	ldr	r2, [r3, #8]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2140      	movs	r1, #64	@ 0x40
 8003582:	438a      	bics	r2, r1
 8003584:	609a      	str	r2, [r3, #8]
 8003586:	183b      	adds	r3, r7, r0
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800358c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800358e:	f383 8810 	msr	PRIMASK, r3
}
 8003592:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003598:	2b00      	cmp	r3, #0
 800359a:	d012      	beq.n	80035c2 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035a0:	4a14      	ldr	r2, [pc, #80]	@ (80035f4 <HAL_UART_IRQHandler+0x2a0>)
 80035a2:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035a8:	0018      	movs	r0, r3
 80035aa:	f7fe fb05 	bl	8001bb8 <HAL_DMA_Abort_IT>
 80035ae:	1e03      	subs	r3, r0, #0
 80035b0:	d01a      	beq.n	80035e8 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035bc:	0018      	movs	r0, r3
 80035be:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035c0:	e012      	b.n	80035e8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	0018      	movs	r0, r3
 80035c6:	f000 f9ad 	bl	8003924 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035ca:	e00d      	b.n	80035e8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	0018      	movs	r0, r3
 80035d0:	f000 f9a8 	bl	8003924 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035d4:	e008      	b.n	80035e8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	0018      	movs	r0, r3
 80035da:	f000 f9a3 	bl	8003924 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2284      	movs	r2, #132	@ 0x84
 80035e2:	2100      	movs	r1, #0
 80035e4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80035e6:	e187      	b.n	80038f8 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035e8:	46c0      	nop			@ (mov r8, r8)
    return;
 80035ea:	e185      	b.n	80038f8 <HAL_UART_IRQHandler+0x5a4>
 80035ec:	0000080f 	.word	0x0000080f
 80035f0:	04000120 	.word	0x04000120
 80035f4:	0800402d 	.word	0x0800402d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d000      	beq.n	8003602 <HAL_UART_IRQHandler+0x2ae>
 8003600:	e139      	b.n	8003876 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003602:	23a4      	movs	r3, #164	@ 0xa4
 8003604:	18fb      	adds	r3, r7, r3
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2210      	movs	r2, #16
 800360a:	4013      	ands	r3, r2
 800360c:	d100      	bne.n	8003610 <HAL_UART_IRQHandler+0x2bc>
 800360e:	e132      	b.n	8003876 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003610:	23a0      	movs	r3, #160	@ 0xa0
 8003612:	18fb      	adds	r3, r7, r3
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	2210      	movs	r2, #16
 8003618:	4013      	ands	r3, r2
 800361a:	d100      	bne.n	800361e <HAL_UART_IRQHandler+0x2ca>
 800361c:	e12b      	b.n	8003876 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2210      	movs	r2, #16
 8003624:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	2240      	movs	r2, #64	@ 0x40
 800362e:	4013      	ands	r3, r2
 8003630:	2b40      	cmp	r3, #64	@ 0x40
 8003632:	d000      	beq.n	8003636 <HAL_UART_IRQHandler+0x2e2>
 8003634:	e09f      	b.n	8003776 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	685a      	ldr	r2, [r3, #4]
 800363e:	217e      	movs	r1, #126	@ 0x7e
 8003640:	187b      	adds	r3, r7, r1
 8003642:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003644:	187b      	adds	r3, r7, r1
 8003646:	881b      	ldrh	r3, [r3, #0]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d100      	bne.n	800364e <HAL_UART_IRQHandler+0x2fa>
 800364c:	e156      	b.n	80038fc <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2258      	movs	r2, #88	@ 0x58
 8003652:	5a9b      	ldrh	r3, [r3, r2]
 8003654:	187a      	adds	r2, r7, r1
 8003656:	8812      	ldrh	r2, [r2, #0]
 8003658:	429a      	cmp	r2, r3
 800365a:	d300      	bcc.n	800365e <HAL_UART_IRQHandler+0x30a>
 800365c:	e14e      	b.n	80038fc <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	187a      	adds	r2, r7, r1
 8003662:	215a      	movs	r1, #90	@ 0x5a
 8003664:	8812      	ldrh	r2, [r2, #0]
 8003666:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800366c:	699b      	ldr	r3, [r3, #24]
 800366e:	2b20      	cmp	r3, #32
 8003670:	d06f      	beq.n	8003752 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003672:	f3ef 8310 	mrs	r3, PRIMASK
 8003676:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800367a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800367c:	2301      	movs	r3, #1
 800367e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003680:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003682:	f383 8810 	msr	PRIMASK, r3
}
 8003686:	46c0      	nop			@ (mov r8, r8)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	499e      	ldr	r1, [pc, #632]	@ (800390c <HAL_UART_IRQHandler+0x5b8>)
 8003694:	400a      	ands	r2, r1
 8003696:	601a      	str	r2, [r3, #0]
 8003698:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800369a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800369c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800369e:	f383 8810 	msr	PRIMASK, r3
}
 80036a2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036a4:	f3ef 8310 	mrs	r3, PRIMASK
 80036a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80036aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036ac:	677b      	str	r3, [r7, #116]	@ 0x74
 80036ae:	2301      	movs	r3, #1
 80036b0:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036b4:	f383 8810 	msr	PRIMASK, r3
}
 80036b8:	46c0      	nop			@ (mov r8, r8)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	689a      	ldr	r2, [r3, #8]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2101      	movs	r1, #1
 80036c6:	438a      	bics	r2, r1
 80036c8:	609a      	str	r2, [r3, #8]
 80036ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80036cc:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036d0:	f383 8810 	msr	PRIMASK, r3
}
 80036d4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036d6:	f3ef 8310 	mrs	r3, PRIMASK
 80036da:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80036dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036de:	673b      	str	r3, [r7, #112]	@ 0x70
 80036e0:	2301      	movs	r3, #1
 80036e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036e6:	f383 8810 	msr	PRIMASK, r3
}
 80036ea:	46c0      	nop			@ (mov r8, r8)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	689a      	ldr	r2, [r3, #8]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2140      	movs	r1, #64	@ 0x40
 80036f8:	438a      	bics	r2, r1
 80036fa:	609a      	str	r2, [r3, #8]
 80036fc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80036fe:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003700:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003702:	f383 8810 	msr	PRIMASK, r3
}
 8003706:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2280      	movs	r2, #128	@ 0x80
 800370c:	2120      	movs	r1, #32
 800370e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003716:	f3ef 8310 	mrs	r3, PRIMASK
 800371a:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 800371c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800371e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003720:	2301      	movs	r3, #1
 8003722:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003724:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003726:	f383 8810 	msr	PRIMASK, r3
}
 800372a:	46c0      	nop			@ (mov r8, r8)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2110      	movs	r1, #16
 8003738:	438a      	bics	r2, r1
 800373a:	601a      	str	r2, [r3, #0]
 800373c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800373e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003740:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003742:	f383 8810 	msr	PRIMASK, r3
}
 8003746:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800374c:	0018      	movs	r0, r3
 800374e:	f7fe f9fb 	bl	8001b48 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2202      	movs	r2, #2
 8003756:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2258      	movs	r2, #88	@ 0x58
 800375c:	5a9a      	ldrh	r2, [r3, r2]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	215a      	movs	r1, #90	@ 0x5a
 8003762:	5a5b      	ldrh	r3, [r3, r1]
 8003764:	b29b      	uxth	r3, r3
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	b29a      	uxth	r2, r3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	0011      	movs	r1, r2
 800376e:	0018      	movs	r0, r3
 8003770:	f000 f8e0 	bl	8003934 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003774:	e0c2      	b.n	80038fc <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2258      	movs	r2, #88	@ 0x58
 800377a:	5a99      	ldrh	r1, [r3, r2]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	225a      	movs	r2, #90	@ 0x5a
 8003780:	5a9b      	ldrh	r3, [r3, r2]
 8003782:	b29a      	uxth	r2, r3
 8003784:	208e      	movs	r0, #142	@ 0x8e
 8003786:	183b      	adds	r3, r7, r0
 8003788:	1a8a      	subs	r2, r1, r2
 800378a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	225a      	movs	r2, #90	@ 0x5a
 8003790:	5a9b      	ldrh	r3, [r3, r2]
 8003792:	b29b      	uxth	r3, r3
 8003794:	2b00      	cmp	r3, #0
 8003796:	d100      	bne.n	800379a <HAL_UART_IRQHandler+0x446>
 8003798:	e0b2      	b.n	8003900 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 800379a:	183b      	adds	r3, r7, r0
 800379c:	881b      	ldrh	r3, [r3, #0]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d100      	bne.n	80037a4 <HAL_UART_IRQHandler+0x450>
 80037a2:	e0ad      	b.n	8003900 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037a4:	f3ef 8310 	mrs	r3, PRIMASK
 80037a8:	60fb      	str	r3, [r7, #12]
  return(result);
 80037aa:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037ac:	2488      	movs	r4, #136	@ 0x88
 80037ae:	193a      	adds	r2, r7, r4
 80037b0:	6013      	str	r3, [r2, #0]
 80037b2:	2301      	movs	r3, #1
 80037b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	f383 8810 	msr	PRIMASK, r3
}
 80037bc:	46c0      	nop			@ (mov r8, r8)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4951      	ldr	r1, [pc, #324]	@ (8003910 <HAL_UART_IRQHandler+0x5bc>)
 80037ca:	400a      	ands	r2, r1
 80037cc:	601a      	str	r2, [r3, #0]
 80037ce:	193b      	adds	r3, r7, r4
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	f383 8810 	msr	PRIMASK, r3
}
 80037da:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037dc:	f3ef 8310 	mrs	r3, PRIMASK
 80037e0:	61bb      	str	r3, [r7, #24]
  return(result);
 80037e2:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037e4:	2484      	movs	r4, #132	@ 0x84
 80037e6:	193a      	adds	r2, r7, r4
 80037e8:	6013      	str	r3, [r2, #0]
 80037ea:	2301      	movs	r3, #1
 80037ec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	f383 8810 	msr	PRIMASK, r3
}
 80037f4:	46c0      	nop			@ (mov r8, r8)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	689a      	ldr	r2, [r3, #8]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2101      	movs	r1, #1
 8003802:	438a      	bics	r2, r1
 8003804:	609a      	str	r2, [r3, #8]
 8003806:	193b      	adds	r3, r7, r4
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800380c:	6a3b      	ldr	r3, [r7, #32]
 800380e:	f383 8810 	msr	PRIMASK, r3
}
 8003812:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2280      	movs	r2, #128	@ 0x80
 8003818:	2120      	movs	r1, #32
 800381a:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003828:	f3ef 8310 	mrs	r3, PRIMASK
 800382c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800382e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003830:	2480      	movs	r4, #128	@ 0x80
 8003832:	193a      	adds	r2, r7, r4
 8003834:	6013      	str	r3, [r2, #0]
 8003836:	2301      	movs	r3, #1
 8003838:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800383a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800383c:	f383 8810 	msr	PRIMASK, r3
}
 8003840:	46c0      	nop			@ (mov r8, r8)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2110      	movs	r1, #16
 800384e:	438a      	bics	r2, r1
 8003850:	601a      	str	r2, [r3, #0]
 8003852:	193b      	adds	r3, r7, r4
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800385a:	f383 8810 	msr	PRIMASK, r3
}
 800385e:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2202      	movs	r2, #2
 8003864:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003866:	183b      	adds	r3, r7, r0
 8003868:	881a      	ldrh	r2, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	0011      	movs	r1, r2
 800386e:	0018      	movs	r0, r3
 8003870:	f000 f860 	bl	8003934 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003874:	e044      	b.n	8003900 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003876:	23a4      	movs	r3, #164	@ 0xa4
 8003878:	18fb      	adds	r3, r7, r3
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	2380      	movs	r3, #128	@ 0x80
 800387e:	035b      	lsls	r3, r3, #13
 8003880:	4013      	ands	r3, r2
 8003882:	d010      	beq.n	80038a6 <HAL_UART_IRQHandler+0x552>
 8003884:	239c      	movs	r3, #156	@ 0x9c
 8003886:	18fb      	adds	r3, r7, r3
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	2380      	movs	r3, #128	@ 0x80
 800388c:	03db      	lsls	r3, r3, #15
 800388e:	4013      	ands	r3, r2
 8003890:	d009      	beq.n	80038a6 <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2280      	movs	r2, #128	@ 0x80
 8003898:	0352      	lsls	r2, r2, #13
 800389a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	0018      	movs	r0, r3
 80038a0:	f000 fc06 	bl	80040b0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80038a4:	e02f      	b.n	8003906 <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80038a6:	23a4      	movs	r3, #164	@ 0xa4
 80038a8:	18fb      	adds	r3, r7, r3
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2280      	movs	r2, #128	@ 0x80
 80038ae:	4013      	ands	r3, r2
 80038b0:	d00f      	beq.n	80038d2 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80038b2:	23a0      	movs	r3, #160	@ 0xa0
 80038b4:	18fb      	adds	r3, r7, r3
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	2280      	movs	r2, #128	@ 0x80
 80038ba:	4013      	ands	r3, r2
 80038bc:	d009      	beq.n	80038d2 <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d01e      	beq.n	8003904 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	0010      	movs	r0, r2
 80038ce:	4798      	blx	r3
    }
    return;
 80038d0:	e018      	b.n	8003904 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80038d2:	23a4      	movs	r3, #164	@ 0xa4
 80038d4:	18fb      	adds	r3, r7, r3
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2240      	movs	r2, #64	@ 0x40
 80038da:	4013      	ands	r3, r2
 80038dc:	d013      	beq.n	8003906 <HAL_UART_IRQHandler+0x5b2>
 80038de:	23a0      	movs	r3, #160	@ 0xa0
 80038e0:	18fb      	adds	r3, r7, r3
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2240      	movs	r2, #64	@ 0x40
 80038e6:	4013      	ands	r3, r2
 80038e8:	d00d      	beq.n	8003906 <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	0018      	movs	r0, r3
 80038ee:	f000 fbb4 	bl	800405a <UART_EndTransmit_IT>
    return;
 80038f2:	e008      	b.n	8003906 <HAL_UART_IRQHandler+0x5b2>
      return;
 80038f4:	46c0      	nop			@ (mov r8, r8)
 80038f6:	e006      	b.n	8003906 <HAL_UART_IRQHandler+0x5b2>
    return;
 80038f8:	46c0      	nop			@ (mov r8, r8)
 80038fa:	e004      	b.n	8003906 <HAL_UART_IRQHandler+0x5b2>
      return;
 80038fc:	46c0      	nop			@ (mov r8, r8)
 80038fe:	e002      	b.n	8003906 <HAL_UART_IRQHandler+0x5b2>
      return;
 8003900:	46c0      	nop			@ (mov r8, r8)
 8003902:	e000      	b.n	8003906 <HAL_UART_IRQHandler+0x5b2>
    return;
 8003904:	46c0      	nop			@ (mov r8, r8)
  }

}
 8003906:	46bd      	mov	sp, r7
 8003908:	b02b      	add	sp, #172	@ 0xac
 800390a:	bd90      	pop	{r4, r7, pc}
 800390c:	fffffeff 	.word	0xfffffeff
 8003910:	fffffedf 	.word	0xfffffedf

08003914 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800391c:	46c0      	nop			@ (mov r8, r8)
 800391e:	46bd      	mov	sp, r7
 8003920:	b002      	add	sp, #8
 8003922:	bd80      	pop	{r7, pc}

08003924 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800392c:	46c0      	nop			@ (mov r8, r8)
 800392e:	46bd      	mov	sp, r7
 8003930:	b002      	add	sp, #8
 8003932:	bd80      	pop	{r7, pc}

08003934 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	000a      	movs	r2, r1
 800393e:	1cbb      	adds	r3, r7, #2
 8003940:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003942:	46c0      	nop			@ (mov r8, r8)
 8003944:	46bd      	mov	sp, r7
 8003946:	b002      	add	sp, #8
 8003948:	bd80      	pop	{r7, pc}
	...

0800394c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b088      	sub	sp, #32
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003954:	231e      	movs	r3, #30
 8003956:	18fb      	adds	r3, r7, r3
 8003958:	2200      	movs	r2, #0
 800395a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	689a      	ldr	r2, [r3, #8]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	691b      	ldr	r3, [r3, #16]
 8003964:	431a      	orrs	r2, r3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	431a      	orrs	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	69db      	ldr	r3, [r3, #28]
 8003970:	4313      	orrs	r3, r2
 8003972:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a8d      	ldr	r2, [pc, #564]	@ (8003bb0 <UART_SetConfig+0x264>)
 800397c:	4013      	ands	r3, r2
 800397e:	0019      	movs	r1, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	697a      	ldr	r2, [r7, #20]
 8003986:	430a      	orrs	r2, r1
 8003988:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	4a88      	ldr	r2, [pc, #544]	@ (8003bb4 <UART_SetConfig+0x268>)
 8003992:	4013      	ands	r3, r2
 8003994:	0019      	movs	r1, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	68da      	ldr	r2, [r3, #12]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	430a      	orrs	r2, r1
 80039a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	699b      	ldr	r3, [r3, #24]
 80039a6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a1b      	ldr	r3, [r3, #32]
 80039ac:	697a      	ldr	r2, [r7, #20]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	4a7f      	ldr	r2, [pc, #508]	@ (8003bb8 <UART_SetConfig+0x26c>)
 80039ba:	4013      	ands	r3, r2
 80039bc:	0019      	movs	r1, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	697a      	ldr	r2, [r7, #20]
 80039c4:	430a      	orrs	r2, r1
 80039c6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a7b      	ldr	r2, [pc, #492]	@ (8003bbc <UART_SetConfig+0x270>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d127      	bne.n	8003a22 <UART_SetConfig+0xd6>
 80039d2:	4b7b      	ldr	r3, [pc, #492]	@ (8003bc0 <UART_SetConfig+0x274>)
 80039d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039d6:	2203      	movs	r2, #3
 80039d8:	4013      	ands	r3, r2
 80039da:	2b03      	cmp	r3, #3
 80039dc:	d00d      	beq.n	80039fa <UART_SetConfig+0xae>
 80039de:	d81b      	bhi.n	8003a18 <UART_SetConfig+0xcc>
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d014      	beq.n	8003a0e <UART_SetConfig+0xc2>
 80039e4:	d818      	bhi.n	8003a18 <UART_SetConfig+0xcc>
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d002      	beq.n	80039f0 <UART_SetConfig+0xa4>
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d00a      	beq.n	8003a04 <UART_SetConfig+0xb8>
 80039ee:	e013      	b.n	8003a18 <UART_SetConfig+0xcc>
 80039f0:	231f      	movs	r3, #31
 80039f2:	18fb      	adds	r3, r7, r3
 80039f4:	2200      	movs	r2, #0
 80039f6:	701a      	strb	r2, [r3, #0]
 80039f8:	e021      	b.n	8003a3e <UART_SetConfig+0xf2>
 80039fa:	231f      	movs	r3, #31
 80039fc:	18fb      	adds	r3, r7, r3
 80039fe:	2202      	movs	r2, #2
 8003a00:	701a      	strb	r2, [r3, #0]
 8003a02:	e01c      	b.n	8003a3e <UART_SetConfig+0xf2>
 8003a04:	231f      	movs	r3, #31
 8003a06:	18fb      	adds	r3, r7, r3
 8003a08:	2204      	movs	r2, #4
 8003a0a:	701a      	strb	r2, [r3, #0]
 8003a0c:	e017      	b.n	8003a3e <UART_SetConfig+0xf2>
 8003a0e:	231f      	movs	r3, #31
 8003a10:	18fb      	adds	r3, r7, r3
 8003a12:	2208      	movs	r2, #8
 8003a14:	701a      	strb	r2, [r3, #0]
 8003a16:	e012      	b.n	8003a3e <UART_SetConfig+0xf2>
 8003a18:	231f      	movs	r3, #31
 8003a1a:	18fb      	adds	r3, r7, r3
 8003a1c:	2210      	movs	r2, #16
 8003a1e:	701a      	strb	r2, [r3, #0]
 8003a20:	e00d      	b.n	8003a3e <UART_SetConfig+0xf2>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a67      	ldr	r2, [pc, #412]	@ (8003bc4 <UART_SetConfig+0x278>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d104      	bne.n	8003a36 <UART_SetConfig+0xea>
 8003a2c:	231f      	movs	r3, #31
 8003a2e:	18fb      	adds	r3, r7, r3
 8003a30:	2200      	movs	r2, #0
 8003a32:	701a      	strb	r2, [r3, #0]
 8003a34:	e003      	b.n	8003a3e <UART_SetConfig+0xf2>
 8003a36:	231f      	movs	r3, #31
 8003a38:	18fb      	adds	r3, r7, r3
 8003a3a:	2210      	movs	r2, #16
 8003a3c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	69da      	ldr	r2, [r3, #28]
 8003a42:	2380      	movs	r3, #128	@ 0x80
 8003a44:	021b      	lsls	r3, r3, #8
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d15c      	bne.n	8003b04 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8003a4a:	231f      	movs	r3, #31
 8003a4c:	18fb      	adds	r3, r7, r3
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	2b08      	cmp	r3, #8
 8003a52:	d015      	beq.n	8003a80 <UART_SetConfig+0x134>
 8003a54:	dc18      	bgt.n	8003a88 <UART_SetConfig+0x13c>
 8003a56:	2b04      	cmp	r3, #4
 8003a58:	d00d      	beq.n	8003a76 <UART_SetConfig+0x12a>
 8003a5a:	dc15      	bgt.n	8003a88 <UART_SetConfig+0x13c>
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d002      	beq.n	8003a66 <UART_SetConfig+0x11a>
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d005      	beq.n	8003a70 <UART_SetConfig+0x124>
 8003a64:	e010      	b.n	8003a88 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a66:	f7ff f9c5 	bl	8002df4 <HAL_RCC_GetPCLK1Freq>
 8003a6a:	0003      	movs	r3, r0
 8003a6c:	61bb      	str	r3, [r7, #24]
        break;
 8003a6e:	e012      	b.n	8003a96 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a70:	4b55      	ldr	r3, [pc, #340]	@ (8003bc8 <UART_SetConfig+0x27c>)
 8003a72:	61bb      	str	r3, [r7, #24]
        break;
 8003a74:	e00f      	b.n	8003a96 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a76:	f7ff f941 	bl	8002cfc <HAL_RCC_GetSysClockFreq>
 8003a7a:	0003      	movs	r3, r0
 8003a7c:	61bb      	str	r3, [r7, #24]
        break;
 8003a7e:	e00a      	b.n	8003a96 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a80:	2380      	movs	r3, #128	@ 0x80
 8003a82:	021b      	lsls	r3, r3, #8
 8003a84:	61bb      	str	r3, [r7, #24]
        break;
 8003a86:	e006      	b.n	8003a96 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a8c:	231e      	movs	r3, #30
 8003a8e:	18fb      	adds	r3, r7, r3
 8003a90:	2201      	movs	r2, #1
 8003a92:	701a      	strb	r2, [r3, #0]
        break;
 8003a94:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d100      	bne.n	8003a9e <UART_SetConfig+0x152>
 8003a9c:	e07a      	b.n	8003b94 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	005a      	lsls	r2, r3, #1
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	085b      	lsrs	r3, r3, #1
 8003aa8:	18d2      	adds	r2, r2, r3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	0019      	movs	r1, r3
 8003ab0:	0010      	movs	r0, r2
 8003ab2:	f7fc fb3b 	bl	800012c <__udivsi3>
 8003ab6:	0003      	movs	r3, r0
 8003ab8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	2b0f      	cmp	r3, #15
 8003abe:	d91c      	bls.n	8003afa <UART_SetConfig+0x1ae>
 8003ac0:	693a      	ldr	r2, [r7, #16]
 8003ac2:	2380      	movs	r3, #128	@ 0x80
 8003ac4:	025b      	lsls	r3, r3, #9
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d217      	bcs.n	8003afa <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	b29a      	uxth	r2, r3
 8003ace:	200e      	movs	r0, #14
 8003ad0:	183b      	adds	r3, r7, r0
 8003ad2:	210f      	movs	r1, #15
 8003ad4:	438a      	bics	r2, r1
 8003ad6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	085b      	lsrs	r3, r3, #1
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	2207      	movs	r2, #7
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	b299      	uxth	r1, r3
 8003ae4:	183b      	adds	r3, r7, r0
 8003ae6:	183a      	adds	r2, r7, r0
 8003ae8:	8812      	ldrh	r2, [r2, #0]
 8003aea:	430a      	orrs	r2, r1
 8003aec:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	183a      	adds	r2, r7, r0
 8003af4:	8812      	ldrh	r2, [r2, #0]
 8003af6:	60da      	str	r2, [r3, #12]
 8003af8:	e04c      	b.n	8003b94 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8003afa:	231e      	movs	r3, #30
 8003afc:	18fb      	adds	r3, r7, r3
 8003afe:	2201      	movs	r2, #1
 8003b00:	701a      	strb	r2, [r3, #0]
 8003b02:	e047      	b.n	8003b94 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003b04:	231f      	movs	r3, #31
 8003b06:	18fb      	adds	r3, r7, r3
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	2b08      	cmp	r3, #8
 8003b0c:	d015      	beq.n	8003b3a <UART_SetConfig+0x1ee>
 8003b0e:	dc18      	bgt.n	8003b42 <UART_SetConfig+0x1f6>
 8003b10:	2b04      	cmp	r3, #4
 8003b12:	d00d      	beq.n	8003b30 <UART_SetConfig+0x1e4>
 8003b14:	dc15      	bgt.n	8003b42 <UART_SetConfig+0x1f6>
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d002      	beq.n	8003b20 <UART_SetConfig+0x1d4>
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d005      	beq.n	8003b2a <UART_SetConfig+0x1de>
 8003b1e:	e010      	b.n	8003b42 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b20:	f7ff f968 	bl	8002df4 <HAL_RCC_GetPCLK1Freq>
 8003b24:	0003      	movs	r3, r0
 8003b26:	61bb      	str	r3, [r7, #24]
        break;
 8003b28:	e012      	b.n	8003b50 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b2a:	4b27      	ldr	r3, [pc, #156]	@ (8003bc8 <UART_SetConfig+0x27c>)
 8003b2c:	61bb      	str	r3, [r7, #24]
        break;
 8003b2e:	e00f      	b.n	8003b50 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b30:	f7ff f8e4 	bl	8002cfc <HAL_RCC_GetSysClockFreq>
 8003b34:	0003      	movs	r3, r0
 8003b36:	61bb      	str	r3, [r7, #24]
        break;
 8003b38:	e00a      	b.n	8003b50 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b3a:	2380      	movs	r3, #128	@ 0x80
 8003b3c:	021b      	lsls	r3, r3, #8
 8003b3e:	61bb      	str	r3, [r7, #24]
        break;
 8003b40:	e006      	b.n	8003b50 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003b42:	2300      	movs	r3, #0
 8003b44:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003b46:	231e      	movs	r3, #30
 8003b48:	18fb      	adds	r3, r7, r3
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	701a      	strb	r2, [r3, #0]
        break;
 8003b4e:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d01e      	beq.n	8003b94 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	085a      	lsrs	r2, r3, #1
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	18d2      	adds	r2, r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	0019      	movs	r1, r3
 8003b66:	0010      	movs	r0, r2
 8003b68:	f7fc fae0 	bl	800012c <__udivsi3>
 8003b6c:	0003      	movs	r3, r0
 8003b6e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	2b0f      	cmp	r3, #15
 8003b74:	d90a      	bls.n	8003b8c <UART_SetConfig+0x240>
 8003b76:	693a      	ldr	r2, [r7, #16]
 8003b78:	2380      	movs	r3, #128	@ 0x80
 8003b7a:	025b      	lsls	r3, r3, #9
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d205      	bcs.n	8003b8c <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	b29a      	uxth	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	60da      	str	r2, [r3, #12]
 8003b8a:	e003      	b.n	8003b94 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8003b8c:	231e      	movs	r3, #30
 8003b8e:	18fb      	adds	r3, r7, r3
 8003b90:	2201      	movs	r2, #1
 8003b92:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003ba0:	231e      	movs	r3, #30
 8003ba2:	18fb      	adds	r3, r7, r3
 8003ba4:	781b      	ldrb	r3, [r3, #0]
}
 8003ba6:	0018      	movs	r0, r3
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	b008      	add	sp, #32
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	46c0      	nop			@ (mov r8, r8)
 8003bb0:	efff69f3 	.word	0xefff69f3
 8003bb4:	ffffcfff 	.word	0xffffcfff
 8003bb8:	fffff4ff 	.word	0xfffff4ff
 8003bbc:	40013800 	.word	0x40013800
 8003bc0:	40021000 	.word	0x40021000
 8003bc4:	40004400 	.word	0x40004400
 8003bc8:	007a1200 	.word	0x007a1200

08003bcc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd8:	2208      	movs	r2, #8
 8003bda:	4013      	ands	r3, r2
 8003bdc:	d00b      	beq.n	8003bf6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	4a4a      	ldr	r2, [pc, #296]	@ (8003d10 <UART_AdvFeatureConfig+0x144>)
 8003be6:	4013      	ands	r3, r2
 8003be8:	0019      	movs	r1, r3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	430a      	orrs	r2, r1
 8003bf4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	d00b      	beq.n	8003c18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	4a43      	ldr	r2, [pc, #268]	@ (8003d14 <UART_AdvFeatureConfig+0x148>)
 8003c08:	4013      	ands	r3, r2
 8003c0a:	0019      	movs	r1, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	430a      	orrs	r2, r1
 8003c16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c1c:	2202      	movs	r2, #2
 8003c1e:	4013      	ands	r3, r2
 8003c20:	d00b      	beq.n	8003c3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	4a3b      	ldr	r2, [pc, #236]	@ (8003d18 <UART_AdvFeatureConfig+0x14c>)
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	0019      	movs	r1, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	430a      	orrs	r2, r1
 8003c38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c3e:	2204      	movs	r2, #4
 8003c40:	4013      	ands	r3, r2
 8003c42:	d00b      	beq.n	8003c5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	4a34      	ldr	r2, [pc, #208]	@ (8003d1c <UART_AdvFeatureConfig+0x150>)
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	0019      	movs	r1, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	430a      	orrs	r2, r1
 8003c5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c60:	2210      	movs	r2, #16
 8003c62:	4013      	ands	r3, r2
 8003c64:	d00b      	beq.n	8003c7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	4a2c      	ldr	r2, [pc, #176]	@ (8003d20 <UART_AdvFeatureConfig+0x154>)
 8003c6e:	4013      	ands	r3, r2
 8003c70:	0019      	movs	r1, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c82:	2220      	movs	r2, #32
 8003c84:	4013      	ands	r3, r2
 8003c86:	d00b      	beq.n	8003ca0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	4a25      	ldr	r2, [pc, #148]	@ (8003d24 <UART_AdvFeatureConfig+0x158>)
 8003c90:	4013      	ands	r3, r2
 8003c92:	0019      	movs	r1, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	430a      	orrs	r2, r1
 8003c9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca4:	2240      	movs	r2, #64	@ 0x40
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	d01d      	beq.n	8003ce6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	4a1d      	ldr	r2, [pc, #116]	@ (8003d28 <UART_AdvFeatureConfig+0x15c>)
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	0019      	movs	r1, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	430a      	orrs	r2, r1
 8003cc0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003cc6:	2380      	movs	r3, #128	@ 0x80
 8003cc8:	035b      	lsls	r3, r3, #13
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d10b      	bne.n	8003ce6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	4a15      	ldr	r2, [pc, #84]	@ (8003d2c <UART_AdvFeatureConfig+0x160>)
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	0019      	movs	r1, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cea:	2280      	movs	r2, #128	@ 0x80
 8003cec:	4013      	ands	r3, r2
 8003cee:	d00b      	beq.n	8003d08 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	4a0e      	ldr	r2, [pc, #56]	@ (8003d30 <UART_AdvFeatureConfig+0x164>)
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	0019      	movs	r1, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	430a      	orrs	r2, r1
 8003d06:	605a      	str	r2, [r3, #4]
  }
}
 8003d08:	46c0      	nop			@ (mov r8, r8)
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	b002      	add	sp, #8
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	ffff7fff 	.word	0xffff7fff
 8003d14:	fffdffff 	.word	0xfffdffff
 8003d18:	fffeffff 	.word	0xfffeffff
 8003d1c:	fffbffff 	.word	0xfffbffff
 8003d20:	ffffefff 	.word	0xffffefff
 8003d24:	ffffdfff 	.word	0xffffdfff
 8003d28:	ffefffff 	.word	0xffefffff
 8003d2c:	ff9fffff 	.word	0xff9fffff
 8003d30:	fff7ffff 	.word	0xfff7ffff

08003d34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b092      	sub	sp, #72	@ 0x48
 8003d38:	af02      	add	r7, sp, #8
 8003d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2284      	movs	r2, #132	@ 0x84
 8003d40:	2100      	movs	r1, #0
 8003d42:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003d44:	f7fd f92c 	bl	8000fa0 <HAL_GetTick>
 8003d48:	0003      	movs	r3, r0
 8003d4a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	2208      	movs	r2, #8
 8003d54:	4013      	ands	r3, r2
 8003d56:	2b08      	cmp	r3, #8
 8003d58:	d12c      	bne.n	8003db4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d5c:	2280      	movs	r2, #128	@ 0x80
 8003d5e:	0391      	lsls	r1, r2, #14
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	4a46      	ldr	r2, [pc, #280]	@ (8003e7c <UART_CheckIdleState+0x148>)
 8003d64:	9200      	str	r2, [sp, #0]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f000 f88c 	bl	8003e84 <UART_WaitOnFlagUntilTimeout>
 8003d6c:	1e03      	subs	r3, r0, #0
 8003d6e:	d021      	beq.n	8003db4 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d70:	f3ef 8310 	mrs	r3, PRIMASK
 8003d74:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003d78:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d80:	f383 8810 	msr	PRIMASK, r3
}
 8003d84:	46c0      	nop			@ (mov r8, r8)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2180      	movs	r1, #128	@ 0x80
 8003d92:	438a      	bics	r2, r1
 8003d94:	601a      	str	r2, [r3, #0]
 8003d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d9c:	f383 8810 	msr	PRIMASK, r3
}
 8003da0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2220      	movs	r2, #32
 8003da6:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2278      	movs	r2, #120	@ 0x78
 8003dac:	2100      	movs	r1, #0
 8003dae:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003db0:	2303      	movs	r3, #3
 8003db2:	e05f      	b.n	8003e74 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2204      	movs	r2, #4
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	2b04      	cmp	r3, #4
 8003dc0:	d146      	bne.n	8003e50 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003dc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003dc4:	2280      	movs	r2, #128	@ 0x80
 8003dc6:	03d1      	lsls	r1, r2, #15
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	4a2c      	ldr	r2, [pc, #176]	@ (8003e7c <UART_CheckIdleState+0x148>)
 8003dcc:	9200      	str	r2, [sp, #0]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f000 f858 	bl	8003e84 <UART_WaitOnFlagUntilTimeout>
 8003dd4:	1e03      	subs	r3, r0, #0
 8003dd6:	d03b      	beq.n	8003e50 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dd8:	f3ef 8310 	mrs	r3, PRIMASK
 8003ddc:	60fb      	str	r3, [r7, #12]
  return(result);
 8003dde:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003de0:	637b      	str	r3, [r7, #52]	@ 0x34
 8003de2:	2301      	movs	r3, #1
 8003de4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	f383 8810 	msr	PRIMASK, r3
}
 8003dec:	46c0      	nop			@ (mov r8, r8)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4921      	ldr	r1, [pc, #132]	@ (8003e80 <UART_CheckIdleState+0x14c>)
 8003dfa:	400a      	ands	r2, r1
 8003dfc:	601a      	str	r2, [r3, #0]
 8003dfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e00:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	f383 8810 	msr	PRIMASK, r3
}
 8003e08:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e0a:	f3ef 8310 	mrs	r3, PRIMASK
 8003e0e:	61bb      	str	r3, [r7, #24]
  return(result);
 8003e10:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e12:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e14:	2301      	movs	r3, #1
 8003e16:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	f383 8810 	msr	PRIMASK, r3
}
 8003e1e:	46c0      	nop			@ (mov r8, r8)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	689a      	ldr	r2, [r3, #8]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	2101      	movs	r1, #1
 8003e2c:	438a      	bics	r2, r1
 8003e2e:	609a      	str	r2, [r3, #8]
 8003e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e32:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e34:	6a3b      	ldr	r3, [r7, #32]
 8003e36:	f383 8810 	msr	PRIMASK, r3
}
 8003e3a:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2280      	movs	r2, #128	@ 0x80
 8003e40:	2120      	movs	r1, #32
 8003e42:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2278      	movs	r2, #120	@ 0x78
 8003e48:	2100      	movs	r1, #0
 8003e4a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	e011      	b.n	8003e74 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2220      	movs	r2, #32
 8003e54:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2280      	movs	r2, #128	@ 0x80
 8003e5a:	2120      	movs	r1, #32
 8003e5c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2278      	movs	r2, #120	@ 0x78
 8003e6e:	2100      	movs	r1, #0
 8003e70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e72:	2300      	movs	r3, #0
}
 8003e74:	0018      	movs	r0, r3
 8003e76:	46bd      	mov	sp, r7
 8003e78:	b010      	add	sp, #64	@ 0x40
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	01ffffff 	.word	0x01ffffff
 8003e80:	fffffedf 	.word	0xfffffedf

08003e84 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	60b9      	str	r1, [r7, #8]
 8003e8e:	603b      	str	r3, [r7, #0]
 8003e90:	1dfb      	adds	r3, r7, #7
 8003e92:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e94:	e051      	b.n	8003f3a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e96:	69bb      	ldr	r3, [r7, #24]
 8003e98:	3301      	adds	r3, #1
 8003e9a:	d04e      	beq.n	8003f3a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e9c:	f7fd f880 	bl	8000fa0 <HAL_GetTick>
 8003ea0:	0002      	movs	r2, r0
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	69ba      	ldr	r2, [r7, #24]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d302      	bcc.n	8003eb2 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003eac:	69bb      	ldr	r3, [r7, #24]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d101      	bne.n	8003eb6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e051      	b.n	8003f5a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2204      	movs	r2, #4
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	d03b      	beq.n	8003f3a <UART_WaitOnFlagUntilTimeout+0xb6>
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	2b80      	cmp	r3, #128	@ 0x80
 8003ec6:	d038      	beq.n	8003f3a <UART_WaitOnFlagUntilTimeout+0xb6>
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	2b40      	cmp	r3, #64	@ 0x40
 8003ecc:	d035      	beq.n	8003f3a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	69db      	ldr	r3, [r3, #28]
 8003ed4:	2208      	movs	r2, #8
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	2b08      	cmp	r3, #8
 8003eda:	d111      	bne.n	8003f00 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2208      	movs	r2, #8
 8003ee2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	0018      	movs	r0, r3
 8003ee8:	f000 f83c 	bl	8003f64 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2284      	movs	r2, #132	@ 0x84
 8003ef0:	2108      	movs	r1, #8
 8003ef2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2278      	movs	r2, #120	@ 0x78
 8003ef8:	2100      	movs	r1, #0
 8003efa:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e02c      	b.n	8003f5a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	69da      	ldr	r2, [r3, #28]
 8003f06:	2380      	movs	r3, #128	@ 0x80
 8003f08:	011b      	lsls	r3, r3, #4
 8003f0a:	401a      	ands	r2, r3
 8003f0c:	2380      	movs	r3, #128	@ 0x80
 8003f0e:	011b      	lsls	r3, r3, #4
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d112      	bne.n	8003f3a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2280      	movs	r2, #128	@ 0x80
 8003f1a:	0112      	lsls	r2, r2, #4
 8003f1c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	0018      	movs	r0, r3
 8003f22:	f000 f81f 	bl	8003f64 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2284      	movs	r2, #132	@ 0x84
 8003f2a:	2120      	movs	r1, #32
 8003f2c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2278      	movs	r2, #120	@ 0x78
 8003f32:	2100      	movs	r1, #0
 8003f34:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e00f      	b.n	8003f5a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	69db      	ldr	r3, [r3, #28]
 8003f40:	68ba      	ldr	r2, [r7, #8]
 8003f42:	4013      	ands	r3, r2
 8003f44:	68ba      	ldr	r2, [r7, #8]
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	425a      	negs	r2, r3
 8003f4a:	4153      	adcs	r3, r2
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	001a      	movs	r2, r3
 8003f50:	1dfb      	adds	r3, r7, #7
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d09e      	beq.n	8003e96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f58:	2300      	movs	r3, #0
}
 8003f5a:	0018      	movs	r0, r3
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	b004      	add	sp, #16
 8003f60:	bd80      	pop	{r7, pc}
	...

08003f64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b08e      	sub	sp, #56	@ 0x38
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f6c:	f3ef 8310 	mrs	r3, PRIMASK
 8003f70:	617b      	str	r3, [r7, #20]
  return(result);
 8003f72:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f74:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f76:	2301      	movs	r3, #1
 8003f78:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	f383 8810 	msr	PRIMASK, r3
}
 8003f80:	46c0      	nop			@ (mov r8, r8)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4926      	ldr	r1, [pc, #152]	@ (8004028 <UART_EndRxTransfer+0xc4>)
 8003f8e:	400a      	ands	r2, r1
 8003f90:	601a      	str	r2, [r3, #0]
 8003f92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f94:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	f383 8810 	msr	PRIMASK, r3
}
 8003f9c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f9e:	f3ef 8310 	mrs	r3, PRIMASK
 8003fa2:	623b      	str	r3, [r7, #32]
  return(result);
 8003fa4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fa6:	633b      	str	r3, [r7, #48]	@ 0x30
 8003fa8:	2301      	movs	r3, #1
 8003faa:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fae:	f383 8810 	msr	PRIMASK, r3
}
 8003fb2:	46c0      	nop			@ (mov r8, r8)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	689a      	ldr	r2, [r3, #8]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2101      	movs	r1, #1
 8003fc0:	438a      	bics	r2, r1
 8003fc2:	609a      	str	r2, [r3, #8]
 8003fc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fca:	f383 8810 	msr	PRIMASK, r3
}
 8003fce:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d118      	bne.n	800400a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fd8:	f3ef 8310 	mrs	r3, PRIMASK
 8003fdc:	60bb      	str	r3, [r7, #8]
  return(result);
 8003fde:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fe0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f383 8810 	msr	PRIMASK, r3
}
 8003fec:	46c0      	nop			@ (mov r8, r8)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2110      	movs	r1, #16
 8003ffa:	438a      	bics	r2, r1
 8003ffc:	601a      	str	r2, [r3, #0]
 8003ffe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004000:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	f383 8810 	msr	PRIMASK, r3
}
 8004008:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2280      	movs	r2, #128	@ 0x80
 800400e:	2120      	movs	r1, #32
 8004010:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800401e:	46c0      	nop			@ (mov r8, r8)
 8004020:	46bd      	mov	sp, r7
 8004022:	b00e      	add	sp, #56	@ 0x38
 8004024:	bd80      	pop	{r7, pc}
 8004026:	46c0      	nop			@ (mov r8, r8)
 8004028:	fffffedf 	.word	0xfffffedf

0800402c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004038:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	225a      	movs	r2, #90	@ 0x5a
 800403e:	2100      	movs	r1, #0
 8004040:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2252      	movs	r2, #82	@ 0x52
 8004046:	2100      	movs	r1, #0
 8004048:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	0018      	movs	r0, r3
 800404e:	f7ff fc69 	bl	8003924 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004052:	46c0      	nop			@ (mov r8, r8)
 8004054:	46bd      	mov	sp, r7
 8004056:	b004      	add	sp, #16
 8004058:	bd80      	pop	{r7, pc}

0800405a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800405a:	b580      	push	{r7, lr}
 800405c:	b086      	sub	sp, #24
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004062:	f3ef 8310 	mrs	r3, PRIMASK
 8004066:	60bb      	str	r3, [r7, #8]
  return(result);
 8004068:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800406a:	617b      	str	r3, [r7, #20]
 800406c:	2301      	movs	r3, #1
 800406e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f383 8810 	msr	PRIMASK, r3
}
 8004076:	46c0      	nop			@ (mov r8, r8)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2140      	movs	r1, #64	@ 0x40
 8004084:	438a      	bics	r2, r1
 8004086:	601a      	str	r2, [r3, #0]
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	f383 8810 	msr	PRIMASK, r3
}
 8004092:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2220      	movs	r2, #32
 8004098:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	0018      	movs	r0, r3
 80040a4:	f7ff fc36 	bl	8003914 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040a8:	46c0      	nop			@ (mov r8, r8)
 80040aa:	46bd      	mov	sp, r7
 80040ac:	b006      	add	sp, #24
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80040b8:	46c0      	nop			@ (mov r8, r8)
 80040ba:	46bd      	mov	sp, r7
 80040bc:	b002      	add	sp, #8
 80040be:	bd80      	pop	{r7, pc}

080040c0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b084      	sub	sp, #16
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80040c8:	4b09      	ldr	r3, [pc, #36]	@ (80040f0 <USB_DisableGlobalInt+0x30>)
 80040ca:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2240      	movs	r2, #64	@ 0x40
 80040d0:	5a9b      	ldrh	r3, [r3, r2]
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	b292      	uxth	r2, r2
 80040d8:	43d2      	mvns	r2, r2
 80040da:	b292      	uxth	r2, r2
 80040dc:	4013      	ands	r3, r2
 80040de:	b299      	uxth	r1, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2240      	movs	r2, #64	@ 0x40
 80040e4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80040e6:	2300      	movs	r3, #0
}
 80040e8:	0018      	movs	r0, r3
 80040ea:	46bd      	mov	sp, r7
 80040ec:	b004      	add	sp, #16
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	0000bf80 	.word	0x0000bf80

080040f4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	1d3b      	adds	r3, r7, #4
 80040fe:	6019      	str	r1, [r3, #0]
 8004100:	605a      	str	r2, [r3, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2240      	movs	r2, #64	@ 0x40
 8004106:	2101      	movs	r1, #1
 8004108:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2240      	movs	r2, #64	@ 0x40
 800410e:	2100      	movs	r1, #0
 8004110:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2244      	movs	r2, #68	@ 0x44
 8004116:	2100      	movs	r1, #0
 8004118:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2250      	movs	r2, #80	@ 0x50
 800411e:	2100      	movs	r1, #0
 8004120:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8004122:	2300      	movs	r3, #0
}
 8004124:	0018      	movs	r0, r3
 8004126:	46bd      	mov	sp, r7
 8004128:	b004      	add	sp, #16
 800412a:	bd80      	pop	{r7, pc}

0800412c <siprintf>:
 800412c:	b40e      	push	{r1, r2, r3}
 800412e:	b510      	push	{r4, lr}
 8004130:	2400      	movs	r4, #0
 8004132:	490c      	ldr	r1, [pc, #48]	@ (8004164 <siprintf+0x38>)
 8004134:	b09d      	sub	sp, #116	@ 0x74
 8004136:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004138:	9002      	str	r0, [sp, #8]
 800413a:	9006      	str	r0, [sp, #24]
 800413c:	9107      	str	r1, [sp, #28]
 800413e:	9104      	str	r1, [sp, #16]
 8004140:	4809      	ldr	r0, [pc, #36]	@ (8004168 <siprintf+0x3c>)
 8004142:	490a      	ldr	r1, [pc, #40]	@ (800416c <siprintf+0x40>)
 8004144:	cb04      	ldmia	r3!, {r2}
 8004146:	9105      	str	r1, [sp, #20]
 8004148:	6800      	ldr	r0, [r0, #0]
 800414a:	a902      	add	r1, sp, #8
 800414c:	9301      	str	r3, [sp, #4]
 800414e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004150:	f000 f99e 	bl	8004490 <_svfiprintf_r>
 8004154:	9b02      	ldr	r3, [sp, #8]
 8004156:	701c      	strb	r4, [r3, #0]
 8004158:	b01d      	add	sp, #116	@ 0x74
 800415a:	bc10      	pop	{r4}
 800415c:	bc08      	pop	{r3}
 800415e:	b003      	add	sp, #12
 8004160:	4718      	bx	r3
 8004162:	46c0      	nop			@ (mov r8, r8)
 8004164:	7fffffff 	.word	0x7fffffff
 8004168:	2000000c 	.word	0x2000000c
 800416c:	ffff0208 	.word	0xffff0208

08004170 <memset>:
 8004170:	0003      	movs	r3, r0
 8004172:	1882      	adds	r2, r0, r2
 8004174:	4293      	cmp	r3, r2
 8004176:	d100      	bne.n	800417a <memset+0xa>
 8004178:	4770      	bx	lr
 800417a:	7019      	strb	r1, [r3, #0]
 800417c:	3301      	adds	r3, #1
 800417e:	e7f9      	b.n	8004174 <memset+0x4>

08004180 <__errno>:
 8004180:	4b01      	ldr	r3, [pc, #4]	@ (8004188 <__errno+0x8>)
 8004182:	6818      	ldr	r0, [r3, #0]
 8004184:	4770      	bx	lr
 8004186:	46c0      	nop			@ (mov r8, r8)
 8004188:	2000000c 	.word	0x2000000c

0800418c <__libc_init_array>:
 800418c:	b570      	push	{r4, r5, r6, lr}
 800418e:	2600      	movs	r6, #0
 8004190:	4c0c      	ldr	r4, [pc, #48]	@ (80041c4 <__libc_init_array+0x38>)
 8004192:	4d0d      	ldr	r5, [pc, #52]	@ (80041c8 <__libc_init_array+0x3c>)
 8004194:	1b64      	subs	r4, r4, r5
 8004196:	10a4      	asrs	r4, r4, #2
 8004198:	42a6      	cmp	r6, r4
 800419a:	d109      	bne.n	80041b0 <__libc_init_array+0x24>
 800419c:	2600      	movs	r6, #0
 800419e:	f000 fc61 	bl	8004a64 <_init>
 80041a2:	4c0a      	ldr	r4, [pc, #40]	@ (80041cc <__libc_init_array+0x40>)
 80041a4:	4d0a      	ldr	r5, [pc, #40]	@ (80041d0 <__libc_init_array+0x44>)
 80041a6:	1b64      	subs	r4, r4, r5
 80041a8:	10a4      	asrs	r4, r4, #2
 80041aa:	42a6      	cmp	r6, r4
 80041ac:	d105      	bne.n	80041ba <__libc_init_array+0x2e>
 80041ae:	bd70      	pop	{r4, r5, r6, pc}
 80041b0:	00b3      	lsls	r3, r6, #2
 80041b2:	58eb      	ldr	r3, [r5, r3]
 80041b4:	4798      	blx	r3
 80041b6:	3601      	adds	r6, #1
 80041b8:	e7ee      	b.n	8004198 <__libc_init_array+0xc>
 80041ba:	00b3      	lsls	r3, r6, #2
 80041bc:	58eb      	ldr	r3, [r5, r3]
 80041be:	4798      	blx	r3
 80041c0:	3601      	adds	r6, #1
 80041c2:	e7f2      	b.n	80041aa <__libc_init_array+0x1e>
 80041c4:	08004b0c 	.word	0x08004b0c
 80041c8:	08004b0c 	.word	0x08004b0c
 80041cc:	08004b10 	.word	0x08004b10
 80041d0:	08004b0c 	.word	0x08004b0c

080041d4 <__retarget_lock_acquire_recursive>:
 80041d4:	4770      	bx	lr

080041d6 <__retarget_lock_release_recursive>:
 80041d6:	4770      	bx	lr

080041d8 <_free_r>:
 80041d8:	b570      	push	{r4, r5, r6, lr}
 80041da:	0005      	movs	r5, r0
 80041dc:	1e0c      	subs	r4, r1, #0
 80041de:	d010      	beq.n	8004202 <_free_r+0x2a>
 80041e0:	3c04      	subs	r4, #4
 80041e2:	6823      	ldr	r3, [r4, #0]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	da00      	bge.n	80041ea <_free_r+0x12>
 80041e8:	18e4      	adds	r4, r4, r3
 80041ea:	0028      	movs	r0, r5
 80041ec:	f000 f8e0 	bl	80043b0 <__malloc_lock>
 80041f0:	4a1d      	ldr	r2, [pc, #116]	@ (8004268 <_free_r+0x90>)
 80041f2:	6813      	ldr	r3, [r2, #0]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d105      	bne.n	8004204 <_free_r+0x2c>
 80041f8:	6063      	str	r3, [r4, #4]
 80041fa:	6014      	str	r4, [r2, #0]
 80041fc:	0028      	movs	r0, r5
 80041fe:	f000 f8df 	bl	80043c0 <__malloc_unlock>
 8004202:	bd70      	pop	{r4, r5, r6, pc}
 8004204:	42a3      	cmp	r3, r4
 8004206:	d908      	bls.n	800421a <_free_r+0x42>
 8004208:	6820      	ldr	r0, [r4, #0]
 800420a:	1821      	adds	r1, r4, r0
 800420c:	428b      	cmp	r3, r1
 800420e:	d1f3      	bne.n	80041f8 <_free_r+0x20>
 8004210:	6819      	ldr	r1, [r3, #0]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	1809      	adds	r1, r1, r0
 8004216:	6021      	str	r1, [r4, #0]
 8004218:	e7ee      	b.n	80041f8 <_free_r+0x20>
 800421a:	001a      	movs	r2, r3
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d001      	beq.n	8004226 <_free_r+0x4e>
 8004222:	42a3      	cmp	r3, r4
 8004224:	d9f9      	bls.n	800421a <_free_r+0x42>
 8004226:	6811      	ldr	r1, [r2, #0]
 8004228:	1850      	adds	r0, r2, r1
 800422a:	42a0      	cmp	r0, r4
 800422c:	d10b      	bne.n	8004246 <_free_r+0x6e>
 800422e:	6820      	ldr	r0, [r4, #0]
 8004230:	1809      	adds	r1, r1, r0
 8004232:	1850      	adds	r0, r2, r1
 8004234:	6011      	str	r1, [r2, #0]
 8004236:	4283      	cmp	r3, r0
 8004238:	d1e0      	bne.n	80041fc <_free_r+0x24>
 800423a:	6818      	ldr	r0, [r3, #0]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	1841      	adds	r1, r0, r1
 8004240:	6011      	str	r1, [r2, #0]
 8004242:	6053      	str	r3, [r2, #4]
 8004244:	e7da      	b.n	80041fc <_free_r+0x24>
 8004246:	42a0      	cmp	r0, r4
 8004248:	d902      	bls.n	8004250 <_free_r+0x78>
 800424a:	230c      	movs	r3, #12
 800424c:	602b      	str	r3, [r5, #0]
 800424e:	e7d5      	b.n	80041fc <_free_r+0x24>
 8004250:	6820      	ldr	r0, [r4, #0]
 8004252:	1821      	adds	r1, r4, r0
 8004254:	428b      	cmp	r3, r1
 8004256:	d103      	bne.n	8004260 <_free_r+0x88>
 8004258:	6819      	ldr	r1, [r3, #0]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	1809      	adds	r1, r1, r0
 800425e:	6021      	str	r1, [r4, #0]
 8004260:	6063      	str	r3, [r4, #4]
 8004262:	6054      	str	r4, [r2, #4]
 8004264:	e7ca      	b.n	80041fc <_free_r+0x24>
 8004266:	46c0      	nop			@ (mov r8, r8)
 8004268:	20000620 	.word	0x20000620

0800426c <sbrk_aligned>:
 800426c:	b570      	push	{r4, r5, r6, lr}
 800426e:	4e0f      	ldr	r6, [pc, #60]	@ (80042ac <sbrk_aligned+0x40>)
 8004270:	000d      	movs	r5, r1
 8004272:	6831      	ldr	r1, [r6, #0]
 8004274:	0004      	movs	r4, r0
 8004276:	2900      	cmp	r1, #0
 8004278:	d102      	bne.n	8004280 <sbrk_aligned+0x14>
 800427a:	f000 fb95 	bl	80049a8 <_sbrk_r>
 800427e:	6030      	str	r0, [r6, #0]
 8004280:	0029      	movs	r1, r5
 8004282:	0020      	movs	r0, r4
 8004284:	f000 fb90 	bl	80049a8 <_sbrk_r>
 8004288:	1c43      	adds	r3, r0, #1
 800428a:	d103      	bne.n	8004294 <sbrk_aligned+0x28>
 800428c:	2501      	movs	r5, #1
 800428e:	426d      	negs	r5, r5
 8004290:	0028      	movs	r0, r5
 8004292:	bd70      	pop	{r4, r5, r6, pc}
 8004294:	2303      	movs	r3, #3
 8004296:	1cc5      	adds	r5, r0, #3
 8004298:	439d      	bics	r5, r3
 800429a:	42a8      	cmp	r0, r5
 800429c:	d0f8      	beq.n	8004290 <sbrk_aligned+0x24>
 800429e:	1a29      	subs	r1, r5, r0
 80042a0:	0020      	movs	r0, r4
 80042a2:	f000 fb81 	bl	80049a8 <_sbrk_r>
 80042a6:	3001      	adds	r0, #1
 80042a8:	d1f2      	bne.n	8004290 <sbrk_aligned+0x24>
 80042aa:	e7ef      	b.n	800428c <sbrk_aligned+0x20>
 80042ac:	2000061c 	.word	0x2000061c

080042b0 <_malloc_r>:
 80042b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80042b2:	2203      	movs	r2, #3
 80042b4:	1ccb      	adds	r3, r1, #3
 80042b6:	4393      	bics	r3, r2
 80042b8:	3308      	adds	r3, #8
 80042ba:	0005      	movs	r5, r0
 80042bc:	001f      	movs	r7, r3
 80042be:	2b0c      	cmp	r3, #12
 80042c0:	d234      	bcs.n	800432c <_malloc_r+0x7c>
 80042c2:	270c      	movs	r7, #12
 80042c4:	42b9      	cmp	r1, r7
 80042c6:	d833      	bhi.n	8004330 <_malloc_r+0x80>
 80042c8:	0028      	movs	r0, r5
 80042ca:	f000 f871 	bl	80043b0 <__malloc_lock>
 80042ce:	4e37      	ldr	r6, [pc, #220]	@ (80043ac <_malloc_r+0xfc>)
 80042d0:	6833      	ldr	r3, [r6, #0]
 80042d2:	001c      	movs	r4, r3
 80042d4:	2c00      	cmp	r4, #0
 80042d6:	d12f      	bne.n	8004338 <_malloc_r+0x88>
 80042d8:	0039      	movs	r1, r7
 80042da:	0028      	movs	r0, r5
 80042dc:	f7ff ffc6 	bl	800426c <sbrk_aligned>
 80042e0:	0004      	movs	r4, r0
 80042e2:	1c43      	adds	r3, r0, #1
 80042e4:	d15f      	bne.n	80043a6 <_malloc_r+0xf6>
 80042e6:	6834      	ldr	r4, [r6, #0]
 80042e8:	9400      	str	r4, [sp, #0]
 80042ea:	9b00      	ldr	r3, [sp, #0]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d14a      	bne.n	8004386 <_malloc_r+0xd6>
 80042f0:	2c00      	cmp	r4, #0
 80042f2:	d052      	beq.n	800439a <_malloc_r+0xea>
 80042f4:	6823      	ldr	r3, [r4, #0]
 80042f6:	0028      	movs	r0, r5
 80042f8:	18e3      	adds	r3, r4, r3
 80042fa:	9900      	ldr	r1, [sp, #0]
 80042fc:	9301      	str	r3, [sp, #4]
 80042fe:	f000 fb53 	bl	80049a8 <_sbrk_r>
 8004302:	9b01      	ldr	r3, [sp, #4]
 8004304:	4283      	cmp	r3, r0
 8004306:	d148      	bne.n	800439a <_malloc_r+0xea>
 8004308:	6823      	ldr	r3, [r4, #0]
 800430a:	0028      	movs	r0, r5
 800430c:	1aff      	subs	r7, r7, r3
 800430e:	0039      	movs	r1, r7
 8004310:	f7ff ffac 	bl	800426c <sbrk_aligned>
 8004314:	3001      	adds	r0, #1
 8004316:	d040      	beq.n	800439a <_malloc_r+0xea>
 8004318:	6823      	ldr	r3, [r4, #0]
 800431a:	19db      	adds	r3, r3, r7
 800431c:	6023      	str	r3, [r4, #0]
 800431e:	6833      	ldr	r3, [r6, #0]
 8004320:	685a      	ldr	r2, [r3, #4]
 8004322:	2a00      	cmp	r2, #0
 8004324:	d133      	bne.n	800438e <_malloc_r+0xde>
 8004326:	9b00      	ldr	r3, [sp, #0]
 8004328:	6033      	str	r3, [r6, #0]
 800432a:	e019      	b.n	8004360 <_malloc_r+0xb0>
 800432c:	2b00      	cmp	r3, #0
 800432e:	dac9      	bge.n	80042c4 <_malloc_r+0x14>
 8004330:	230c      	movs	r3, #12
 8004332:	602b      	str	r3, [r5, #0]
 8004334:	2000      	movs	r0, #0
 8004336:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004338:	6821      	ldr	r1, [r4, #0]
 800433a:	1bc9      	subs	r1, r1, r7
 800433c:	d420      	bmi.n	8004380 <_malloc_r+0xd0>
 800433e:	290b      	cmp	r1, #11
 8004340:	d90a      	bls.n	8004358 <_malloc_r+0xa8>
 8004342:	19e2      	adds	r2, r4, r7
 8004344:	6027      	str	r7, [r4, #0]
 8004346:	42a3      	cmp	r3, r4
 8004348:	d104      	bne.n	8004354 <_malloc_r+0xa4>
 800434a:	6032      	str	r2, [r6, #0]
 800434c:	6863      	ldr	r3, [r4, #4]
 800434e:	6011      	str	r1, [r2, #0]
 8004350:	6053      	str	r3, [r2, #4]
 8004352:	e005      	b.n	8004360 <_malloc_r+0xb0>
 8004354:	605a      	str	r2, [r3, #4]
 8004356:	e7f9      	b.n	800434c <_malloc_r+0x9c>
 8004358:	6862      	ldr	r2, [r4, #4]
 800435a:	42a3      	cmp	r3, r4
 800435c:	d10e      	bne.n	800437c <_malloc_r+0xcc>
 800435e:	6032      	str	r2, [r6, #0]
 8004360:	0028      	movs	r0, r5
 8004362:	f000 f82d 	bl	80043c0 <__malloc_unlock>
 8004366:	0020      	movs	r0, r4
 8004368:	2207      	movs	r2, #7
 800436a:	300b      	adds	r0, #11
 800436c:	1d23      	adds	r3, r4, #4
 800436e:	4390      	bics	r0, r2
 8004370:	1ac2      	subs	r2, r0, r3
 8004372:	4298      	cmp	r0, r3
 8004374:	d0df      	beq.n	8004336 <_malloc_r+0x86>
 8004376:	1a1b      	subs	r3, r3, r0
 8004378:	50a3      	str	r3, [r4, r2]
 800437a:	e7dc      	b.n	8004336 <_malloc_r+0x86>
 800437c:	605a      	str	r2, [r3, #4]
 800437e:	e7ef      	b.n	8004360 <_malloc_r+0xb0>
 8004380:	0023      	movs	r3, r4
 8004382:	6864      	ldr	r4, [r4, #4]
 8004384:	e7a6      	b.n	80042d4 <_malloc_r+0x24>
 8004386:	9c00      	ldr	r4, [sp, #0]
 8004388:	6863      	ldr	r3, [r4, #4]
 800438a:	9300      	str	r3, [sp, #0]
 800438c:	e7ad      	b.n	80042ea <_malloc_r+0x3a>
 800438e:	001a      	movs	r2, r3
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	42a3      	cmp	r3, r4
 8004394:	d1fb      	bne.n	800438e <_malloc_r+0xde>
 8004396:	2300      	movs	r3, #0
 8004398:	e7da      	b.n	8004350 <_malloc_r+0xa0>
 800439a:	230c      	movs	r3, #12
 800439c:	0028      	movs	r0, r5
 800439e:	602b      	str	r3, [r5, #0]
 80043a0:	f000 f80e 	bl	80043c0 <__malloc_unlock>
 80043a4:	e7c6      	b.n	8004334 <_malloc_r+0x84>
 80043a6:	6007      	str	r7, [r0, #0]
 80043a8:	e7da      	b.n	8004360 <_malloc_r+0xb0>
 80043aa:	46c0      	nop			@ (mov r8, r8)
 80043ac:	20000620 	.word	0x20000620

080043b0 <__malloc_lock>:
 80043b0:	b510      	push	{r4, lr}
 80043b2:	4802      	ldr	r0, [pc, #8]	@ (80043bc <__malloc_lock+0xc>)
 80043b4:	f7ff ff0e 	bl	80041d4 <__retarget_lock_acquire_recursive>
 80043b8:	bd10      	pop	{r4, pc}
 80043ba:	46c0      	nop			@ (mov r8, r8)
 80043bc:	20000618 	.word	0x20000618

080043c0 <__malloc_unlock>:
 80043c0:	b510      	push	{r4, lr}
 80043c2:	4802      	ldr	r0, [pc, #8]	@ (80043cc <__malloc_unlock+0xc>)
 80043c4:	f7ff ff07 	bl	80041d6 <__retarget_lock_release_recursive>
 80043c8:	bd10      	pop	{r4, pc}
 80043ca:	46c0      	nop			@ (mov r8, r8)
 80043cc:	20000618 	.word	0x20000618

080043d0 <__ssputs_r>:
 80043d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043d2:	688e      	ldr	r6, [r1, #8]
 80043d4:	b085      	sub	sp, #20
 80043d6:	001f      	movs	r7, r3
 80043d8:	000c      	movs	r4, r1
 80043da:	680b      	ldr	r3, [r1, #0]
 80043dc:	9002      	str	r0, [sp, #8]
 80043de:	9203      	str	r2, [sp, #12]
 80043e0:	42be      	cmp	r6, r7
 80043e2:	d830      	bhi.n	8004446 <__ssputs_r+0x76>
 80043e4:	210c      	movs	r1, #12
 80043e6:	5e62      	ldrsh	r2, [r4, r1]
 80043e8:	2190      	movs	r1, #144	@ 0x90
 80043ea:	00c9      	lsls	r1, r1, #3
 80043ec:	420a      	tst	r2, r1
 80043ee:	d028      	beq.n	8004442 <__ssputs_r+0x72>
 80043f0:	2003      	movs	r0, #3
 80043f2:	6921      	ldr	r1, [r4, #16]
 80043f4:	1a5b      	subs	r3, r3, r1
 80043f6:	9301      	str	r3, [sp, #4]
 80043f8:	6963      	ldr	r3, [r4, #20]
 80043fa:	4343      	muls	r3, r0
 80043fc:	9801      	ldr	r0, [sp, #4]
 80043fe:	0fdd      	lsrs	r5, r3, #31
 8004400:	18ed      	adds	r5, r5, r3
 8004402:	1c7b      	adds	r3, r7, #1
 8004404:	181b      	adds	r3, r3, r0
 8004406:	106d      	asrs	r5, r5, #1
 8004408:	42ab      	cmp	r3, r5
 800440a:	d900      	bls.n	800440e <__ssputs_r+0x3e>
 800440c:	001d      	movs	r5, r3
 800440e:	0552      	lsls	r2, r2, #21
 8004410:	d528      	bpl.n	8004464 <__ssputs_r+0x94>
 8004412:	0029      	movs	r1, r5
 8004414:	9802      	ldr	r0, [sp, #8]
 8004416:	f7ff ff4b 	bl	80042b0 <_malloc_r>
 800441a:	1e06      	subs	r6, r0, #0
 800441c:	d02c      	beq.n	8004478 <__ssputs_r+0xa8>
 800441e:	9a01      	ldr	r2, [sp, #4]
 8004420:	6921      	ldr	r1, [r4, #16]
 8004422:	f000 fade 	bl	80049e2 <memcpy>
 8004426:	89a2      	ldrh	r2, [r4, #12]
 8004428:	4b18      	ldr	r3, [pc, #96]	@ (800448c <__ssputs_r+0xbc>)
 800442a:	401a      	ands	r2, r3
 800442c:	2380      	movs	r3, #128	@ 0x80
 800442e:	4313      	orrs	r3, r2
 8004430:	81a3      	strh	r3, [r4, #12]
 8004432:	9b01      	ldr	r3, [sp, #4]
 8004434:	6126      	str	r6, [r4, #16]
 8004436:	18f6      	adds	r6, r6, r3
 8004438:	6026      	str	r6, [r4, #0]
 800443a:	003e      	movs	r6, r7
 800443c:	6165      	str	r5, [r4, #20]
 800443e:	1aed      	subs	r5, r5, r3
 8004440:	60a5      	str	r5, [r4, #8]
 8004442:	42be      	cmp	r6, r7
 8004444:	d900      	bls.n	8004448 <__ssputs_r+0x78>
 8004446:	003e      	movs	r6, r7
 8004448:	0032      	movs	r2, r6
 800444a:	9903      	ldr	r1, [sp, #12]
 800444c:	6820      	ldr	r0, [r4, #0]
 800444e:	f000 fa99 	bl	8004984 <memmove>
 8004452:	2000      	movs	r0, #0
 8004454:	68a3      	ldr	r3, [r4, #8]
 8004456:	1b9b      	subs	r3, r3, r6
 8004458:	60a3      	str	r3, [r4, #8]
 800445a:	6823      	ldr	r3, [r4, #0]
 800445c:	199b      	adds	r3, r3, r6
 800445e:	6023      	str	r3, [r4, #0]
 8004460:	b005      	add	sp, #20
 8004462:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004464:	002a      	movs	r2, r5
 8004466:	9802      	ldr	r0, [sp, #8]
 8004468:	f000 fac4 	bl	80049f4 <_realloc_r>
 800446c:	1e06      	subs	r6, r0, #0
 800446e:	d1e0      	bne.n	8004432 <__ssputs_r+0x62>
 8004470:	6921      	ldr	r1, [r4, #16]
 8004472:	9802      	ldr	r0, [sp, #8]
 8004474:	f7ff feb0 	bl	80041d8 <_free_r>
 8004478:	230c      	movs	r3, #12
 800447a:	2001      	movs	r0, #1
 800447c:	9a02      	ldr	r2, [sp, #8]
 800447e:	4240      	negs	r0, r0
 8004480:	6013      	str	r3, [r2, #0]
 8004482:	89a2      	ldrh	r2, [r4, #12]
 8004484:	3334      	adds	r3, #52	@ 0x34
 8004486:	4313      	orrs	r3, r2
 8004488:	81a3      	strh	r3, [r4, #12]
 800448a:	e7e9      	b.n	8004460 <__ssputs_r+0x90>
 800448c:	fffffb7f 	.word	0xfffffb7f

08004490 <_svfiprintf_r>:
 8004490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004492:	b0a1      	sub	sp, #132	@ 0x84
 8004494:	9003      	str	r0, [sp, #12]
 8004496:	001d      	movs	r5, r3
 8004498:	898b      	ldrh	r3, [r1, #12]
 800449a:	000f      	movs	r7, r1
 800449c:	0016      	movs	r6, r2
 800449e:	061b      	lsls	r3, r3, #24
 80044a0:	d511      	bpl.n	80044c6 <_svfiprintf_r+0x36>
 80044a2:	690b      	ldr	r3, [r1, #16]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d10e      	bne.n	80044c6 <_svfiprintf_r+0x36>
 80044a8:	2140      	movs	r1, #64	@ 0x40
 80044aa:	f7ff ff01 	bl	80042b0 <_malloc_r>
 80044ae:	6038      	str	r0, [r7, #0]
 80044b0:	6138      	str	r0, [r7, #16]
 80044b2:	2800      	cmp	r0, #0
 80044b4:	d105      	bne.n	80044c2 <_svfiprintf_r+0x32>
 80044b6:	230c      	movs	r3, #12
 80044b8:	9a03      	ldr	r2, [sp, #12]
 80044ba:	6013      	str	r3, [r2, #0]
 80044bc:	2001      	movs	r0, #1
 80044be:	4240      	negs	r0, r0
 80044c0:	e0cf      	b.n	8004662 <_svfiprintf_r+0x1d2>
 80044c2:	2340      	movs	r3, #64	@ 0x40
 80044c4:	617b      	str	r3, [r7, #20]
 80044c6:	2300      	movs	r3, #0
 80044c8:	ac08      	add	r4, sp, #32
 80044ca:	6163      	str	r3, [r4, #20]
 80044cc:	3320      	adds	r3, #32
 80044ce:	7663      	strb	r3, [r4, #25]
 80044d0:	3310      	adds	r3, #16
 80044d2:	76a3      	strb	r3, [r4, #26]
 80044d4:	9507      	str	r5, [sp, #28]
 80044d6:	0035      	movs	r5, r6
 80044d8:	782b      	ldrb	r3, [r5, #0]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d001      	beq.n	80044e2 <_svfiprintf_r+0x52>
 80044de:	2b25      	cmp	r3, #37	@ 0x25
 80044e0:	d148      	bne.n	8004574 <_svfiprintf_r+0xe4>
 80044e2:	1bab      	subs	r3, r5, r6
 80044e4:	9305      	str	r3, [sp, #20]
 80044e6:	42b5      	cmp	r5, r6
 80044e8:	d00b      	beq.n	8004502 <_svfiprintf_r+0x72>
 80044ea:	0032      	movs	r2, r6
 80044ec:	0039      	movs	r1, r7
 80044ee:	9803      	ldr	r0, [sp, #12]
 80044f0:	f7ff ff6e 	bl	80043d0 <__ssputs_r>
 80044f4:	3001      	adds	r0, #1
 80044f6:	d100      	bne.n	80044fa <_svfiprintf_r+0x6a>
 80044f8:	e0ae      	b.n	8004658 <_svfiprintf_r+0x1c8>
 80044fa:	6963      	ldr	r3, [r4, #20]
 80044fc:	9a05      	ldr	r2, [sp, #20]
 80044fe:	189b      	adds	r3, r3, r2
 8004500:	6163      	str	r3, [r4, #20]
 8004502:	782b      	ldrb	r3, [r5, #0]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d100      	bne.n	800450a <_svfiprintf_r+0x7a>
 8004508:	e0a6      	b.n	8004658 <_svfiprintf_r+0x1c8>
 800450a:	2201      	movs	r2, #1
 800450c:	2300      	movs	r3, #0
 800450e:	4252      	negs	r2, r2
 8004510:	6062      	str	r2, [r4, #4]
 8004512:	a904      	add	r1, sp, #16
 8004514:	3254      	adds	r2, #84	@ 0x54
 8004516:	1852      	adds	r2, r2, r1
 8004518:	1c6e      	adds	r6, r5, #1
 800451a:	6023      	str	r3, [r4, #0]
 800451c:	60e3      	str	r3, [r4, #12]
 800451e:	60a3      	str	r3, [r4, #8]
 8004520:	7013      	strb	r3, [r2, #0]
 8004522:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004524:	4b54      	ldr	r3, [pc, #336]	@ (8004678 <_svfiprintf_r+0x1e8>)
 8004526:	2205      	movs	r2, #5
 8004528:	0018      	movs	r0, r3
 800452a:	7831      	ldrb	r1, [r6, #0]
 800452c:	9305      	str	r3, [sp, #20]
 800452e:	f000 fa4d 	bl	80049cc <memchr>
 8004532:	1c75      	adds	r5, r6, #1
 8004534:	2800      	cmp	r0, #0
 8004536:	d11f      	bne.n	8004578 <_svfiprintf_r+0xe8>
 8004538:	6822      	ldr	r2, [r4, #0]
 800453a:	06d3      	lsls	r3, r2, #27
 800453c:	d504      	bpl.n	8004548 <_svfiprintf_r+0xb8>
 800453e:	2353      	movs	r3, #83	@ 0x53
 8004540:	a904      	add	r1, sp, #16
 8004542:	185b      	adds	r3, r3, r1
 8004544:	2120      	movs	r1, #32
 8004546:	7019      	strb	r1, [r3, #0]
 8004548:	0713      	lsls	r3, r2, #28
 800454a:	d504      	bpl.n	8004556 <_svfiprintf_r+0xc6>
 800454c:	2353      	movs	r3, #83	@ 0x53
 800454e:	a904      	add	r1, sp, #16
 8004550:	185b      	adds	r3, r3, r1
 8004552:	212b      	movs	r1, #43	@ 0x2b
 8004554:	7019      	strb	r1, [r3, #0]
 8004556:	7833      	ldrb	r3, [r6, #0]
 8004558:	2b2a      	cmp	r3, #42	@ 0x2a
 800455a:	d016      	beq.n	800458a <_svfiprintf_r+0xfa>
 800455c:	0035      	movs	r5, r6
 800455e:	2100      	movs	r1, #0
 8004560:	200a      	movs	r0, #10
 8004562:	68e3      	ldr	r3, [r4, #12]
 8004564:	782a      	ldrb	r2, [r5, #0]
 8004566:	1c6e      	adds	r6, r5, #1
 8004568:	3a30      	subs	r2, #48	@ 0x30
 800456a:	2a09      	cmp	r2, #9
 800456c:	d950      	bls.n	8004610 <_svfiprintf_r+0x180>
 800456e:	2900      	cmp	r1, #0
 8004570:	d111      	bne.n	8004596 <_svfiprintf_r+0x106>
 8004572:	e017      	b.n	80045a4 <_svfiprintf_r+0x114>
 8004574:	3501      	adds	r5, #1
 8004576:	e7af      	b.n	80044d8 <_svfiprintf_r+0x48>
 8004578:	9b05      	ldr	r3, [sp, #20]
 800457a:	6822      	ldr	r2, [r4, #0]
 800457c:	1ac0      	subs	r0, r0, r3
 800457e:	2301      	movs	r3, #1
 8004580:	4083      	lsls	r3, r0
 8004582:	4313      	orrs	r3, r2
 8004584:	002e      	movs	r6, r5
 8004586:	6023      	str	r3, [r4, #0]
 8004588:	e7cc      	b.n	8004524 <_svfiprintf_r+0x94>
 800458a:	9b07      	ldr	r3, [sp, #28]
 800458c:	1d19      	adds	r1, r3, #4
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	9107      	str	r1, [sp, #28]
 8004592:	2b00      	cmp	r3, #0
 8004594:	db01      	blt.n	800459a <_svfiprintf_r+0x10a>
 8004596:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004598:	e004      	b.n	80045a4 <_svfiprintf_r+0x114>
 800459a:	425b      	negs	r3, r3
 800459c:	60e3      	str	r3, [r4, #12]
 800459e:	2302      	movs	r3, #2
 80045a0:	4313      	orrs	r3, r2
 80045a2:	6023      	str	r3, [r4, #0]
 80045a4:	782b      	ldrb	r3, [r5, #0]
 80045a6:	2b2e      	cmp	r3, #46	@ 0x2e
 80045a8:	d10c      	bne.n	80045c4 <_svfiprintf_r+0x134>
 80045aa:	786b      	ldrb	r3, [r5, #1]
 80045ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80045ae:	d134      	bne.n	800461a <_svfiprintf_r+0x18a>
 80045b0:	9b07      	ldr	r3, [sp, #28]
 80045b2:	3502      	adds	r5, #2
 80045b4:	1d1a      	adds	r2, r3, #4
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	9207      	str	r2, [sp, #28]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	da01      	bge.n	80045c2 <_svfiprintf_r+0x132>
 80045be:	2301      	movs	r3, #1
 80045c0:	425b      	negs	r3, r3
 80045c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80045c4:	4e2d      	ldr	r6, [pc, #180]	@ (800467c <_svfiprintf_r+0x1ec>)
 80045c6:	2203      	movs	r2, #3
 80045c8:	0030      	movs	r0, r6
 80045ca:	7829      	ldrb	r1, [r5, #0]
 80045cc:	f000 f9fe 	bl	80049cc <memchr>
 80045d0:	2800      	cmp	r0, #0
 80045d2:	d006      	beq.n	80045e2 <_svfiprintf_r+0x152>
 80045d4:	2340      	movs	r3, #64	@ 0x40
 80045d6:	1b80      	subs	r0, r0, r6
 80045d8:	4083      	lsls	r3, r0
 80045da:	6822      	ldr	r2, [r4, #0]
 80045dc:	3501      	adds	r5, #1
 80045de:	4313      	orrs	r3, r2
 80045e0:	6023      	str	r3, [r4, #0]
 80045e2:	7829      	ldrb	r1, [r5, #0]
 80045e4:	2206      	movs	r2, #6
 80045e6:	4826      	ldr	r0, [pc, #152]	@ (8004680 <_svfiprintf_r+0x1f0>)
 80045e8:	1c6e      	adds	r6, r5, #1
 80045ea:	7621      	strb	r1, [r4, #24]
 80045ec:	f000 f9ee 	bl	80049cc <memchr>
 80045f0:	2800      	cmp	r0, #0
 80045f2:	d038      	beq.n	8004666 <_svfiprintf_r+0x1d6>
 80045f4:	4b23      	ldr	r3, [pc, #140]	@ (8004684 <_svfiprintf_r+0x1f4>)
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d122      	bne.n	8004640 <_svfiprintf_r+0x1b0>
 80045fa:	2207      	movs	r2, #7
 80045fc:	9b07      	ldr	r3, [sp, #28]
 80045fe:	3307      	adds	r3, #7
 8004600:	4393      	bics	r3, r2
 8004602:	3308      	adds	r3, #8
 8004604:	9307      	str	r3, [sp, #28]
 8004606:	6963      	ldr	r3, [r4, #20]
 8004608:	9a04      	ldr	r2, [sp, #16]
 800460a:	189b      	adds	r3, r3, r2
 800460c:	6163      	str	r3, [r4, #20]
 800460e:	e762      	b.n	80044d6 <_svfiprintf_r+0x46>
 8004610:	4343      	muls	r3, r0
 8004612:	0035      	movs	r5, r6
 8004614:	2101      	movs	r1, #1
 8004616:	189b      	adds	r3, r3, r2
 8004618:	e7a4      	b.n	8004564 <_svfiprintf_r+0xd4>
 800461a:	2300      	movs	r3, #0
 800461c:	200a      	movs	r0, #10
 800461e:	0019      	movs	r1, r3
 8004620:	3501      	adds	r5, #1
 8004622:	6063      	str	r3, [r4, #4]
 8004624:	782a      	ldrb	r2, [r5, #0]
 8004626:	1c6e      	adds	r6, r5, #1
 8004628:	3a30      	subs	r2, #48	@ 0x30
 800462a:	2a09      	cmp	r2, #9
 800462c:	d903      	bls.n	8004636 <_svfiprintf_r+0x1a6>
 800462e:	2b00      	cmp	r3, #0
 8004630:	d0c8      	beq.n	80045c4 <_svfiprintf_r+0x134>
 8004632:	9109      	str	r1, [sp, #36]	@ 0x24
 8004634:	e7c6      	b.n	80045c4 <_svfiprintf_r+0x134>
 8004636:	4341      	muls	r1, r0
 8004638:	0035      	movs	r5, r6
 800463a:	2301      	movs	r3, #1
 800463c:	1889      	adds	r1, r1, r2
 800463e:	e7f1      	b.n	8004624 <_svfiprintf_r+0x194>
 8004640:	aa07      	add	r2, sp, #28
 8004642:	9200      	str	r2, [sp, #0]
 8004644:	0021      	movs	r1, r4
 8004646:	003a      	movs	r2, r7
 8004648:	4b0f      	ldr	r3, [pc, #60]	@ (8004688 <_svfiprintf_r+0x1f8>)
 800464a:	9803      	ldr	r0, [sp, #12]
 800464c:	e000      	b.n	8004650 <_svfiprintf_r+0x1c0>
 800464e:	bf00      	nop
 8004650:	9004      	str	r0, [sp, #16]
 8004652:	9b04      	ldr	r3, [sp, #16]
 8004654:	3301      	adds	r3, #1
 8004656:	d1d6      	bne.n	8004606 <_svfiprintf_r+0x176>
 8004658:	89bb      	ldrh	r3, [r7, #12]
 800465a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800465c:	065b      	lsls	r3, r3, #25
 800465e:	d500      	bpl.n	8004662 <_svfiprintf_r+0x1d2>
 8004660:	e72c      	b.n	80044bc <_svfiprintf_r+0x2c>
 8004662:	b021      	add	sp, #132	@ 0x84
 8004664:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004666:	aa07      	add	r2, sp, #28
 8004668:	9200      	str	r2, [sp, #0]
 800466a:	0021      	movs	r1, r4
 800466c:	003a      	movs	r2, r7
 800466e:	4b06      	ldr	r3, [pc, #24]	@ (8004688 <_svfiprintf_r+0x1f8>)
 8004670:	9803      	ldr	r0, [sp, #12]
 8004672:	f000 f87b 	bl	800476c <_printf_i>
 8004676:	e7eb      	b.n	8004650 <_svfiprintf_r+0x1c0>
 8004678:	08004ad8 	.word	0x08004ad8
 800467c:	08004ade 	.word	0x08004ade
 8004680:	08004ae2 	.word	0x08004ae2
 8004684:	00000000 	.word	0x00000000
 8004688:	080043d1 	.word	0x080043d1

0800468c <_printf_common>:
 800468c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800468e:	0016      	movs	r6, r2
 8004690:	9301      	str	r3, [sp, #4]
 8004692:	688a      	ldr	r2, [r1, #8]
 8004694:	690b      	ldr	r3, [r1, #16]
 8004696:	000c      	movs	r4, r1
 8004698:	9000      	str	r0, [sp, #0]
 800469a:	4293      	cmp	r3, r2
 800469c:	da00      	bge.n	80046a0 <_printf_common+0x14>
 800469e:	0013      	movs	r3, r2
 80046a0:	0022      	movs	r2, r4
 80046a2:	6033      	str	r3, [r6, #0]
 80046a4:	3243      	adds	r2, #67	@ 0x43
 80046a6:	7812      	ldrb	r2, [r2, #0]
 80046a8:	2a00      	cmp	r2, #0
 80046aa:	d001      	beq.n	80046b0 <_printf_common+0x24>
 80046ac:	3301      	adds	r3, #1
 80046ae:	6033      	str	r3, [r6, #0]
 80046b0:	6823      	ldr	r3, [r4, #0]
 80046b2:	069b      	lsls	r3, r3, #26
 80046b4:	d502      	bpl.n	80046bc <_printf_common+0x30>
 80046b6:	6833      	ldr	r3, [r6, #0]
 80046b8:	3302      	adds	r3, #2
 80046ba:	6033      	str	r3, [r6, #0]
 80046bc:	6822      	ldr	r2, [r4, #0]
 80046be:	2306      	movs	r3, #6
 80046c0:	0015      	movs	r5, r2
 80046c2:	401d      	ands	r5, r3
 80046c4:	421a      	tst	r2, r3
 80046c6:	d027      	beq.n	8004718 <_printf_common+0x8c>
 80046c8:	0023      	movs	r3, r4
 80046ca:	3343      	adds	r3, #67	@ 0x43
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	1e5a      	subs	r2, r3, #1
 80046d0:	4193      	sbcs	r3, r2
 80046d2:	6822      	ldr	r2, [r4, #0]
 80046d4:	0692      	lsls	r2, r2, #26
 80046d6:	d430      	bmi.n	800473a <_printf_common+0xae>
 80046d8:	0022      	movs	r2, r4
 80046da:	9901      	ldr	r1, [sp, #4]
 80046dc:	9800      	ldr	r0, [sp, #0]
 80046de:	9d08      	ldr	r5, [sp, #32]
 80046e0:	3243      	adds	r2, #67	@ 0x43
 80046e2:	47a8      	blx	r5
 80046e4:	3001      	adds	r0, #1
 80046e6:	d025      	beq.n	8004734 <_printf_common+0xa8>
 80046e8:	2206      	movs	r2, #6
 80046ea:	6823      	ldr	r3, [r4, #0]
 80046ec:	2500      	movs	r5, #0
 80046ee:	4013      	ands	r3, r2
 80046f0:	2b04      	cmp	r3, #4
 80046f2:	d105      	bne.n	8004700 <_printf_common+0x74>
 80046f4:	6833      	ldr	r3, [r6, #0]
 80046f6:	68e5      	ldr	r5, [r4, #12]
 80046f8:	1aed      	subs	r5, r5, r3
 80046fa:	43eb      	mvns	r3, r5
 80046fc:	17db      	asrs	r3, r3, #31
 80046fe:	401d      	ands	r5, r3
 8004700:	68a3      	ldr	r3, [r4, #8]
 8004702:	6922      	ldr	r2, [r4, #16]
 8004704:	4293      	cmp	r3, r2
 8004706:	dd01      	ble.n	800470c <_printf_common+0x80>
 8004708:	1a9b      	subs	r3, r3, r2
 800470a:	18ed      	adds	r5, r5, r3
 800470c:	2600      	movs	r6, #0
 800470e:	42b5      	cmp	r5, r6
 8004710:	d120      	bne.n	8004754 <_printf_common+0xc8>
 8004712:	2000      	movs	r0, #0
 8004714:	e010      	b.n	8004738 <_printf_common+0xac>
 8004716:	3501      	adds	r5, #1
 8004718:	68e3      	ldr	r3, [r4, #12]
 800471a:	6832      	ldr	r2, [r6, #0]
 800471c:	1a9b      	subs	r3, r3, r2
 800471e:	42ab      	cmp	r3, r5
 8004720:	ddd2      	ble.n	80046c8 <_printf_common+0x3c>
 8004722:	0022      	movs	r2, r4
 8004724:	2301      	movs	r3, #1
 8004726:	9901      	ldr	r1, [sp, #4]
 8004728:	9800      	ldr	r0, [sp, #0]
 800472a:	9f08      	ldr	r7, [sp, #32]
 800472c:	3219      	adds	r2, #25
 800472e:	47b8      	blx	r7
 8004730:	3001      	adds	r0, #1
 8004732:	d1f0      	bne.n	8004716 <_printf_common+0x8a>
 8004734:	2001      	movs	r0, #1
 8004736:	4240      	negs	r0, r0
 8004738:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800473a:	2030      	movs	r0, #48	@ 0x30
 800473c:	18e1      	adds	r1, r4, r3
 800473e:	3143      	adds	r1, #67	@ 0x43
 8004740:	7008      	strb	r0, [r1, #0]
 8004742:	0021      	movs	r1, r4
 8004744:	1c5a      	adds	r2, r3, #1
 8004746:	3145      	adds	r1, #69	@ 0x45
 8004748:	7809      	ldrb	r1, [r1, #0]
 800474a:	18a2      	adds	r2, r4, r2
 800474c:	3243      	adds	r2, #67	@ 0x43
 800474e:	3302      	adds	r3, #2
 8004750:	7011      	strb	r1, [r2, #0]
 8004752:	e7c1      	b.n	80046d8 <_printf_common+0x4c>
 8004754:	0022      	movs	r2, r4
 8004756:	2301      	movs	r3, #1
 8004758:	9901      	ldr	r1, [sp, #4]
 800475a:	9800      	ldr	r0, [sp, #0]
 800475c:	9f08      	ldr	r7, [sp, #32]
 800475e:	321a      	adds	r2, #26
 8004760:	47b8      	blx	r7
 8004762:	3001      	adds	r0, #1
 8004764:	d0e6      	beq.n	8004734 <_printf_common+0xa8>
 8004766:	3601      	adds	r6, #1
 8004768:	e7d1      	b.n	800470e <_printf_common+0x82>
	...

0800476c <_printf_i>:
 800476c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800476e:	b08b      	sub	sp, #44	@ 0x2c
 8004770:	9206      	str	r2, [sp, #24]
 8004772:	000a      	movs	r2, r1
 8004774:	3243      	adds	r2, #67	@ 0x43
 8004776:	9307      	str	r3, [sp, #28]
 8004778:	9005      	str	r0, [sp, #20]
 800477a:	9203      	str	r2, [sp, #12]
 800477c:	7e0a      	ldrb	r2, [r1, #24]
 800477e:	000c      	movs	r4, r1
 8004780:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004782:	2a78      	cmp	r2, #120	@ 0x78
 8004784:	d809      	bhi.n	800479a <_printf_i+0x2e>
 8004786:	2a62      	cmp	r2, #98	@ 0x62
 8004788:	d80b      	bhi.n	80047a2 <_printf_i+0x36>
 800478a:	2a00      	cmp	r2, #0
 800478c:	d100      	bne.n	8004790 <_printf_i+0x24>
 800478e:	e0ba      	b.n	8004906 <_printf_i+0x19a>
 8004790:	497a      	ldr	r1, [pc, #488]	@ (800497c <_printf_i+0x210>)
 8004792:	9104      	str	r1, [sp, #16]
 8004794:	2a58      	cmp	r2, #88	@ 0x58
 8004796:	d100      	bne.n	800479a <_printf_i+0x2e>
 8004798:	e08e      	b.n	80048b8 <_printf_i+0x14c>
 800479a:	0025      	movs	r5, r4
 800479c:	3542      	adds	r5, #66	@ 0x42
 800479e:	702a      	strb	r2, [r5, #0]
 80047a0:	e022      	b.n	80047e8 <_printf_i+0x7c>
 80047a2:	0010      	movs	r0, r2
 80047a4:	3863      	subs	r0, #99	@ 0x63
 80047a6:	2815      	cmp	r0, #21
 80047a8:	d8f7      	bhi.n	800479a <_printf_i+0x2e>
 80047aa:	f7fb fcb5 	bl	8000118 <__gnu_thumb1_case_shi>
 80047ae:	0016      	.short	0x0016
 80047b0:	fff6001f 	.word	0xfff6001f
 80047b4:	fff6fff6 	.word	0xfff6fff6
 80047b8:	001ffff6 	.word	0x001ffff6
 80047bc:	fff6fff6 	.word	0xfff6fff6
 80047c0:	fff6fff6 	.word	0xfff6fff6
 80047c4:	0036009f 	.word	0x0036009f
 80047c8:	fff6007e 	.word	0xfff6007e
 80047cc:	00b0fff6 	.word	0x00b0fff6
 80047d0:	0036fff6 	.word	0x0036fff6
 80047d4:	fff6fff6 	.word	0xfff6fff6
 80047d8:	0082      	.short	0x0082
 80047da:	0025      	movs	r5, r4
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	3542      	adds	r5, #66	@ 0x42
 80047e0:	1d11      	adds	r1, r2, #4
 80047e2:	6019      	str	r1, [r3, #0]
 80047e4:	6813      	ldr	r3, [r2, #0]
 80047e6:	702b      	strb	r3, [r5, #0]
 80047e8:	2301      	movs	r3, #1
 80047ea:	e09e      	b.n	800492a <_printf_i+0x1be>
 80047ec:	6818      	ldr	r0, [r3, #0]
 80047ee:	6809      	ldr	r1, [r1, #0]
 80047f0:	1d02      	adds	r2, r0, #4
 80047f2:	060d      	lsls	r5, r1, #24
 80047f4:	d50b      	bpl.n	800480e <_printf_i+0xa2>
 80047f6:	6806      	ldr	r6, [r0, #0]
 80047f8:	601a      	str	r2, [r3, #0]
 80047fa:	2e00      	cmp	r6, #0
 80047fc:	da03      	bge.n	8004806 <_printf_i+0x9a>
 80047fe:	232d      	movs	r3, #45	@ 0x2d
 8004800:	9a03      	ldr	r2, [sp, #12]
 8004802:	4276      	negs	r6, r6
 8004804:	7013      	strb	r3, [r2, #0]
 8004806:	4b5d      	ldr	r3, [pc, #372]	@ (800497c <_printf_i+0x210>)
 8004808:	270a      	movs	r7, #10
 800480a:	9304      	str	r3, [sp, #16]
 800480c:	e018      	b.n	8004840 <_printf_i+0xd4>
 800480e:	6806      	ldr	r6, [r0, #0]
 8004810:	601a      	str	r2, [r3, #0]
 8004812:	0649      	lsls	r1, r1, #25
 8004814:	d5f1      	bpl.n	80047fa <_printf_i+0x8e>
 8004816:	b236      	sxth	r6, r6
 8004818:	e7ef      	b.n	80047fa <_printf_i+0x8e>
 800481a:	6808      	ldr	r0, [r1, #0]
 800481c:	6819      	ldr	r1, [r3, #0]
 800481e:	c940      	ldmia	r1!, {r6}
 8004820:	0605      	lsls	r5, r0, #24
 8004822:	d402      	bmi.n	800482a <_printf_i+0xbe>
 8004824:	0640      	lsls	r0, r0, #25
 8004826:	d500      	bpl.n	800482a <_printf_i+0xbe>
 8004828:	b2b6      	uxth	r6, r6
 800482a:	6019      	str	r1, [r3, #0]
 800482c:	4b53      	ldr	r3, [pc, #332]	@ (800497c <_printf_i+0x210>)
 800482e:	270a      	movs	r7, #10
 8004830:	9304      	str	r3, [sp, #16]
 8004832:	2a6f      	cmp	r2, #111	@ 0x6f
 8004834:	d100      	bne.n	8004838 <_printf_i+0xcc>
 8004836:	3f02      	subs	r7, #2
 8004838:	0023      	movs	r3, r4
 800483a:	2200      	movs	r2, #0
 800483c:	3343      	adds	r3, #67	@ 0x43
 800483e:	701a      	strb	r2, [r3, #0]
 8004840:	6863      	ldr	r3, [r4, #4]
 8004842:	60a3      	str	r3, [r4, #8]
 8004844:	2b00      	cmp	r3, #0
 8004846:	db06      	blt.n	8004856 <_printf_i+0xea>
 8004848:	2104      	movs	r1, #4
 800484a:	6822      	ldr	r2, [r4, #0]
 800484c:	9d03      	ldr	r5, [sp, #12]
 800484e:	438a      	bics	r2, r1
 8004850:	6022      	str	r2, [r4, #0]
 8004852:	4333      	orrs	r3, r6
 8004854:	d00c      	beq.n	8004870 <_printf_i+0x104>
 8004856:	9d03      	ldr	r5, [sp, #12]
 8004858:	0030      	movs	r0, r6
 800485a:	0039      	movs	r1, r7
 800485c:	f7fb fcec 	bl	8000238 <__aeabi_uidivmod>
 8004860:	9b04      	ldr	r3, [sp, #16]
 8004862:	3d01      	subs	r5, #1
 8004864:	5c5b      	ldrb	r3, [r3, r1]
 8004866:	702b      	strb	r3, [r5, #0]
 8004868:	0033      	movs	r3, r6
 800486a:	0006      	movs	r6, r0
 800486c:	429f      	cmp	r7, r3
 800486e:	d9f3      	bls.n	8004858 <_printf_i+0xec>
 8004870:	2f08      	cmp	r7, #8
 8004872:	d109      	bne.n	8004888 <_printf_i+0x11c>
 8004874:	6823      	ldr	r3, [r4, #0]
 8004876:	07db      	lsls	r3, r3, #31
 8004878:	d506      	bpl.n	8004888 <_printf_i+0x11c>
 800487a:	6862      	ldr	r2, [r4, #4]
 800487c:	6923      	ldr	r3, [r4, #16]
 800487e:	429a      	cmp	r2, r3
 8004880:	dc02      	bgt.n	8004888 <_printf_i+0x11c>
 8004882:	2330      	movs	r3, #48	@ 0x30
 8004884:	3d01      	subs	r5, #1
 8004886:	702b      	strb	r3, [r5, #0]
 8004888:	9b03      	ldr	r3, [sp, #12]
 800488a:	1b5b      	subs	r3, r3, r5
 800488c:	6123      	str	r3, [r4, #16]
 800488e:	9b07      	ldr	r3, [sp, #28]
 8004890:	0021      	movs	r1, r4
 8004892:	9300      	str	r3, [sp, #0]
 8004894:	9805      	ldr	r0, [sp, #20]
 8004896:	9b06      	ldr	r3, [sp, #24]
 8004898:	aa09      	add	r2, sp, #36	@ 0x24
 800489a:	f7ff fef7 	bl	800468c <_printf_common>
 800489e:	3001      	adds	r0, #1
 80048a0:	d148      	bne.n	8004934 <_printf_i+0x1c8>
 80048a2:	2001      	movs	r0, #1
 80048a4:	4240      	negs	r0, r0
 80048a6:	b00b      	add	sp, #44	@ 0x2c
 80048a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048aa:	2220      	movs	r2, #32
 80048ac:	6809      	ldr	r1, [r1, #0]
 80048ae:	430a      	orrs	r2, r1
 80048b0:	6022      	str	r2, [r4, #0]
 80048b2:	2278      	movs	r2, #120	@ 0x78
 80048b4:	4932      	ldr	r1, [pc, #200]	@ (8004980 <_printf_i+0x214>)
 80048b6:	9104      	str	r1, [sp, #16]
 80048b8:	0021      	movs	r1, r4
 80048ba:	3145      	adds	r1, #69	@ 0x45
 80048bc:	700a      	strb	r2, [r1, #0]
 80048be:	6819      	ldr	r1, [r3, #0]
 80048c0:	6822      	ldr	r2, [r4, #0]
 80048c2:	c940      	ldmia	r1!, {r6}
 80048c4:	0610      	lsls	r0, r2, #24
 80048c6:	d402      	bmi.n	80048ce <_printf_i+0x162>
 80048c8:	0650      	lsls	r0, r2, #25
 80048ca:	d500      	bpl.n	80048ce <_printf_i+0x162>
 80048cc:	b2b6      	uxth	r6, r6
 80048ce:	6019      	str	r1, [r3, #0]
 80048d0:	07d3      	lsls	r3, r2, #31
 80048d2:	d502      	bpl.n	80048da <_printf_i+0x16e>
 80048d4:	2320      	movs	r3, #32
 80048d6:	4313      	orrs	r3, r2
 80048d8:	6023      	str	r3, [r4, #0]
 80048da:	2e00      	cmp	r6, #0
 80048dc:	d001      	beq.n	80048e2 <_printf_i+0x176>
 80048de:	2710      	movs	r7, #16
 80048e0:	e7aa      	b.n	8004838 <_printf_i+0xcc>
 80048e2:	2220      	movs	r2, #32
 80048e4:	6823      	ldr	r3, [r4, #0]
 80048e6:	4393      	bics	r3, r2
 80048e8:	6023      	str	r3, [r4, #0]
 80048ea:	e7f8      	b.n	80048de <_printf_i+0x172>
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	680d      	ldr	r5, [r1, #0]
 80048f0:	1d10      	adds	r0, r2, #4
 80048f2:	6949      	ldr	r1, [r1, #20]
 80048f4:	6018      	str	r0, [r3, #0]
 80048f6:	6813      	ldr	r3, [r2, #0]
 80048f8:	062e      	lsls	r6, r5, #24
 80048fa:	d501      	bpl.n	8004900 <_printf_i+0x194>
 80048fc:	6019      	str	r1, [r3, #0]
 80048fe:	e002      	b.n	8004906 <_printf_i+0x19a>
 8004900:	066d      	lsls	r5, r5, #25
 8004902:	d5fb      	bpl.n	80048fc <_printf_i+0x190>
 8004904:	8019      	strh	r1, [r3, #0]
 8004906:	2300      	movs	r3, #0
 8004908:	9d03      	ldr	r5, [sp, #12]
 800490a:	6123      	str	r3, [r4, #16]
 800490c:	e7bf      	b.n	800488e <_printf_i+0x122>
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	1d11      	adds	r1, r2, #4
 8004912:	6019      	str	r1, [r3, #0]
 8004914:	6815      	ldr	r5, [r2, #0]
 8004916:	2100      	movs	r1, #0
 8004918:	0028      	movs	r0, r5
 800491a:	6862      	ldr	r2, [r4, #4]
 800491c:	f000 f856 	bl	80049cc <memchr>
 8004920:	2800      	cmp	r0, #0
 8004922:	d001      	beq.n	8004928 <_printf_i+0x1bc>
 8004924:	1b40      	subs	r0, r0, r5
 8004926:	6060      	str	r0, [r4, #4]
 8004928:	6863      	ldr	r3, [r4, #4]
 800492a:	6123      	str	r3, [r4, #16]
 800492c:	2300      	movs	r3, #0
 800492e:	9a03      	ldr	r2, [sp, #12]
 8004930:	7013      	strb	r3, [r2, #0]
 8004932:	e7ac      	b.n	800488e <_printf_i+0x122>
 8004934:	002a      	movs	r2, r5
 8004936:	6923      	ldr	r3, [r4, #16]
 8004938:	9906      	ldr	r1, [sp, #24]
 800493a:	9805      	ldr	r0, [sp, #20]
 800493c:	9d07      	ldr	r5, [sp, #28]
 800493e:	47a8      	blx	r5
 8004940:	3001      	adds	r0, #1
 8004942:	d0ae      	beq.n	80048a2 <_printf_i+0x136>
 8004944:	6823      	ldr	r3, [r4, #0]
 8004946:	079b      	lsls	r3, r3, #30
 8004948:	d415      	bmi.n	8004976 <_printf_i+0x20a>
 800494a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800494c:	68e0      	ldr	r0, [r4, #12]
 800494e:	4298      	cmp	r0, r3
 8004950:	daa9      	bge.n	80048a6 <_printf_i+0x13a>
 8004952:	0018      	movs	r0, r3
 8004954:	e7a7      	b.n	80048a6 <_printf_i+0x13a>
 8004956:	0022      	movs	r2, r4
 8004958:	2301      	movs	r3, #1
 800495a:	9906      	ldr	r1, [sp, #24]
 800495c:	9805      	ldr	r0, [sp, #20]
 800495e:	9e07      	ldr	r6, [sp, #28]
 8004960:	3219      	adds	r2, #25
 8004962:	47b0      	blx	r6
 8004964:	3001      	adds	r0, #1
 8004966:	d09c      	beq.n	80048a2 <_printf_i+0x136>
 8004968:	3501      	adds	r5, #1
 800496a:	68e3      	ldr	r3, [r4, #12]
 800496c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800496e:	1a9b      	subs	r3, r3, r2
 8004970:	42ab      	cmp	r3, r5
 8004972:	dcf0      	bgt.n	8004956 <_printf_i+0x1ea>
 8004974:	e7e9      	b.n	800494a <_printf_i+0x1de>
 8004976:	2500      	movs	r5, #0
 8004978:	e7f7      	b.n	800496a <_printf_i+0x1fe>
 800497a:	46c0      	nop			@ (mov r8, r8)
 800497c:	08004ae9 	.word	0x08004ae9
 8004980:	08004afa 	.word	0x08004afa

08004984 <memmove>:
 8004984:	b510      	push	{r4, lr}
 8004986:	4288      	cmp	r0, r1
 8004988:	d902      	bls.n	8004990 <memmove+0xc>
 800498a:	188b      	adds	r3, r1, r2
 800498c:	4298      	cmp	r0, r3
 800498e:	d308      	bcc.n	80049a2 <memmove+0x1e>
 8004990:	2300      	movs	r3, #0
 8004992:	429a      	cmp	r2, r3
 8004994:	d007      	beq.n	80049a6 <memmove+0x22>
 8004996:	5ccc      	ldrb	r4, [r1, r3]
 8004998:	54c4      	strb	r4, [r0, r3]
 800499a:	3301      	adds	r3, #1
 800499c:	e7f9      	b.n	8004992 <memmove+0xe>
 800499e:	5c8b      	ldrb	r3, [r1, r2]
 80049a0:	5483      	strb	r3, [r0, r2]
 80049a2:	3a01      	subs	r2, #1
 80049a4:	d2fb      	bcs.n	800499e <memmove+0x1a>
 80049a6:	bd10      	pop	{r4, pc}

080049a8 <_sbrk_r>:
 80049a8:	2300      	movs	r3, #0
 80049aa:	b570      	push	{r4, r5, r6, lr}
 80049ac:	4d06      	ldr	r5, [pc, #24]	@ (80049c8 <_sbrk_r+0x20>)
 80049ae:	0004      	movs	r4, r0
 80049b0:	0008      	movs	r0, r1
 80049b2:	602b      	str	r3, [r5, #0]
 80049b4:	f7fc f950 	bl	8000c58 <_sbrk>
 80049b8:	1c43      	adds	r3, r0, #1
 80049ba:	d103      	bne.n	80049c4 <_sbrk_r+0x1c>
 80049bc:	682b      	ldr	r3, [r5, #0]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d000      	beq.n	80049c4 <_sbrk_r+0x1c>
 80049c2:	6023      	str	r3, [r4, #0]
 80049c4:	bd70      	pop	{r4, r5, r6, pc}
 80049c6:	46c0      	nop			@ (mov r8, r8)
 80049c8:	20000614 	.word	0x20000614

080049cc <memchr>:
 80049cc:	b2c9      	uxtb	r1, r1
 80049ce:	1882      	adds	r2, r0, r2
 80049d0:	4290      	cmp	r0, r2
 80049d2:	d101      	bne.n	80049d8 <memchr+0xc>
 80049d4:	2000      	movs	r0, #0
 80049d6:	4770      	bx	lr
 80049d8:	7803      	ldrb	r3, [r0, #0]
 80049da:	428b      	cmp	r3, r1
 80049dc:	d0fb      	beq.n	80049d6 <memchr+0xa>
 80049de:	3001      	adds	r0, #1
 80049e0:	e7f6      	b.n	80049d0 <memchr+0x4>

080049e2 <memcpy>:
 80049e2:	2300      	movs	r3, #0
 80049e4:	b510      	push	{r4, lr}
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d100      	bne.n	80049ec <memcpy+0xa>
 80049ea:	bd10      	pop	{r4, pc}
 80049ec:	5ccc      	ldrb	r4, [r1, r3]
 80049ee:	54c4      	strb	r4, [r0, r3]
 80049f0:	3301      	adds	r3, #1
 80049f2:	e7f8      	b.n	80049e6 <memcpy+0x4>

080049f4 <_realloc_r>:
 80049f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80049f6:	0006      	movs	r6, r0
 80049f8:	000c      	movs	r4, r1
 80049fa:	0015      	movs	r5, r2
 80049fc:	2900      	cmp	r1, #0
 80049fe:	d105      	bne.n	8004a0c <_realloc_r+0x18>
 8004a00:	0011      	movs	r1, r2
 8004a02:	f7ff fc55 	bl	80042b0 <_malloc_r>
 8004a06:	0004      	movs	r4, r0
 8004a08:	0020      	movs	r0, r4
 8004a0a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004a0c:	2a00      	cmp	r2, #0
 8004a0e:	d103      	bne.n	8004a18 <_realloc_r+0x24>
 8004a10:	f7ff fbe2 	bl	80041d8 <_free_r>
 8004a14:	002c      	movs	r4, r5
 8004a16:	e7f7      	b.n	8004a08 <_realloc_r+0x14>
 8004a18:	f000 f81c 	bl	8004a54 <_malloc_usable_size_r>
 8004a1c:	0007      	movs	r7, r0
 8004a1e:	4285      	cmp	r5, r0
 8004a20:	d802      	bhi.n	8004a28 <_realloc_r+0x34>
 8004a22:	0843      	lsrs	r3, r0, #1
 8004a24:	42ab      	cmp	r3, r5
 8004a26:	d3ef      	bcc.n	8004a08 <_realloc_r+0x14>
 8004a28:	0029      	movs	r1, r5
 8004a2a:	0030      	movs	r0, r6
 8004a2c:	f7ff fc40 	bl	80042b0 <_malloc_r>
 8004a30:	9001      	str	r0, [sp, #4]
 8004a32:	2800      	cmp	r0, #0
 8004a34:	d101      	bne.n	8004a3a <_realloc_r+0x46>
 8004a36:	9c01      	ldr	r4, [sp, #4]
 8004a38:	e7e6      	b.n	8004a08 <_realloc_r+0x14>
 8004a3a:	002a      	movs	r2, r5
 8004a3c:	42bd      	cmp	r5, r7
 8004a3e:	d900      	bls.n	8004a42 <_realloc_r+0x4e>
 8004a40:	003a      	movs	r2, r7
 8004a42:	0021      	movs	r1, r4
 8004a44:	9801      	ldr	r0, [sp, #4]
 8004a46:	f7ff ffcc 	bl	80049e2 <memcpy>
 8004a4a:	0021      	movs	r1, r4
 8004a4c:	0030      	movs	r0, r6
 8004a4e:	f7ff fbc3 	bl	80041d8 <_free_r>
 8004a52:	e7f0      	b.n	8004a36 <_realloc_r+0x42>

08004a54 <_malloc_usable_size_r>:
 8004a54:	1f0b      	subs	r3, r1, #4
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	1f18      	subs	r0, r3, #4
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	da01      	bge.n	8004a62 <_malloc_usable_size_r+0xe>
 8004a5e:	580b      	ldr	r3, [r1, r0]
 8004a60:	18c0      	adds	r0, r0, r3
 8004a62:	4770      	bx	lr

08004a64 <_init>:
 8004a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a66:	46c0      	nop			@ (mov r8, r8)
 8004a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a6a:	bc08      	pop	{r3}
 8004a6c:	469e      	mov	lr, r3
 8004a6e:	4770      	bx	lr

08004a70 <_fini>:
 8004a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a72:	46c0      	nop			@ (mov r8, r8)
 8004a74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a76:	bc08      	pop	{r3}
 8004a78:	469e      	mov	lr, r3
 8004a7a:	4770      	bx	lr
